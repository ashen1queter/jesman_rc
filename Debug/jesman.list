
jesman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004648  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080047e8  080047e8  000057e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d0  080048d0  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080048d0  080048d0  000058d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048d8  080048d8  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d8  080048d8  000058d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048dc  080048dc  000058dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080048e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000060  08004940  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08004940  00006348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b420  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000214a  00000000  00000000  000114b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  00013600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c8  00000000  00000000  00014030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017355  00000000  00000000  000147f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd24  00000000  00000000  0002bb4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092437  00000000  00000000  00038871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000caca8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e10  00000000  00000000  000cacec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000cdafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080047d0 	.word	0x080047d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080047d0 	.word	0x080047d0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <map>:
void MX_DMA_Init(void);
void MX_ADC1_Init(void);
void MX_USART1_UART_Init(void);


uint16_t map(uint16_t value, uint16_t fromLow, uint16_t fromHigh, uint16_t toLow, uint16_t toHigh){
 80005bc:	b490      	push	{r4, r7}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4604      	mov	r4, r0
 80005c4:	4608      	mov	r0, r1
 80005c6:	4611      	mov	r1, r2
 80005c8:	461a      	mov	r2, r3
 80005ca:	4623      	mov	r3, r4
 80005cc:	80fb      	strh	r3, [r7, #6]
 80005ce:	4603      	mov	r3, r0
 80005d0:	80bb      	strh	r3, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	807b      	strh	r3, [r7, #2]
 80005d6:	4613      	mov	r3, r2
 80005d8:	803b      	strh	r3, [r7, #0]
	return (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow;
 80005da:	88fa      	ldrh	r2, [r7, #6]
 80005dc:	88bb      	ldrh	r3, [r7, #4]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	8a39      	ldrh	r1, [r7, #16]
 80005e2:	883a      	ldrh	r2, [r7, #0]
 80005e4:	1a8a      	subs	r2, r1, r2
 80005e6:	fb03 f202 	mul.w	r2, r3, r2
 80005ea:	8879      	ldrh	r1, [r7, #2]
 80005ec:	88bb      	ldrh	r3, [r7, #4]
 80005ee:	1acb      	subs	r3, r1, r3
 80005f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	883b      	ldrh	r3, [r7, #0]
 80005f8:	4413      	add	r3, r2
 80005fa:	b29b      	uxth	r3, r3
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bc90      	pop	{r4, r7}
 8000604:	4770      	bx	lr
	...

08000608 <mapping_adc>:
*/

/**
 * @brief Maps values from 0-4095 to 192-1792(suited range for SBUS)
 */
void mapping_adc(){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af02      	add	r7, sp, #8
	joystick_arr_[0][0] = map(joystick_arr[0], 0, 4095, 192, 1792)+errors[0];
 800060e:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <mapping_adc+0x58>)
 8000610:	8818      	ldrh	r0, [r3, #0]
 8000612:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	23c0      	movs	r3, #192	@ 0xc0
 800061a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800061e:	2100      	movs	r1, #0
 8000620:	f7ff ffcc 	bl	80005bc <map>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <mapping_adc+0x5c>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	4413      	add	r3, r2
 800062e:	b29a      	uxth	r2, r3
 8000630:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <mapping_adc+0x60>)
 8000632:	801a      	strh	r2, [r3, #0]
	joystick_arr_[0][1] = map(joystick_arr[1], 4095, 0, 192, 1792)+errors[1];
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <mapping_adc+0x58>)
 8000636:	8858      	ldrh	r0, [r3, #2]
 8000638:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	23c0      	movs	r3, #192	@ 0xc0
 8000640:	2200      	movs	r2, #0
 8000642:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8000646:	f7ff ffb9 	bl	80005bc <map>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <mapping_adc+0x5c>)
 8000650:	885b      	ldrh	r3, [r3, #2]
 8000652:	4413      	add	r3, r2
 8000654:	b29a      	uxth	r2, r3
 8000656:	4b04      	ldr	r3, [pc, #16]	@ (8000668 <mapping_adc+0x60>)
 8000658:	805a      	strh	r2, [r3, #2]
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000170 	.word	0x20000170
 8000664:	200001d4 	.word	0x200001d4
 8000668:	20000174 	.word	0x20000174

0800066c <channels_>:

/**
 * @brief Mapping adc values (x and y of joystick) to channels, packed in 11 bits
 */
void channels_(){
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	channels[0] = (joystick_arr_[0][0]& 0x07FF); //Roll
 8000670:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <channels_+0x2c>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b08      	ldr	r3, [pc, #32]	@ (800069c <channels_+0x30>)
 800067c:	801a      	strh	r2, [r3, #0]
	channels[1] = (joystick_arr_[0][1]& 0x07FF); //Pitch
 800067e:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <channels_+0x2c>)
 8000680:	885b      	ldrh	r3, [r3, #2]
 8000682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000686:	b29a      	uxth	r2, r3
 8000688:	4b04      	ldr	r3, [pc, #16]	@ (800069c <channels_+0x30>)
 800068a:	805a      	strh	r2, [r3, #2]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000174 	.word	0x20000174
 800069c:	20000198 	.word	0x20000198

080006a0 <sbus_packet>:
    channels[15] = (uint16_t) ((_payload[20]>>5|_payload[21]<<3)                     & 0x07FF);
}
*/

// Refer to this
void sbus_packet() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
    memset(packet, 0, sizeof(packet));
 80006a4:	2219      	movs	r2, #25
 80006a6:	2100      	movs	r1, #0
 80006a8:	4894      	ldr	r0, [pc, #592]	@ (80008fc <sbus_packet+0x25c>)
 80006aa:	f003 fc13 	bl	8003ed4 <memset>
    packet[0] = 0x0F;
 80006ae:	4b93      	ldr	r3, [pc, #588]	@ (80008fc <sbus_packet+0x25c>)
 80006b0:	220f      	movs	r2, #15
 80006b2:	701a      	strb	r2, [r3, #0]
    packet[1] = (uint8_t) ((channels[0] & 0x07FF));
 80006b4:	4b92      	ldr	r3, [pc, #584]	@ (8000900 <sbus_packet+0x260>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4b90      	ldr	r3, [pc, #576]	@ (80008fc <sbus_packet+0x25c>)
 80006bc:	705a      	strb	r2, [r3, #1]
    packet[2] = (uint8_t) ((channels[0] & 0x07FF)>>8 | (channels[1] & 0x07FF)<<3);
 80006be:	4b90      	ldr	r3, [pc, #576]	@ (8000900 <sbus_packet+0x260>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	121b      	asrs	r3, r3, #8
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	b25a      	sxtb	r2, r3
 80006cc:	4b8c      	ldr	r3, [pc, #560]	@ (8000900 <sbus_packet+0x260>)
 80006ce:	885b      	ldrh	r3, [r3, #2]
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b87      	ldr	r3, [pc, #540]	@ (80008fc <sbus_packet+0x25c>)
 80006de:	709a      	strb	r2, [r3, #2]
    packet[3] = (uint8_t) ((channels[1] & 0x07FF)>>5 | (channels[2] & 0x07FF)<<6);
 80006e0:	4b87      	ldr	r3, [pc, #540]	@ (8000900 <sbus_packet+0x260>)
 80006e2:	885b      	ldrh	r3, [r3, #2]
 80006e4:	115b      	asrs	r3, r3, #5
 80006e6:	b25b      	sxtb	r3, r3
 80006e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80006ec:	b25a      	sxtb	r2, r3
 80006ee:	4b84      	ldr	r3, [pc, #528]	@ (8000900 <sbus_packet+0x260>)
 80006f0:	889b      	ldrh	r3, [r3, #4]
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	019b      	lsls	r3, r3, #6
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b7f      	ldr	r3, [pc, #508]	@ (80008fc <sbus_packet+0x25c>)
 8000700:	70da      	strb	r2, [r3, #3]
    packet[4] = (uint8_t) ((channels[2] & 0x07FF)>>2);
 8000702:	4b7f      	ldr	r3, [pc, #508]	@ (8000900 <sbus_packet+0x260>)
 8000704:	889b      	ldrh	r3, [r3, #4]
 8000706:	109b      	asrs	r3, r3, #2
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b7c      	ldr	r3, [pc, #496]	@ (80008fc <sbus_packet+0x25c>)
 800070c:	711a      	strb	r2, [r3, #4]
    packet[5] = (uint8_t) ((channels[2] & 0x07FF)>>10 | (channels[3] & 0x07FF)<<1);
 800070e:	4b7c      	ldr	r3, [pc, #496]	@ (8000900 <sbus_packet+0x260>)
 8000710:	889b      	ldrh	r3, [r3, #4]
 8000712:	129b      	asrs	r3, r3, #10
 8000714:	b25b      	sxtb	r3, r3
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	b25a      	sxtb	r2, r3
 800071c:	4b78      	ldr	r3, [pc, #480]	@ (8000900 <sbus_packet+0x260>)
 800071e:	88db      	ldrh	r3, [r3, #6]
 8000720:	b25b      	sxtb	r3, r3
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	b25b      	sxtb	r3, r3
 8000726:	4313      	orrs	r3, r2
 8000728:	b25b      	sxtb	r3, r3
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b73      	ldr	r3, [pc, #460]	@ (80008fc <sbus_packet+0x25c>)
 800072e:	715a      	strb	r2, [r3, #5]
    packet[6] = (uint8_t) ((channels[3] & 0x07FF)>>7 | (channels[4] & 0x07FF)<<4);
 8000730:	4b73      	ldr	r3, [pc, #460]	@ (8000900 <sbus_packet+0x260>)
 8000732:	88db      	ldrh	r3, [r3, #6]
 8000734:	11db      	asrs	r3, r3, #7
 8000736:	b25b      	sxtb	r3, r3
 8000738:	f003 030f 	and.w	r3, r3, #15
 800073c:	b25a      	sxtb	r2, r3
 800073e:	4b70      	ldr	r3, [pc, #448]	@ (8000900 <sbus_packet+0x260>)
 8000740:	891b      	ldrh	r3, [r3, #8]
 8000742:	b25b      	sxtb	r3, r3
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	b25b      	sxtb	r3, r3
 8000748:	4313      	orrs	r3, r2
 800074a:	b25b      	sxtb	r3, r3
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b6b      	ldr	r3, [pc, #428]	@ (80008fc <sbus_packet+0x25c>)
 8000750:	719a      	strb	r2, [r3, #6]
    packet[7] = (uint8_t) ((channels[4] & 0x07FF)>>4 | (channels[5] & 0x07FF)<<7);
 8000752:	4b6b      	ldr	r3, [pc, #428]	@ (8000900 <sbus_packet+0x260>)
 8000754:	891b      	ldrh	r3, [r3, #8]
 8000756:	111b      	asrs	r3, r3, #4
 8000758:	b25b      	sxtb	r3, r3
 800075a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800075e:	b25a      	sxtb	r2, r3
 8000760:	4b67      	ldr	r3, [pc, #412]	@ (8000900 <sbus_packet+0x260>)
 8000762:	895b      	ldrh	r3, [r3, #10]
 8000764:	b25b      	sxtb	r3, r3
 8000766:	01db      	lsls	r3, r3, #7
 8000768:	b25b      	sxtb	r3, r3
 800076a:	4313      	orrs	r3, r2
 800076c:	b25b      	sxtb	r3, r3
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b62      	ldr	r3, [pc, #392]	@ (80008fc <sbus_packet+0x25c>)
 8000772:	71da      	strb	r2, [r3, #7]
    packet[8] = (uint8_t) ((channels[5] & 0x07FF)>>1);
 8000774:	4b62      	ldr	r3, [pc, #392]	@ (8000900 <sbus_packet+0x260>)
 8000776:	895b      	ldrh	r3, [r3, #10]
 8000778:	105b      	asrs	r3, r3, #1
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b5f      	ldr	r3, [pc, #380]	@ (80008fc <sbus_packet+0x25c>)
 800077e:	721a      	strb	r2, [r3, #8]
    packet[9] = (uint8_t) ((channels[5] & 0x07FF)>>9 | (channels[6] & 0x07FF)<<2);
 8000780:	4b5f      	ldr	r3, [pc, #380]	@ (8000900 <sbus_packet+0x260>)
 8000782:	895b      	ldrh	r3, [r3, #10]
 8000784:	125b      	asrs	r3, r3, #9
 8000786:	b25b      	sxtb	r3, r3
 8000788:	f003 0303 	and.w	r3, r3, #3
 800078c:	b25a      	sxtb	r2, r3
 800078e:	4b5c      	ldr	r3, [pc, #368]	@ (8000900 <sbus_packet+0x260>)
 8000790:	899b      	ldrh	r3, [r3, #12]
 8000792:	b25b      	sxtb	r3, r3
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	b25b      	sxtb	r3, r3
 8000798:	4313      	orrs	r3, r2
 800079a:	b25b      	sxtb	r3, r3
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b57      	ldr	r3, [pc, #348]	@ (80008fc <sbus_packet+0x25c>)
 80007a0:	725a      	strb	r2, [r3, #9]
    packet[10] = (uint8_t) ((channels[6] & 0x07FF)>>6 | (channels[7] & 0x07FF)<<5);
 80007a2:	4b57      	ldr	r3, [pc, #348]	@ (8000900 <sbus_packet+0x260>)
 80007a4:	899b      	ldrh	r3, [r3, #12]
 80007a6:	119b      	asrs	r3, r3, #6
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	f003 031f 	and.w	r3, r3, #31
 80007ae:	b25a      	sxtb	r2, r3
 80007b0:	4b53      	ldr	r3, [pc, #332]	@ (8000900 <sbus_packet+0x260>)
 80007b2:	89db      	ldrh	r3, [r3, #14]
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	015b      	lsls	r3, r3, #5
 80007b8:	b25b      	sxtb	r3, r3
 80007ba:	4313      	orrs	r3, r2
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b4e      	ldr	r3, [pc, #312]	@ (80008fc <sbus_packet+0x25c>)
 80007c2:	729a      	strb	r2, [r3, #10]
    packet[11] = (uint8_t) ((channels[7] & 0x07FF)>>3);
 80007c4:	4b4e      	ldr	r3, [pc, #312]	@ (8000900 <sbus_packet+0x260>)
 80007c6:	89db      	ldrh	r3, [r3, #14]
 80007c8:	10db      	asrs	r3, r3, #3
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b4b      	ldr	r3, [pc, #300]	@ (80008fc <sbus_packet+0x25c>)
 80007ce:	72da      	strb	r2, [r3, #11]
    packet[12] = (uint8_t) ((channels[8] & 0x07FF));
 80007d0:	4b4b      	ldr	r3, [pc, #300]	@ (8000900 <sbus_packet+0x260>)
 80007d2:	8a1b      	ldrh	r3, [r3, #16]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b49      	ldr	r3, [pc, #292]	@ (80008fc <sbus_packet+0x25c>)
 80007d8:	731a      	strb	r2, [r3, #12]
    packet[13] = (uint8_t) ((channels[8] & 0x07FF)>>8 | (channels[9] & 0x07FF)<<3);
 80007da:	4b49      	ldr	r3, [pc, #292]	@ (8000900 <sbus_packet+0x260>)
 80007dc:	8a1b      	ldrh	r3, [r3, #16]
 80007de:	121b      	asrs	r3, r3, #8
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	b25a      	sxtb	r2, r3
 80007e8:	4b45      	ldr	r3, [pc, #276]	@ (8000900 <sbus_packet+0x260>)
 80007ea:	8a5b      	ldrh	r3, [r3, #18]
 80007ec:	b25b      	sxtb	r3, r3
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	4313      	orrs	r3, r2
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b40      	ldr	r3, [pc, #256]	@ (80008fc <sbus_packet+0x25c>)
 80007fa:	735a      	strb	r2, [r3, #13]
    packet[14] = (uint8_t) ((channels[9] & 0x07FF)>>5 | (channels[10] & 0x07FF)<<6);
 80007fc:	4b40      	ldr	r3, [pc, #256]	@ (8000900 <sbus_packet+0x260>)
 80007fe:	8a5b      	ldrh	r3, [r3, #18]
 8000800:	115b      	asrs	r3, r3, #5
 8000802:	b25b      	sxtb	r3, r3
 8000804:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000808:	b25a      	sxtb	r2, r3
 800080a:	4b3d      	ldr	r3, [pc, #244]	@ (8000900 <sbus_packet+0x260>)
 800080c:	8a9b      	ldrh	r3, [r3, #20]
 800080e:	b25b      	sxtb	r3, r3
 8000810:	019b      	lsls	r3, r3, #6
 8000812:	b25b      	sxtb	r3, r3
 8000814:	4313      	orrs	r3, r2
 8000816:	b25b      	sxtb	r3, r3
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b38      	ldr	r3, [pc, #224]	@ (80008fc <sbus_packet+0x25c>)
 800081c:	739a      	strb	r2, [r3, #14]
    packet[15] = (uint8_t) ((channels[10] & 0x07FF)>>2);
 800081e:	4b38      	ldr	r3, [pc, #224]	@ (8000900 <sbus_packet+0x260>)
 8000820:	8a9b      	ldrh	r3, [r3, #20]
 8000822:	109b      	asrs	r3, r3, #2
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b35      	ldr	r3, [pc, #212]	@ (80008fc <sbus_packet+0x25c>)
 8000828:	73da      	strb	r2, [r3, #15]
    packet[16] = (uint8_t) ((channels[10] & 0x07FF)>>10 | (channels[11] & 0x07FF)<<1);
 800082a:	4b35      	ldr	r3, [pc, #212]	@ (8000900 <sbus_packet+0x260>)
 800082c:	8a9b      	ldrh	r3, [r3, #20]
 800082e:	129b      	asrs	r3, r3, #10
 8000830:	b25b      	sxtb	r3, r3
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	b25a      	sxtb	r2, r3
 8000838:	4b31      	ldr	r3, [pc, #196]	@ (8000900 <sbus_packet+0x260>)
 800083a:	8adb      	ldrh	r3, [r3, #22]
 800083c:	b25b      	sxtb	r3, r3
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	b25b      	sxtb	r3, r3
 8000842:	4313      	orrs	r3, r2
 8000844:	b25b      	sxtb	r3, r3
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b2c      	ldr	r3, [pc, #176]	@ (80008fc <sbus_packet+0x25c>)
 800084a:	741a      	strb	r2, [r3, #16]
    packet[17] = (uint8_t) ((channels[11] & 0x07FF)>>7 | (channels[12] & 0x07FF)<<4);
 800084c:	4b2c      	ldr	r3, [pc, #176]	@ (8000900 <sbus_packet+0x260>)
 800084e:	8adb      	ldrh	r3, [r3, #22]
 8000850:	11db      	asrs	r3, r3, #7
 8000852:	b25b      	sxtb	r3, r3
 8000854:	f003 030f 	and.w	r3, r3, #15
 8000858:	b25a      	sxtb	r2, r3
 800085a:	4b29      	ldr	r3, [pc, #164]	@ (8000900 <sbus_packet+0x260>)
 800085c:	8b1b      	ldrh	r3, [r3, #24]
 800085e:	b25b      	sxtb	r3, r3
 8000860:	011b      	lsls	r3, r3, #4
 8000862:	b25b      	sxtb	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b25b      	sxtb	r3, r3
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b24      	ldr	r3, [pc, #144]	@ (80008fc <sbus_packet+0x25c>)
 800086c:	745a      	strb	r2, [r3, #17]
    packet[18] = (uint8_t) ((channels[12] & 0x07FF)>>4 | (channels[13] & 0x07FF)<<7);
 800086e:	4b24      	ldr	r3, [pc, #144]	@ (8000900 <sbus_packet+0x260>)
 8000870:	8b1b      	ldrh	r3, [r3, #24]
 8000872:	111b      	asrs	r3, r3, #4
 8000874:	b25b      	sxtb	r3, r3
 8000876:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800087a:	b25a      	sxtb	r2, r3
 800087c:	4b20      	ldr	r3, [pc, #128]	@ (8000900 <sbus_packet+0x260>)
 800087e:	8b5b      	ldrh	r3, [r3, #26]
 8000880:	b25b      	sxtb	r3, r3
 8000882:	01db      	lsls	r3, r3, #7
 8000884:	b25b      	sxtb	r3, r3
 8000886:	4313      	orrs	r3, r2
 8000888:	b25b      	sxtb	r3, r3
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <sbus_packet+0x25c>)
 800088e:	749a      	strb	r2, [r3, #18]
    packet[19] = (uint8_t) ((channels[13] & 0x07FF)>>1);
 8000890:	4b1b      	ldr	r3, [pc, #108]	@ (8000900 <sbus_packet+0x260>)
 8000892:	8b5b      	ldrh	r3, [r3, #26]
 8000894:	105b      	asrs	r3, r3, #1
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <sbus_packet+0x25c>)
 800089a:	74da      	strb	r2, [r3, #19]
    packet[20] = (uint8_t) ((channels[13] & 0x07FF)>>9 | (channels[14] & 0x07FF)<<2);
 800089c:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <sbus_packet+0x260>)
 800089e:	8b5b      	ldrh	r3, [r3, #26]
 80008a0:	125b      	asrs	r3, r3, #9
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	f003 0303 	and.w	r3, r3, #3
 80008a8:	b25a      	sxtb	r2, r3
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <sbus_packet+0x260>)
 80008ac:	8b9b      	ldrh	r3, [r3, #28]
 80008ae:	b25b      	sxtb	r3, r3
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b25b      	sxtb	r3, r3
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <sbus_packet+0x25c>)
 80008bc:	751a      	strb	r2, [r3, #20]
    packet[21] = (uint8_t) ((channels[14] & 0x07FF)>>6 | (channels[15] & 0x07FF)<<5);
 80008be:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <sbus_packet+0x260>)
 80008c0:	8b9b      	ldrh	r3, [r3, #28]
 80008c2:	119b      	asrs	r3, r3, #6
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	f003 031f 	and.w	r3, r3, #31
 80008ca:	b25a      	sxtb	r2, r3
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <sbus_packet+0x260>)
 80008ce:	8bdb      	ldrh	r3, [r3, #30]
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	015b      	lsls	r3, r3, #5
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	4313      	orrs	r3, r2
 80008d8:	b25b      	sxtb	r3, r3
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <sbus_packet+0x25c>)
 80008de:	755a      	strb	r2, [r3, #21]
    packet[22] = (uint8_t) ((channels[15] & 0x07FF)>>3);
 80008e0:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <sbus_packet+0x260>)
 80008e2:	8bdb      	ldrh	r3, [r3, #30]
 80008e4:	10db      	asrs	r3, r3, #3
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <sbus_packet+0x25c>)
 80008ea:	759a      	strb	r2, [r3, #22]
    packet[23] = 0x00;
 80008ec:	4b03      	ldr	r3, [pc, #12]	@ (80008fc <sbus_packet+0x25c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	75da      	strb	r2, [r3, #23]
    packet[24] = 0x00;
 80008f2:	4b02      	ldr	r3, [pc, #8]	@ (80008fc <sbus_packet+0x25c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	761a      	strb	r2, [r3, #24]
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200001b8 	.word	0x200001b8
 8000900:	20000198 	.word	0x20000198

08000904 <flash_write>:

/**
 * @brief Write the error offset to flash so that if calibration is choosen not to be done after another power cycle, then the error offset stored in flash can be used
 */
void flash_write(){
 8000904:	b5b0      	push	{r4, r5, r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800090a:	f001 fecd 	bl	80026a8 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(FLASH_SECTOR_6,FLASH_VOLTAGE_RANGE_3);
 800090e:	2102      	movs	r1, #2
 8000910:	2006      	movs	r0, #6
 8000912:	f002 f83b 	bl	800298c <FLASH_Erase_Sector>
	for(uint8_t i = 0; i < 2; i++, addr++){
 8000916:	2300      	movs	r3, #0
 8000918:	71fb      	strb	r3, [r7, #7]
 800091a:	e017      	b.n	800094c <flash_write+0x48>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr, errors[i]);
 800091c:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <flash_write+0x5c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	4a0f      	ldr	r2, [pc, #60]	@ (8000964 <flash_write+0x60>)
 8000926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800092a:	b29b      	uxth	r3, r3
 800092c:	2200      	movs	r2, #0
 800092e:	461c      	mov	r4, r3
 8000930:	4615      	mov	r5, r2
 8000932:	4622      	mov	r2, r4
 8000934:	462b      	mov	r3, r5
 8000936:	2001      	movs	r0, #1
 8000938:	f001 fe64 	bl	8002604 <HAL_FLASH_Program>
	for(uint8_t i = 0; i < 2; i++, addr++){
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	3301      	adds	r3, #1
 8000940:	71fb      	strb	r3, [r7, #7]
 8000942:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <flash_write+0x5c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	4a05      	ldr	r2, [pc, #20]	@ (8000960 <flash_write+0x5c>)
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d9e4      	bls.n	800091c <flash_write+0x18>
		}
	HAL_FLASH_Lock();
 8000952:	f001 fecb 	bl	80026ec <HAL_FLASH_Lock>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bdb0      	pop	{r4, r5, r7, pc}
 800095e:	bf00      	nop
 8000960:	20000000 	.word	0x20000000
 8000964:	200001d4 	.word	0x200001d4

08000968 <flash_read>:

/**
 * @brief Read the error offset stored flash
 */
void flash_read(void) {
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 2; i++, addr++) {
 800096e:	2300      	movs	r3, #0
 8000970:	71fb      	strb	r3, [r7, #7]
 8000972:	e010      	b.n	8000996 <flash_read+0x2e>
    	errors[i] = *(volatile uint16_t*)(addr);
 8000974:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <flash_read+0x44>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	8812      	ldrh	r2, [r2, #0]
 800097e:	b291      	uxth	r1, r2
 8000980:	4a0b      	ldr	r2, [pc, #44]	@ (80009b0 <flash_read+0x48>)
 8000982:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 2; i++, addr++) {
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	3301      	adds	r3, #1
 800098a:	71fb      	strb	r3, [r7, #7]
 800098c:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <flash_read+0x44>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	4a06      	ldr	r2, [pc, #24]	@ (80009ac <flash_read+0x44>)
 8000994:	6013      	str	r3, [r2, #0]
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d9eb      	bls.n	8000974 <flash_read+0xc>
    }
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000000 	.word	0x20000000
 80009b0:	200001d4 	.word	0x200001d4

080009b4 <joystick_calib>:

/**
 * @brief Calibration of the joystick
 * Center, low and high values are stored
 */
void joystick_calib(void) {
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b08f      	sub	sp, #60	@ 0x3c
 80009b8:	af00      	add	r7, sp, #0
    char CALIB_MSG[32];
    const char* prompts[] = {
 80009ba:	4b35      	ldr	r3, [pc, #212]	@ (8000a90 <joystick_calib+0xdc>)
 80009bc:	1d3c      	adds	r4, r7, #4
 80009be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        "Keep the joysticks at the center\r\n",
        "Keep the joysticks at the top\r\n",
        "Keep the joysticks at the bottom\r\n"
    };

    for (uint8_t pos = 0; pos < 3; ++pos) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80009ca:	e058      	b.n	8000a7e <joystick_calib+0xca>
        snprintf(CALIB_MSG, sizeof(CALIB_MSG), "%s", prompts[pos]);
 80009cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	3338      	adds	r3, #56	@ 0x38
 80009d4:	443b      	add	r3, r7
 80009d6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80009da:	f107 0014 	add.w	r0, r7, #20
 80009de:	4a2d      	ldr	r2, [pc, #180]	@ (8000a94 <joystick_calib+0xe0>)
 80009e0:	2120      	movs	r1, #32
 80009e2:	f003 fa41 	bl	8003e68 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)CALIB_MSG, strlen(CALIB_MSG), 100);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fbf8 	bl	80001e0 <strlen>
 80009f0:	4603      	mov	r3, r0
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	f107 0114 	add.w	r1, r7, #20
 80009f8:	2364      	movs	r3, #100	@ 0x64
 80009fa:	4827      	ldr	r0, [pc, #156]	@ (8000a98 <joystick_calib+0xe4>)
 80009fc:	f002 fe79 	bl	80036f2 <HAL_UART_Transmit>
        HAL_Delay(100);
 8000a00:	2064      	movs	r0, #100	@ 0x64
 8000a02:	f000 fc2f 	bl	8001264 <HAL_Delay>

        memset(joystick_arr_calib, 0, sizeof(joystick_arr_calib));
 8000a06:	2208      	movs	r2, #8
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4824      	ldr	r0, [pc, #144]	@ (8000a9c <joystick_calib+0xe8>)
 8000a0c:	f003 fa62 	bl	8003ed4 <memset>

        for (uint8_t i = 0; i < 100; i++) {
 8000a10:	2300      	movs	r3, #0
 8000a12:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000a16:	e012      	b.n	8000a3e <joystick_calib+0x8a>
            joystick_arr_calib[0][0] += joystick_arr_[0][0];
 8000a18:	4b20      	ldr	r3, [pc, #128]	@ (8000a9c <joystick_calib+0xe8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a20      	ldr	r2, [pc, #128]	@ (8000aa0 <joystick_calib+0xec>)
 8000a1e:	8812      	ldrh	r2, [r2, #0]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a1e      	ldr	r2, [pc, #120]	@ (8000a9c <joystick_calib+0xe8>)
 8000a24:	6013      	str	r3, [r2, #0]
            joystick_arr_calib[0][1] += joystick_arr_[0][1];
 8000a26:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <joystick_calib+0xe8>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa0 <joystick_calib+0xec>)
 8000a2c:	8852      	ldrh	r2, [r2, #2]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a1a      	ldr	r2, [pc, #104]	@ (8000a9c <joystick_calib+0xe8>)
 8000a32:	6053      	str	r3, [r2, #4]
        for (uint8_t i = 0; i < 100; i++) {
 8000a34:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000a38:	3301      	adds	r3, #1
 8000a3a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000a3e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000a42:	2b63      	cmp	r3, #99	@ 0x63
 8000a44:	d9e8      	bls.n	8000a18 <joystick_calib+0x64>
            //joystick_arr_calib[1][0] += joystick_arr_[1][0];
            //joystick_arr_calib[1][1] += joystick_arr_[1][1];
        }

        joystick_arr_calib_[0][pos][0] = joystick_arr_calib[0][0] / 100;
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <joystick_calib+0xe8>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a4e:	4915      	ldr	r1, [pc, #84]	@ (8000aa4 <joystick_calib+0xf0>)
 8000a50:	fba1 1202 	umull	r1, r2, r1, r2
 8000a54:	0952      	lsrs	r2, r2, #5
 8000a56:	4914      	ldr	r1, [pc, #80]	@ (8000aa8 <joystick_calib+0xf4>)
 8000a58:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        joystick_arr_calib_[0][pos][1] = joystick_arr_calib[0][1] / 100;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <joystick_calib+0xe8>)
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a64:	490f      	ldr	r1, [pc, #60]	@ (8000aa4 <joystick_calib+0xf0>)
 8000a66:	fba1 1202 	umull	r1, r2, r1, r2
 8000a6a:	0952      	lsrs	r2, r2, #5
 8000a6c:	490e      	ldr	r1, [pc, #56]	@ (8000aa8 <joystick_calib+0xf4>)
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	440b      	add	r3, r1
 8000a72:	605a      	str	r2, [r3, #4]
    for (uint8_t pos = 0; pos < 3; ++pos) {
 8000a74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a78:	3301      	adds	r3, #1
 8000a7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000a7e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d9a2      	bls.n	80009cc <joystick_calib+0x18>
        //joystick_arr_calib_[1][pos][0] = joystick_arr_calib[1][0] / 100;
        //joystick_arr_calib_[1][pos][1] = joystick_arr_calib[1][1] / 100;
    }
}
 8000a86:	bf00      	nop
 8000a88:	bf00      	nop
 8000a8a:	373c      	adds	r7, #60	@ 0x3c
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	0800486c 	.word	0x0800486c
 8000a94:	080047e8 	.word	0x080047e8
 8000a98:	20000124 	.word	0x20000124
 8000a9c:	20000178 	.word	0x20000178
 8000aa0:	20000174 	.word	0x20000174
 8000aa4:	51eb851f 	.word	0x51eb851f
 8000aa8:	20000180 	.word	0x20000180

08000aac <check_calib_button>:

/**
 * @brief Checks the state of a button, if pressed begins calibration of the joystick and calibration can only be done once a power cycle since:
 * calib_button_state determines if the button has been pressed once and doesn't allow the function to execute again as it gets negated in the condition to 0
 */
void check_calib_button(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin) == GPIO_PIN_SET && !calib_button_state) {
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	480a      	ldr	r0, [pc, #40]	@ (8000adc <check_calib_button+0x30>)
 8000ab4:	f002 f936 	bl	8002d24 <HAL_GPIO_ReadPin>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d10c      	bne.n	8000ad8 <check_calib_button+0x2c>
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <check_calib_button+0x34>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d108      	bne.n	8000ad8 <check_calib_button+0x2c>
        joystick_calib();
 8000ac6:	f7ff ff75 	bl	80009b4 <joystick_calib>
        flash_write();
 8000aca:	f7ff ff1b 	bl	8000904 <flash_write>
        flash_read();
 8000ace:	f7ff ff4b 	bl	8000968 <flash_read>
        calib_button_state = 1;
 8000ad2:	4b03      	ldr	r3, [pc, #12]	@ (8000ae0 <check_calib_button+0x34>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
    }
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	2000016c 	.word	0x2000016c

08000ae4 <main>:

int main(void) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
    HAL_Init();
 8000ae8:	f000 fb4a 	bl	8001180 <HAL_Init>
    SystemClock_Config();
 8000aec:	f000 f82e 	bl	8000b4c <SystemClock_Config>
    MX_GPIO_Init();
 8000af0:	f000 f95c 	bl	8000dac <MX_GPIO_Init>
    MX_DMA_Init();
 8000af4:	f000 f93a 	bl	8000d6c <MX_DMA_Init>
    MX_ADC1_Init();
 8000af8:	f000 f892 	bl	8000c20 <MX_ADC1_Init>
    MX_USART1_UART_Init();
 8000afc:	f000 f90c 	bl	8000d18 <MX_USART1_UART_Init>

    //ADC through DMA begins here
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)joystick_arr, sizeof(joystick_arr) / sizeof(joystick_arr[0]));
 8000b00:	2202      	movs	r2, #2
 8000b02:	490d      	ldr	r1, [pc, #52]	@ (8000b38 <main+0x54>)
 8000b04:	480d      	ldr	r0, [pc, #52]	@ (8000b3c <main+0x58>)
 8000b06:	f000 fd25 	bl	8001554 <HAL_ADC_Start_DMA>
    while (1) {
		//Check if button to begin calibration is pressed or no, initially set to 0 since we want one calibration after each power cycle but not mandatory
    	if(!calib_button_state){
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <main+0x5c>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d101      	bne.n	8000b16 <main+0x32>
        check_calib_button();
 8000b12:	f7ff ffcb 	bl	8000aac <check_calib_button>
    	}

    	mapping_adc(); //Maps to sbus range
 8000b16:	f7ff fd77 	bl	8000608 <mapping_adc>
    	channels_(); //ADC values into channels
 8000b1a:	f7ff fda7 	bl	800066c <channels_>
    	sbus_packet(); //Packed for transmission
 8000b1e:	f7ff fdbf 	bl	80006a0 <sbus_packet>

        //snprintf(MSG, sizeof(MSG), "[X: %d, Y: %d]\r\n", joystick_arr_[0][0]+errors[0], joystick_arr_[0][1]+errors[1]);
        //snprintf(MSG2, sizeof(MSG2), "X2: %d, Y2: %d\r\n", joystick_arr_[1][0]+errorx2, joystick_arr_[1][1]+errory2);

        HAL_UART_Transmit(&huart1, (uint8_t*)packet, sizeof(packet)/sizeof(packet[0]), 100);
 8000b22:	2364      	movs	r3, #100	@ 0x64
 8000b24:	2219      	movs	r2, #25
 8000b26:	4907      	ldr	r1, [pc, #28]	@ (8000b44 <main+0x60>)
 8000b28:	4807      	ldr	r0, [pc, #28]	@ (8000b48 <main+0x64>)
 8000b2a:	f002 fde2 	bl	80036f2 <HAL_UART_Transmit>
        HAL_Delay(100);
 8000b2e:	2064      	movs	r0, #100	@ 0x64
 8000b30:	f000 fb98 	bl	8001264 <HAL_Delay>
    	if(!calib_button_state){
 8000b34:	e7e9      	b.n	8000b0a <main+0x26>
 8000b36:	bf00      	nop
 8000b38:	20000170 	.word	0x20000170
 8000b3c:	2000007c 	.word	0x2000007c
 8000b40:	2000016c 	.word	0x2000016c
 8000b44:	200001b8 	.word	0x200001b8
 8000b48:	20000124 	.word	0x20000124

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b094      	sub	sp, #80	@ 0x50
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0320 	add.w	r3, r7, #32
 8000b56:	2230      	movs	r2, #48	@ 0x30
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f003 f9ba 	bl	8003ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	4b28      	ldr	r3, [pc, #160]	@ (8000c18 <SystemClock_Config+0xcc>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b78:	4a27      	ldr	r2, [pc, #156]	@ (8000c18 <SystemClock_Config+0xcc>)
 8000b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b80:	4b25      	ldr	r3, [pc, #148]	@ (8000c18 <SystemClock_Config+0xcc>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	4b22      	ldr	r3, [pc, #136]	@ (8000c1c <SystemClock_Config+0xd0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a21      	ldr	r2, [pc, #132]	@ (8000c1c <SystemClock_Config+0xd0>)
 8000b96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <SystemClock_Config+0xd0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000bbc:	2319      	movs	r3, #25
 8000bbe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bc0:	23a8      	movs	r3, #168	@ 0xa8
 8000bc2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f002 f8bf 	bl	8002d54 <HAL_RCC_OscConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bdc:	f000 f922 	bl	8000e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be0:	230f      	movs	r3, #15
 8000be2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be4:	2302      	movs	r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f002 fb21 	bl	8003244 <HAL_RCC_ClockConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c08:	f000 f90c 	bl	8000e24 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000c0c:	f002 fc00 	bl	8003410 <HAL_RCC_EnableCSS>
}
 8000c10:	bf00      	nop
 8000c12:	3750      	adds	r7, #80	@ 0x50
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40007000 	.word	0x40007000

08000c20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c26:	463b      	mov	r3, r7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c32:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <MX_ADC1_Init+0xec>)
 8000c34:	4a36      	ldr	r2, [pc, #216]	@ (8000d10 <MX_ADC1_Init+0xf0>)
 8000c36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c38:	4b34      	ldr	r3, [pc, #208]	@ (8000d0c <MX_ADC1_Init+0xec>)
 8000c3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c40:	4b32      	ldr	r3, [pc, #200]	@ (8000d0c <MX_ADC1_Init+0xec>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c46:	4b31      	ldr	r3, [pc, #196]	@ (8000d0c <MX_ADC1_Init+0xec>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d0c <MX_ADC1_Init+0xec>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c52:	4b2e      	ldr	r3, [pc, #184]	@ (8000d0c <MX_ADC1_Init+0xec>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d0c <MX_ADC1_Init+0xec>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c60:	4b2a      	ldr	r3, [pc, #168]	@ (8000d0c <MX_ADC1_Init+0xec>)
 8000c62:	4a2c      	ldr	r2, [pc, #176]	@ (8000d14 <MX_ADC1_Init+0xf4>)
 8000c64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c66:	4b29      	ldr	r3, [pc, #164]	@ (8000d0c <MX_ADC1_Init+0xec>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000c6c:	4b27      	ldr	r3, [pc, #156]	@ (8000d0c <MX_ADC1_Init+0xec>)
 8000c6e:	2204      	movs	r2, #4
 8000c70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c72:	4b26      	ldr	r3, [pc, #152]	@ (8000d0c <MX_ADC1_Init+0xec>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c7a:	4b24      	ldr	r3, [pc, #144]	@ (8000d0c <MX_ADC1_Init+0xec>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c80:	4822      	ldr	r0, [pc, #136]	@ (8000d0c <MX_ADC1_Init+0xec>)
 8000c82:	f000 fb13 	bl	80012ac <HAL_ADC_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c8c:	f000 f8ca 	bl	8000e24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000c98:	2307      	movs	r3, #7
 8000c9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	481a      	ldr	r0, [pc, #104]	@ (8000d0c <MX_ADC1_Init+0xec>)
 8000ca2:	f000 fd73 	bl	800178c <HAL_ADC_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cac:	f000 f8ba 	bl	8000e24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4813      	ldr	r0, [pc, #76]	@ (8000d0c <MX_ADC1_Init+0xec>)
 8000cbe:	f000 fd65 	bl	800178c <HAL_ADC_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000cc8:	f000 f8ac 	bl	8000e24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <MX_ADC1_Init+0xec>)
 8000cda:	f000 fd57 	bl	800178c <HAL_ADC_ConfigChannel>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000ce4:	f000 f89e 	bl	8000e24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000cec:	2304      	movs	r3, #4
 8000cee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_ADC1_Init+0xec>)
 8000cf6:	f000 fd49 	bl	800178c <HAL_ADC_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000d00:	f000 f890 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	2000007c 	.word	0x2000007c
 8000d10:	40012000 	.word	0x40012000
 8000d14:	0f000001 	.word	0x0f000001

08000d18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <MX_USART1_UART_Init+0x4c>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	@ (8000d68 <MX_USART1_UART_Init+0x50>)
 8000d20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d22:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <MX_USART1_UART_Init+0x4c>)
 8000d24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <MX_USART1_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <MX_USART1_UART_Init+0x4c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <MX_USART1_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <MX_USART1_UART_Init+0x4c>)
 8000d3e:	2208      	movs	r2, #8
 8000d40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d42:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <MX_USART1_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <MX_USART1_UART_Init+0x4c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <MX_USART1_UART_Init+0x4c>)
 8000d50:	f002 fc7f 	bl	8003652 <HAL_UART_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d5a:	f000 f863 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000124 	.word	0x20000124
 8000d68:	40011000 	.word	0x40011000

08000d6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <MX_DMA_Init+0x3c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000da8 <MX_DMA_Init+0x3c>)
 8000d7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <MX_DMA_Init+0x3c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	2038      	movs	r0, #56	@ 0x38
 8000d94:	f001 f88f 	bl	8001eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d98:	2038      	movs	r0, #56	@ 0x38
 8000d9a:	f001 f8a8 	bl	8001eee <HAL_NVIC_EnableIRQ>

}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <MX_GPIO_Init+0x70>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a14      	ldr	r2, [pc, #80]	@ (8000e1c <MX_GPIO_Init+0x70>)
 8000dcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <MX_GPIO_Init+0x70>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <MX_GPIO_Init+0x70>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <MX_GPIO_Init+0x70>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <MX_GPIO_Init+0x70>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : CALIB_BUTTON_Pin */
  GPIO_InitStruct.Pin = CALIB_BUTTON_Pin;
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e02:	2302      	movs	r3, #2
 8000e04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CALIB_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4804      	ldr	r0, [pc, #16]	@ (8000e20 <MX_GPIO_Init+0x74>)
 8000e0e:	f001 fe05 	bl	8002a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e12:	bf00      	nop
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020000 	.word	0x40020000

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <Error_Handler+0x8>

08000e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <HAL_MspInit+0x4c>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e7c <HAL_MspInit+0x4c>)
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e46:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <HAL_MspInit+0x4c>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <HAL_MspInit+0x4c>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	4a08      	ldr	r2, [pc, #32]	@ (8000e7c <HAL_MspInit+0x4c>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_MspInit+0x4c>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800

08000e80 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	@ 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a33      	ldr	r2, [pc, #204]	@ (8000f6c <HAL_ADC_MspInit+0xec>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d15f      	bne.n	8000f62 <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	4b32      	ldr	r3, [pc, #200]	@ (8000f70 <HAL_ADC_MspInit+0xf0>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	4a31      	ldr	r2, [pc, #196]	@ (8000f70 <HAL_ADC_MspInit+0xf0>)
 8000eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8000f70 <HAL_ADC_MspInit+0xf0>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f70 <HAL_ADC_MspInit+0xf0>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8000f70 <HAL_ADC_MspInit+0xf0>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b28      	ldr	r3, [pc, #160]	@ (8000f70 <HAL_ADC_MspInit+0xf0>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000eda:	230f      	movs	r3, #15
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4821      	ldr	r0, [pc, #132]	@ (8000f74 <HAL_ADC_MspInit+0xf4>)
 8000eee:	f001 fd95 	bl	8002a1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ef2:	4b21      	ldr	r3, [pc, #132]	@ (8000f78 <HAL_ADC_MspInit+0xf8>)
 8000ef4:	4a21      	ldr	r2, [pc, #132]	@ (8000f7c <HAL_ADC_MspInit+0xfc>)
 8000ef6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f78 <HAL_ADC_MspInit+0xf8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000efe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f78 <HAL_ADC_MspInit+0xf8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f04:	4b1c      	ldr	r3, [pc, #112]	@ (8000f78 <HAL_ADC_MspInit+0xf8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <HAL_ADC_MspInit+0xf8>)
 8000f0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f10:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f12:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <HAL_ADC_MspInit+0xf8>)
 8000f14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f18:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <HAL_ADC_MspInit+0xf8>)
 8000f1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <HAL_ADC_MspInit+0xf8>)
 8000f24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f28:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <HAL_ADC_MspInit+0xf8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f30:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <HAL_ADC_MspInit+0xf8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f36:	4810      	ldr	r0, [pc, #64]	@ (8000f78 <HAL_ADC_MspInit+0xf8>)
 8000f38:	f000 fff4 	bl	8001f24 <HAL_DMA_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000f42:	f7ff ff6f 	bl	8000e24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a0b      	ldr	r2, [pc, #44]	@ (8000f78 <HAL_ADC_MspInit+0xf8>)
 8000f4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <HAL_ADC_MspInit+0xf8>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2101      	movs	r1, #1
 8000f56:	2012      	movs	r0, #18
 8000f58:	f000 ffad 	bl	8001eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f5c:	2012      	movs	r0, #18
 8000f5e:	f000 ffc6 	bl	8001eee <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	@ 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40012000 	.word	0x40012000
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020000 	.word	0x40020000
 8000f78:	200000c4 	.word	0x200000c4
 8000f7c:	40026410 	.word	0x40026410

08000f80 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	@ 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a19      	ldr	r2, [pc, #100]	@ (8001004 <HAL_UART_MspInit+0x84>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d12c      	bne.n	8000ffc <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	4a17      	ldr	r2, [pc, #92]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fac:	f043 0310 	orr.w	r3, r3, #16
 8000fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	f003 0310 	and.w	r3, r3, #16
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a10      	ldr	r2, [pc, #64]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <HAL_UART_MspInit+0x88>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fda:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fec:	2307      	movs	r3, #7
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4805      	ldr	r0, [pc, #20]	@ (800100c <HAL_UART_MspInit+0x8c>)
 8000ff8:	f001 fd10 	bl	8002a1c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ffc:	bf00      	nop
 8000ffe:	3728      	adds	r7, #40	@ 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40011000 	.word	0x40011000
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001014:	f002 fb02 	bl	800361c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <NMI_Handler+0x8>

0800101c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <HardFault_Handler+0x4>

08001024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <MemManage_Handler+0x4>

0800102c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <UsageFault_Handler+0x4>

0800103c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106a:	f000 f8db 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001078:	4802      	ldr	r0, [pc, #8]	@ (8001084 <ADC_IRQHandler+0x10>)
 800107a:	f000 f95a 	bl	8001332 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000007c 	.word	0x2000007c

08001088 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800108c:	4802      	ldr	r0, [pc, #8]	@ (8001098 <DMA2_Stream0_IRQHandler+0x10>)
 800108e:	f001 f84f 	bl	8002130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000c4 	.word	0x200000c4

0800109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a4:	4a14      	ldr	r2, [pc, #80]	@ (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b0:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	@ (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d207      	bcs.n	80010dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010cc:	f002 ff0a 	bl	8003ee4 <__errno>
 80010d0:	4603      	mov	r3, r0
 80010d2:	220c      	movs	r2, #12
 80010d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e009      	b.n	80010f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a05      	ldr	r2, [pc, #20]	@ (8001100 <_sbrk+0x64>)
 80010ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20020000 	.word	0x20020000
 80010fc:	00000400 	.word	0x00000400
 8001100:	200001d8 	.word	0x200001d8
 8001104:	20000348 	.word	0x20000348

08001108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001164 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001130:	f7ff ffea 	bl	8001108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	@ (8001168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	@ (800116c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	@ (8001178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115a:	f002 fec9 	bl	8003ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115e:	f7ff fcc1 	bl	8000ae4 <main>
  bx  lr    
 8001162:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001164:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001170:	080048e0 	.word	0x080048e0
  ldr r2, =_sbss
 8001174:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001178:	20000348 	.word	0x20000348

0800117c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800117c:	e7fe      	b.n	800117c <DMA1_Stream0_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001184:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0d      	ldr	r2, [pc, #52]	@ (80011c0 <HAL_Init+0x40>)
 800118a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800118e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <HAL_Init+0x40>)
 8001196:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800119a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a07      	ldr	r2, [pc, #28]	@ (80011c0 <HAL_Init+0x40>)
 80011a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 fe79 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ae:	200f      	movs	r0, #15
 80011b0:	f000 f808 	bl	80011c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b4:	f7ff fe3c 	bl	8000e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023c00 	.word	0x40023c00

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <HAL_InitTick+0x54>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <HAL_InitTick+0x58>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011da:	fbb3 f3f1 	udiv	r3, r3, r1
 80011de:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 fe91 	bl	8001f0a <HAL_SYSTICK_Config>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00e      	b.n	8001210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b0f      	cmp	r3, #15
 80011f6:	d80a      	bhi.n	800120e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f8:	2200      	movs	r2, #0
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f000 fe59 	bl	8001eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001204:	4a06      	ldr	r2, [pc, #24]	@ (8001220 <HAL_InitTick+0x5c>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e000      	b.n	8001210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000004 	.word	0x20000004
 800121c:	2000000c 	.word	0x2000000c
 8001220:	20000008 	.word	0x20000008

08001224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_IncTick+0x20>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_IncTick+0x24>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <HAL_IncTick+0x24>)
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	2000000c 	.word	0x2000000c
 8001248:	200001dc 	.word	0x200001dc

0800124c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <HAL_GetTick+0x14>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	200001dc 	.word	0x200001dc

08001264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800126c:	f7ff ffee 	bl	800124c <HAL_GetTick>
 8001270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127c:	d005      	beq.n	800128a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127e:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <HAL_Delay+0x44>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800128a:	bf00      	nop
 800128c:	f7ff ffde 	bl	800124c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	429a      	cmp	r2, r3
 800129a:	d8f7      	bhi.n	800128c <HAL_Delay+0x28>
  {
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000000c 	.word	0x2000000c

080012ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e033      	b.n	800132a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d109      	bne.n	80012de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fdd8 	bl	8000e80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d118      	bne.n	800131c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012f2:	f023 0302 	bic.w	r3, r3, #2
 80012f6:	f043 0202 	orr.w	r2, r3, #2
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fb76 	bl	80019f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	f023 0303 	bic.w	r3, r3, #3
 8001312:	f043 0201 	orr.w	r2, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	641a      	str	r2, [r3, #64]	@ 0x40
 800131a:	e001      	b.n	8001320 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	f003 0320 	and.w	r3, r3, #32
 8001360:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d049      	beq.n	80013fc <HAL_ADC_IRQHandler+0xca>
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d046      	beq.n	80013fc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	2b00      	cmp	r3, #0
 8001378:	d105      	bne.n	8001386 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d12b      	bne.n	80013ec <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001398:	2b00      	cmp	r3, #0
 800139a:	d127      	bne.n	80013ec <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d006      	beq.n	80013b8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d119      	bne.n	80013ec <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0220 	bic.w	r2, r2, #32
 80013c6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d105      	bne.n	80013ec <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e4:	f043 0201 	orr.w	r2, r3, #1
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f9a5 	bl	800173c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f06f 0212 	mvn.w	r2, #18
 80013fa:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800140a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d057      	beq.n	80014c2 <HAL_ADC_IRQHandler+0x190>
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d054      	beq.n	80014c2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	2b00      	cmp	r3, #0
 8001422:	d105      	bne.n	8001430 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d139      	bne.n	80014b2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001444:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001456:	2b00      	cmp	r3, #0
 8001458:	d12b      	bne.n	80014b2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001464:	2b00      	cmp	r3, #0
 8001466:	d124      	bne.n	80014b2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001472:	2b00      	cmp	r3, #0
 8001474:	d11d      	bne.n	80014b2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800147a:	2b00      	cmp	r3, #0
 800147c:	d119      	bne.n	80014b2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800148c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d105      	bne.n	80014b2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	f043 0201 	orr.w	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 fc1a 	bl	8001cec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f06f 020c 	mvn.w	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014d0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d017      	beq.n	8001508 <HAL_ADC_IRQHandler+0x1d6>
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d014      	beq.n	8001508 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d10d      	bne.n	8001508 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f933 	bl	8001764 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f06f 0201 	mvn.w	r2, #1
 8001506:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0320 	and.w	r3, r3, #32
 800150e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001516:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d015      	beq.n	800154a <HAL_ADC_IRQHandler+0x218>
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d012      	beq.n	800154a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001528:	f043 0202 	orr.w	r2, r3, #2
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f06f 0220 	mvn.w	r2, #32
 8001538:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f91c 	bl	8001778 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f06f 0220 	mvn.w	r2, #32
 8001548:	601a      	str	r2, [r3, #0]
  }
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <HAL_ADC_Start_DMA+0x22>
 8001572:	2302      	movs	r3, #2
 8001574:	e0d0      	b.n	8001718 <HAL_ADC_Start_DMA+0x1c4>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b01      	cmp	r3, #1
 800158a:	d018      	beq.n	80015be <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800159c:	4b60      	ldr	r3, [pc, #384]	@ (8001720 <HAL_ADC_Start_DMA+0x1cc>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a60      	ldr	r2, [pc, #384]	@ (8001724 <HAL_ADC_Start_DMA+0x1d0>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	0c9a      	lsrs	r2, r3, #18
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80015b0:	e002      	b.n	80015b8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f9      	bne.n	80015b2 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015cc:	d107      	bne.n	80015de <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015dc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	f040 8088 	bne.w	80016fe <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80015f6:	f023 0301 	bic.w	r3, r3, #1
 80015fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800160c:	2b00      	cmp	r3, #0
 800160e:	d007      	beq.n	8001620 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001618:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800162c:	d106      	bne.n	800163c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001632:	f023 0206 	bic.w	r2, r3, #6
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	645a      	str	r2, [r3, #68]	@ 0x44
 800163a:	e002      	b.n	8001642 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800164a:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <HAL_ADC_Start_DMA+0x1d4>)
 800164c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001652:	4a36      	ldr	r2, [pc, #216]	@ (800172c <HAL_ADC_Start_DMA+0x1d8>)
 8001654:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800165a:	4a35      	ldr	r2, [pc, #212]	@ (8001730 <HAL_ADC_Start_DMA+0x1dc>)
 800165c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001662:	4a34      	ldr	r2, [pc, #208]	@ (8001734 <HAL_ADC_Start_DMA+0x1e0>)
 8001664:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800166e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800167e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800168e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	334c      	adds	r3, #76	@ 0x4c
 800169a:	4619      	mov	r1, r3
 800169c:	68ba      	ldr	r2, [r7, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f000 fcee 	bl	8002080 <HAL_DMA_Start_IT>
 80016a4:	4603      	mov	r3, r0
 80016a6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 031f 	and.w	r3, r3, #31
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10f      	bne.n	80016d4 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d129      	bne.n	8001716 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	e020      	b.n	8001716 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <HAL_ADC_Start_DMA+0x1e4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d11b      	bne.n	8001716 <HAL_ADC_Start_DMA+0x1c2>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d114      	bne.n	8001716 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	e00b      	b.n	8001716 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f043 0210 	orr.w	r2, r3, #16
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170e:	f043 0201 	orr.w	r2, r3, #1
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001716:	7ffb      	ldrb	r3, [r7, #31]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3720      	adds	r7, #32
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000004 	.word	0x20000004
 8001724:	431bde83 	.word	0x431bde83
 8001728:	40012300 	.word	0x40012300
 800172c:	08001be9 	.word	0x08001be9
 8001730:	08001ca3 	.word	0x08001ca3
 8001734:	08001cbf 	.word	0x08001cbf
 8001738:	40012000 	.word	0x40012000

0800173c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x1c>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e113      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x244>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b09      	cmp	r3, #9
 80017b6:	d925      	bls.n	8001804 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68d9      	ldr	r1, [r3, #12]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	3b1e      	subs	r3, #30
 80017ce:	2207      	movs	r2, #7
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43da      	mvns	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	400a      	ands	r2, r1
 80017dc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68d9      	ldr	r1, [r3, #12]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	4603      	mov	r3, r0
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4403      	add	r3, r0
 80017f6:	3b1e      	subs	r3, #30
 80017f8:	409a      	lsls	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	e022      	b.n	800184a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6919      	ldr	r1, [r3, #16]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	b29b      	uxth	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	2207      	movs	r2, #7
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	400a      	ands	r2, r1
 8001826:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6919      	ldr	r1, [r3, #16]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	b29b      	uxth	r3, r3
 8001838:	4618      	mov	r0, r3
 800183a:	4603      	mov	r3, r0
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4403      	add	r3, r0
 8001840:	409a      	lsls	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b06      	cmp	r3, #6
 8001850:	d824      	bhi.n	800189c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	3b05      	subs	r3, #5
 8001864:	221f      	movs	r2, #31
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	400a      	ands	r2, r1
 8001872:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4618      	mov	r0, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	3b05      	subs	r3, #5
 800188e:	fa00 f203 	lsl.w	r2, r0, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	635a      	str	r2, [r3, #52]	@ 0x34
 800189a:	e04c      	b.n	8001936 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b0c      	cmp	r3, #12
 80018a2:	d824      	bhi.n	80018ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	3b23      	subs	r3, #35	@ 0x23
 80018b6:	221f      	movs	r2, #31
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43da      	mvns	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	400a      	ands	r2, r1
 80018c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	3b23      	subs	r3, #35	@ 0x23
 80018e0:	fa00 f203 	lsl.w	r2, r0, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80018ec:	e023      	b.n	8001936 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	3b41      	subs	r3, #65	@ 0x41
 8001900:	221f      	movs	r2, #31
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	400a      	ands	r2, r1
 800190e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	4618      	mov	r0, r3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	3b41      	subs	r3, #65	@ 0x41
 800192a:	fa00 f203 	lsl.w	r2, r0, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001936:	4b29      	ldr	r3, [pc, #164]	@ (80019dc <HAL_ADC_ConfigChannel+0x250>)
 8001938:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a28      	ldr	r2, [pc, #160]	@ (80019e0 <HAL_ADC_ConfigChannel+0x254>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d10f      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x1d8>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b12      	cmp	r3, #18
 800194a:	d10b      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1d      	ldr	r2, [pc, #116]	@ (80019e0 <HAL_ADC_ConfigChannel+0x254>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d12b      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x23a>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1c      	ldr	r2, [pc, #112]	@ (80019e4 <HAL_ADC_ConfigChannel+0x258>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d003      	beq.n	8001980 <HAL_ADC_ConfigChannel+0x1f4>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b11      	cmp	r3, #17
 800197e:	d122      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a11      	ldr	r2, [pc, #68]	@ (80019e4 <HAL_ADC_ConfigChannel+0x258>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d111      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019a2:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <HAL_ADC_ConfigChannel+0x25c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a11      	ldr	r2, [pc, #68]	@ (80019ec <HAL_ADC_ConfigChannel+0x260>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	0c9a      	lsrs	r2, r3, #18
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019b8:	e002      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	3b01      	subs	r3, #1
 80019be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f9      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40012300 	.word	0x40012300
 80019e0:	40012000 	.word	0x40012000
 80019e4:	10000012 	.word	0x10000012
 80019e8:	20000004 	.word	0x20000004
 80019ec:	431bde83 	.word	0x431bde83

080019f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019f8:	4b79      	ldr	r3, [pc, #484]	@ (8001be0 <ADC_Init+0x1f0>)
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	431a      	orrs	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6859      	ldr	r1, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	021a      	lsls	r2, r3, #8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001a48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6859      	ldr	r1, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6899      	ldr	r1, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a82:	4a58      	ldr	r2, [pc, #352]	@ (8001be4 <ADC_Init+0x1f4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d022      	beq.n	8001ace <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6899      	ldr	r1, [r3, #8]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ab8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6899      	ldr	r1, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	e00f      	b.n	8001aee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001adc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001aec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0202 	bic.w	r2, r2, #2
 8001afc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6899      	ldr	r1, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7e1b      	ldrb	r3, [r3, #24]
 8001b08:	005a      	lsls	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01b      	beq.n	8001b54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b2a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001b3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6859      	ldr	r1, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b46:	3b01      	subs	r3, #1
 8001b48:	035a      	lsls	r2, r3, #13
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	e007      	b.n	8001b64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b62:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001b72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	051a      	lsls	r2, r3, #20
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6899      	ldr	r1, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ba6:	025a      	lsls	r2, r3, #9
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6899      	ldr	r1, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	029a      	lsls	r2, r3, #10
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	609a      	str	r2, [r3, #8]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	40012300 	.word	0x40012300
 8001be4:	0f000001 	.word	0x0f000001

08001be8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d13c      	bne.n	8001c7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d12b      	bne.n	8001c74 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d127      	bne.n	8001c74 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d006      	beq.n	8001c40 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d119      	bne.n	8001c74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0220 	bic.w	r2, r2, #32
 8001c4e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d105      	bne.n	8001c74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f7ff fd61 	bl	800173c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c7a:	e00e      	b.n	8001c9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7ff fd75 	bl	8001778 <HAL_ADC_ErrorCallback>
}
 8001c8e:	e004      	b.n	8001c9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	4798      	blx	r3
}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cae:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f7ff fd4d 	bl	8001750 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cca:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2240      	movs	r2, #64	@ 0x40
 8001cd0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f043 0204 	orr.w	r2, r3, #4
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f7ff fd4a 	bl	8001778 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	@ (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d4c:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <__NVIC_GetPriorityGrouping+0x18>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0307 	and.w	r3, r3, #7
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db0b      	blt.n	8001d8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	4907      	ldr	r1, [pc, #28]	@ (8001d9c <__NVIC_EnableIRQ+0x38>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	2001      	movs	r0, #1
 8001d86:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000e100 	.word	0xe000e100

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	@ (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	@ (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	@ 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	@ 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f7ff ff8e 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff29 	bl	8001d00 <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff3e 	bl	8001d48 <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff8e 	bl	8001df4 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5d 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff31 	bl	8001d64 <__NVIC_EnableIRQ>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ffa2 	bl	8001e5c <SysTick_Config>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff f98c 	bl	800124c <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e099      	b.n	8002074 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f60:	e00f      	b.n	8001f82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f62:	f7ff f973 	bl	800124c <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	d908      	bls.n	8001f82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2203      	movs	r2, #3
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e078      	b.n	8002074 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1e8      	bne.n	8001f62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	4b38      	ldr	r3, [pc, #224]	@ (800207c <HAL_DMA_Init+0x158>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d107      	bne.n	8001fec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f023 0307 	bic.w	r3, r3, #7
 8002002:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002012:	2b04      	cmp	r3, #4
 8002014:	d117      	bne.n	8002046 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00e      	beq.n	8002046 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fa6f 	bl	800250c <DMA_CheckFifoParam>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2240      	movs	r2, #64	@ 0x40
 8002038:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002042:	2301      	movs	r3, #1
 8002044:	e016      	b.n	8002074 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fa26 	bl	80024a0 <DMA_CalcBaseAndBitshift>
 8002054:	4603      	mov	r3, r0
 8002056:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205c:	223f      	movs	r2, #63	@ 0x3f
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	f010803f 	.word	0xf010803f

08002080 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002096:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_DMA_Start_IT+0x26>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e040      	b.n	8002128 <HAL_DMA_Start_IT+0xa8>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d12f      	bne.n	800211a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2202      	movs	r2, #2
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f9b8 	bl	8002444 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d8:	223f      	movs	r2, #63	@ 0x3f
 80020da:	409a      	lsls	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0216 	orr.w	r2, r2, #22
 80020ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0208 	orr.w	r2, r2, #8
 8002106:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	e005      	b.n	8002126 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002122:	2302      	movs	r3, #2
 8002124:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002126:	7dfb      	ldrb	r3, [r7, #23]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800213c:	4b8e      	ldr	r3, [pc, #568]	@ (8002378 <HAL_DMA_IRQHandler+0x248>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a8e      	ldr	r2, [pc, #568]	@ (800237c <HAL_DMA_IRQHandler+0x24c>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	0a9b      	lsrs	r3, r3, #10
 8002148:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215a:	2208      	movs	r2, #8
 800215c:	409a      	lsls	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d01a      	beq.n	800219c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d013      	beq.n	800219c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0204 	bic.w	r2, r2, #4
 8002182:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002188:	2208      	movs	r2, #8
 800218a:	409a      	lsls	r2, r3
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a0:	2201      	movs	r2, #1
 80021a2:	409a      	lsls	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d012      	beq.n	80021d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021be:	2201      	movs	r2, #1
 80021c0:	409a      	lsls	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ca:	f043 0202 	orr.w	r2, r3, #2
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d6:	2204      	movs	r2, #4
 80021d8:	409a      	lsls	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d012      	beq.n	8002208 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00b      	beq.n	8002208 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f4:	2204      	movs	r2, #4
 80021f6:	409a      	lsls	r2, r3
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002200:	f043 0204 	orr.w	r2, r3, #4
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220c:	2210      	movs	r2, #16
 800220e:	409a      	lsls	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d043      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d03c      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222a:	2210      	movs	r2, #16
 800222c:	409a      	lsls	r2, r3
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d018      	beq.n	8002272 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d108      	bne.n	8002260 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	2b00      	cmp	r3, #0
 8002254:	d024      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	4798      	blx	r3
 800225e:	e01f      	b.n	80022a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01b      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
 8002270:	e016      	b.n	80022a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d107      	bne.n	8002290 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0208 	bic.w	r2, r2, #8
 800228e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a4:	2220      	movs	r2, #32
 80022a6:	409a      	lsls	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 808f 	beq.w	80023d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 8087 	beq.w	80023d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c6:	2220      	movs	r2, #32
 80022c8:	409a      	lsls	r2, r3
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b05      	cmp	r3, #5
 80022d8:	d136      	bne.n	8002348 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0216 	bic.w	r2, r2, #22
 80022e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d103      	bne.n	800230a <HAL_DMA_IRQHandler+0x1da>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0208 	bic.w	r2, r2, #8
 8002318:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231e:	223f      	movs	r2, #63	@ 0x3f
 8002320:	409a      	lsls	r2, r3
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800233a:	2b00      	cmp	r3, #0
 800233c:	d07e      	beq.n	800243c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	4798      	blx	r3
        }
        return;
 8002346:	e079      	b.n	800243c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01d      	beq.n	8002392 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10d      	bne.n	8002380 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002368:	2b00      	cmp	r3, #0
 800236a:	d031      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	4798      	blx	r3
 8002374:	e02c      	b.n	80023d0 <HAL_DMA_IRQHandler+0x2a0>
 8002376:	bf00      	nop
 8002378:	20000004 	.word	0x20000004
 800237c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002384:	2b00      	cmp	r3, #0
 8002386:	d023      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4798      	blx	r3
 8002390:	e01e      	b.n	80023d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10f      	bne.n	80023c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0210 	bic.w	r2, r2, #16
 80023ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d032      	beq.n	800243e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d022      	beq.n	800242a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2205      	movs	r2, #5
 80023e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0201 	bic.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	3301      	adds	r3, #1
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	429a      	cmp	r2, r3
 8002406:	d307      	bcc.n	8002418 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f2      	bne.n	80023fc <HAL_DMA_IRQHandler+0x2cc>
 8002416:	e000      	b.n	800241a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002418:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	4798      	blx	r3
 800243a:	e000      	b.n	800243e <HAL_DMA_IRQHandler+0x30e>
        return;
 800243c:	bf00      	nop
    }
  }
}
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002460:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b40      	cmp	r3, #64	@ 0x40
 8002470:	d108      	bne.n	8002484 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002482:	e007      	b.n	8002494 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	60da      	str	r2, [r3, #12]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	3b10      	subs	r3, #16
 80024b0:	4a14      	ldr	r2, [pc, #80]	@ (8002504 <DMA_CalcBaseAndBitshift+0x64>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024ba:	4a13      	ldr	r2, [pc, #76]	@ (8002508 <DMA_CalcBaseAndBitshift+0x68>)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d909      	bls.n	80024e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024d6:	f023 0303 	bic.w	r3, r3, #3
 80024da:	1d1a      	adds	r2, r3, #4
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	659a      	str	r2, [r3, #88]	@ 0x58
 80024e0:	e007      	b.n	80024f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024ea:	f023 0303 	bic.w	r3, r3, #3
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	aaaaaaab 	.word	0xaaaaaaab
 8002508:	08004894 	.word	0x08004894

0800250c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d11f      	bne.n	8002566 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d856      	bhi.n	80025da <DMA_CheckFifoParam+0xce>
 800252c:	a201      	add	r2, pc, #4	@ (adr r2, 8002534 <DMA_CheckFifoParam+0x28>)
 800252e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002532:	bf00      	nop
 8002534:	08002545 	.word	0x08002545
 8002538:	08002557 	.word	0x08002557
 800253c:	08002545 	.word	0x08002545
 8002540:	080025db 	.word	0x080025db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002548:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d046      	beq.n	80025de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002554:	e043      	b.n	80025de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800255e:	d140      	bne.n	80025e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002564:	e03d      	b.n	80025e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800256e:	d121      	bne.n	80025b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b03      	cmp	r3, #3
 8002574:	d837      	bhi.n	80025e6 <DMA_CheckFifoParam+0xda>
 8002576:	a201      	add	r2, pc, #4	@ (adr r2, 800257c <DMA_CheckFifoParam+0x70>)
 8002578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257c:	0800258d 	.word	0x0800258d
 8002580:	08002593 	.word	0x08002593
 8002584:	0800258d 	.word	0x0800258d
 8002588:	080025a5 	.word	0x080025a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
      break;
 8002590:	e030      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002596:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d025      	beq.n	80025ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a2:	e022      	b.n	80025ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025ac:	d11f      	bne.n	80025ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025b2:	e01c      	b.n	80025ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d903      	bls.n	80025c2 <DMA_CheckFifoParam+0xb6>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d003      	beq.n	80025c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025c0:	e018      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
      break;
 80025c6:	e015      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00e      	beq.n	80025f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      break;
 80025d8:	e00b      	b.n	80025f2 <DMA_CheckFifoParam+0xe6>
      break;
 80025da:	bf00      	nop
 80025dc:	e00a      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;
 80025de:	bf00      	nop
 80025e0:	e008      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;
 80025e2:	bf00      	nop
 80025e4:	e006      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;
 80025e6:	bf00      	nop
 80025e8:	e004      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;
 80025ea:	bf00      	nop
 80025ec:	e002      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80025ee:	bf00      	nop
 80025f0:	e000      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;
 80025f2:	bf00      	nop
    }
  } 
  
  return status; 
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop

08002604 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002612:	4b23      	ldr	r3, [pc, #140]	@ (80026a0 <HAL_FLASH_Program+0x9c>)
 8002614:	7e1b      	ldrb	r3, [r3, #24]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_FLASH_Program+0x1a>
 800261a:	2302      	movs	r3, #2
 800261c:	e03b      	b.n	8002696 <HAL_FLASH_Program+0x92>
 800261e:	4b20      	ldr	r3, [pc, #128]	@ (80026a0 <HAL_FLASH_Program+0x9c>)
 8002620:	2201      	movs	r2, #1
 8002622:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002624:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002628:	f000 f870 	bl	800270c <FLASH_WaitForLastOperation>
 800262c:	4603      	mov	r3, r0
 800262e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002630:	7dfb      	ldrb	r3, [r7, #23]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d12b      	bne.n	800268e <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d105      	bne.n	8002648 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800263c:	783b      	ldrb	r3, [r7, #0]
 800263e:	4619      	mov	r1, r3
 8002640:	68b8      	ldr	r0, [r7, #8]
 8002642:	f000 f91b 	bl	800287c <FLASH_Program_Byte>
 8002646:	e016      	b.n	8002676 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d105      	bne.n	800265a <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800264e:	883b      	ldrh	r3, [r7, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	68b8      	ldr	r0, [r7, #8]
 8002654:	f000 f8ee 	bl	8002834 <FLASH_Program_HalfWord>
 8002658:	e00d      	b.n	8002676 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d105      	bne.n	800266c <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4619      	mov	r1, r3
 8002664:	68b8      	ldr	r0, [r7, #8]
 8002666:	f000 f8c3 	bl	80027f0 <FLASH_Program_Word>
 800266a:	e004      	b.n	8002676 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800266c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002670:	68b8      	ldr	r0, [r7, #8]
 8002672:	f000 f88b 	bl	800278c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002676:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800267a:	f000 f847 	bl	800270c <FLASH_WaitForLastOperation>
 800267e:	4603      	mov	r3, r0
 8002680:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002682:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <HAL_FLASH_Program+0xa0>)
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	4a07      	ldr	r2, [pc, #28]	@ (80026a4 <HAL_FLASH_Program+0xa0>)
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800268e:	4b04      	ldr	r3, [pc, #16]	@ (80026a0 <HAL_FLASH_Program+0x9c>)
 8002690:	2200      	movs	r2, #0
 8002692:	761a      	strb	r2, [r3, #24]

  return status;
 8002694:	7dfb      	ldrb	r3, [r7, #23]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	200001e0 	.word	0x200001e0
 80026a4:	40023c00 	.word	0x40023c00

080026a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026b2:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <HAL_FLASH_Unlock+0x38>)
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	da0b      	bge.n	80026d2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80026ba:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <HAL_FLASH_Unlock+0x38>)
 80026bc:	4a09      	ldr	r2, [pc, #36]	@ (80026e4 <HAL_FLASH_Unlock+0x3c>)
 80026be:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80026c0:	4b07      	ldr	r3, [pc, #28]	@ (80026e0 <HAL_FLASH_Unlock+0x38>)
 80026c2:	4a09      	ldr	r2, [pc, #36]	@ (80026e8 <HAL_FLASH_Unlock+0x40>)
 80026c4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026c6:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <HAL_FLASH_Unlock+0x38>)
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	da01      	bge.n	80026d2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80026d2:	79fb      	ldrb	r3, [r7, #7]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40023c00 	.word	0x40023c00
 80026e4:	45670123 	.word	0x45670123
 80026e8:	cdef89ab 	.word	0xcdef89ab

080026ec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80026f0:	4b05      	ldr	r3, [pc, #20]	@ (8002708 <HAL_FLASH_Lock+0x1c>)
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	4a04      	ldr	r2, [pc, #16]	@ (8002708 <HAL_FLASH_Lock+0x1c>)
 80026f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026fa:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	40023c00 	.word	0x40023c00

0800270c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002718:	4b1a      	ldr	r3, [pc, #104]	@ (8002784 <FLASH_WaitForLastOperation+0x78>)
 800271a:	2200      	movs	r2, #0
 800271c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800271e:	f7fe fd95 	bl	800124c <HAL_GetTick>
 8002722:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002724:	e010      	b.n	8002748 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d00c      	beq.n	8002748 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d007      	beq.n	8002744 <FLASH_WaitForLastOperation+0x38>
 8002734:	f7fe fd8a 	bl	800124c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	429a      	cmp	r2, r3
 8002742:	d201      	bcs.n	8002748 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e019      	b.n	800277c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002748:	4b0f      	ldr	r3, [pc, #60]	@ (8002788 <FLASH_WaitForLastOperation+0x7c>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1e8      	bne.n	8002726 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002754:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <FLASH_WaitForLastOperation+0x7c>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002760:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <FLASH_WaitForLastOperation+0x7c>)
 8002762:	2201      	movs	r2, #1
 8002764:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002766:	4b08      	ldr	r3, [pc, #32]	@ (8002788 <FLASH_WaitForLastOperation+0x7c>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002772:	f000 f8a5 	bl	80028c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0

}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	200001e0 	.word	0x200001e0
 8002788:	40023c00 	.word	0x40023c00

0800278c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002798:	4b14      	ldr	r3, [pc, #80]	@ (80027ec <FLASH_Program_DoubleWord+0x60>)
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	4a13      	ldr	r2, [pc, #76]	@ (80027ec <FLASH_Program_DoubleWord+0x60>)
 800279e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80027a4:	4b11      	ldr	r3, [pc, #68]	@ (80027ec <FLASH_Program_DoubleWord+0x60>)
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	4a10      	ldr	r2, [pc, #64]	@ (80027ec <FLASH_Program_DoubleWord+0x60>)
 80027aa:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80027ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80027b0:	4b0e      	ldr	r3, [pc, #56]	@ (80027ec <FLASH_Program_DoubleWord+0x60>)
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	4a0d      	ldr	r2, [pc, #52]	@ (80027ec <FLASH_Program_DoubleWord+0x60>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80027c2:	f3bf 8f6f 	isb	sy
}
 80027c6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80027c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	000a      	movs	r2, r1
 80027d6:	2300      	movs	r3, #0
 80027d8:	68f9      	ldr	r1, [r7, #12]
 80027da:	3104      	adds	r1, #4
 80027dc:	4613      	mov	r3, r2
 80027de:	600b      	str	r3, [r1, #0]
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40023c00 	.word	0x40023c00

080027f0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80027fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002830 <FLASH_Program_Word+0x40>)
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002830 <FLASH_Program_Word+0x40>)
 8002800:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002804:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002806:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <FLASH_Program_Word+0x40>)
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	4a09      	ldr	r2, [pc, #36]	@ (8002830 <FLASH_Program_Word+0x40>)
 800280c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002810:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002812:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <FLASH_Program_Word+0x40>)
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	4a06      	ldr	r2, [pc, #24]	@ (8002830 <FLASH_Program_Word+0x40>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	601a      	str	r2, [r3, #0]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	40023c00 	.word	0x40023c00

08002834 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002840:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <FLASH_Program_HalfWord+0x44>)
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	4a0c      	ldr	r2, [pc, #48]	@ (8002878 <FLASH_Program_HalfWord+0x44>)
 8002846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800284a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800284c:	4b0a      	ldr	r3, [pc, #40]	@ (8002878 <FLASH_Program_HalfWord+0x44>)
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	4a09      	ldr	r2, [pc, #36]	@ (8002878 <FLASH_Program_HalfWord+0x44>)
 8002852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002856:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002858:	4b07      	ldr	r3, [pc, #28]	@ (8002878 <FLASH_Program_HalfWord+0x44>)
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	4a06      	ldr	r2, [pc, #24]	@ (8002878 <FLASH_Program_HalfWord+0x44>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	801a      	strh	r2, [r3, #0]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40023c00 	.word	0x40023c00

0800287c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002888:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <FLASH_Program_Byte+0x40>)
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	4a0b      	ldr	r2, [pc, #44]	@ (80028bc <FLASH_Program_Byte+0x40>)
 800288e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002892:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002894:	4b09      	ldr	r3, [pc, #36]	@ (80028bc <FLASH_Program_Byte+0x40>)
 8002896:	4a09      	ldr	r2, [pc, #36]	@ (80028bc <FLASH_Program_Byte+0x40>)
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800289c:	4b07      	ldr	r3, [pc, #28]	@ (80028bc <FLASH_Program_Byte+0x40>)
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	4a06      	ldr	r2, [pc, #24]	@ (80028bc <FLASH_Program_Byte+0x40>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	78fa      	ldrb	r2, [r7, #3]
 80028ac:	701a      	strb	r2, [r3, #0]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40023c00 	.word	0x40023c00

080028c0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80028c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002984 <FLASH_SetErrorCode+0xc4>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80028d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002988 <FLASH_SetErrorCode+0xc8>)
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	f043 0310 	orr.w	r3, r3, #16
 80028d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002988 <FLASH_SetErrorCode+0xc8>)
 80028da:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80028dc:	4b29      	ldr	r3, [pc, #164]	@ (8002984 <FLASH_SetErrorCode+0xc4>)
 80028de:	2210      	movs	r2, #16
 80028e0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80028e2:	4b28      	ldr	r3, [pc, #160]	@ (8002984 <FLASH_SetErrorCode+0xc4>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d008      	beq.n	8002900 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80028ee:	4b26      	ldr	r3, [pc, #152]	@ (8002988 <FLASH_SetErrorCode+0xc8>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f043 0308 	orr.w	r3, r3, #8
 80028f6:	4a24      	ldr	r2, [pc, #144]	@ (8002988 <FLASH_SetErrorCode+0xc8>)
 80028f8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80028fa:	4b22      	ldr	r3, [pc, #136]	@ (8002984 <FLASH_SetErrorCode+0xc4>)
 80028fc:	2220      	movs	r2, #32
 80028fe:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002900:	4b20      	ldr	r3, [pc, #128]	@ (8002984 <FLASH_SetErrorCode+0xc4>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800290c:	4b1e      	ldr	r3, [pc, #120]	@ (8002988 <FLASH_SetErrorCode+0xc8>)
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	4a1c      	ldr	r2, [pc, #112]	@ (8002988 <FLASH_SetErrorCode+0xc8>)
 8002916:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002918:	4b1a      	ldr	r3, [pc, #104]	@ (8002984 <FLASH_SetErrorCode+0xc4>)
 800291a:	2240      	movs	r2, #64	@ 0x40
 800291c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800291e:	4b19      	ldr	r3, [pc, #100]	@ (8002984 <FLASH_SetErrorCode+0xc4>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800292a:	4b17      	ldr	r3, [pc, #92]	@ (8002988 <FLASH_SetErrorCode+0xc8>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f043 0302 	orr.w	r3, r3, #2
 8002932:	4a15      	ldr	r2, [pc, #84]	@ (8002988 <FLASH_SetErrorCode+0xc8>)
 8002934:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002936:	4b13      	ldr	r3, [pc, #76]	@ (8002984 <FLASH_SetErrorCode+0xc4>)
 8002938:	2280      	movs	r2, #128	@ 0x80
 800293a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800293c:	4b11      	ldr	r3, [pc, #68]	@ (8002984 <FLASH_SetErrorCode+0xc4>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d009      	beq.n	800295c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002948:	4b0f      	ldr	r3, [pc, #60]	@ (8002988 <FLASH_SetErrorCode+0xc8>)
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	4a0d      	ldr	r2, [pc, #52]	@ (8002988 <FLASH_SetErrorCode+0xc8>)
 8002952:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002954:	4b0b      	ldr	r3, [pc, #44]	@ (8002984 <FLASH_SetErrorCode+0xc4>)
 8002956:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800295a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800295c:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <FLASH_SetErrorCode+0xc4>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002968:	4b07      	ldr	r3, [pc, #28]	@ (8002988 <FLASH_SetErrorCode+0xc8>)
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	f043 0320 	orr.w	r3, r3, #32
 8002970:	4a05      	ldr	r2, [pc, #20]	@ (8002988 <FLASH_SetErrorCode+0xc8>)
 8002972:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002974:	4b03      	ldr	r3, [pc, #12]	@ (8002984 <FLASH_SetErrorCode+0xc4>)
 8002976:	2202      	movs	r2, #2
 8002978:	60da      	str	r2, [r3, #12]
  }
}
 800297a:	bf00      	nop
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	40023c00 	.word	0x40023c00
 8002988:	200001e0 	.word	0x200001e0

0800298c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d102      	bne.n	80029a8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	e010      	b.n	80029ca <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d103      	bne.n	80029b6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80029ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e009      	b.n	80029ca <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d103      	bne.n	80029c4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80029bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	e002      	b.n	80029ca <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80029c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80029c8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029ca:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <FLASH_Erase_Sector+0x8c>)
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	4a12      	ldr	r2, [pc, #72]	@ (8002a18 <FLASH_Erase_Sector+0x8c>)
 80029d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80029d6:	4b10      	ldr	r3, [pc, #64]	@ (8002a18 <FLASH_Erase_Sector+0x8c>)
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	490f      	ldr	r1, [pc, #60]	@ (8002a18 <FLASH_Erase_Sector+0x8c>)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80029e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002a18 <FLASH_Erase_Sector+0x8c>)
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002a18 <FLASH_Erase_Sector+0x8c>)
 80029e8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80029ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80029ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <FLASH_Erase_Sector+0x8c>)
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4313      	orrs	r3, r2
 80029f8:	4a07      	ldr	r2, [pc, #28]	@ (8002a18 <FLASH_Erase_Sector+0x8c>)
 80029fa:	f043 0302 	orr.w	r3, r3, #2
 80029fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002a00:	4b05      	ldr	r3, [pc, #20]	@ (8002a18 <FLASH_Erase_Sector+0x8c>)
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	4a04      	ldr	r2, [pc, #16]	@ (8002a18 <FLASH_Erase_Sector+0x8c>)
 8002a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a0a:	6113      	str	r3, [r2, #16]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40023c00 	.word	0x40023c00

08002a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	@ 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	e159      	b.n	8002cec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	f040 8148 	bne.w	8002ce6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d005      	beq.n	8002a6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d130      	bne.n	8002ad0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	2203      	movs	r2, #3
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 0201 	and.w	r2, r3, #1
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d017      	beq.n	8002b0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d123      	bne.n	8002b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	08da      	lsrs	r2, r3, #3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3208      	adds	r2, #8
 8002b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	220f      	movs	r2, #15
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	08da      	lsrs	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3208      	adds	r2, #8
 8002b5a:	69b9      	ldr	r1, [r7, #24]
 8002b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0203 	and.w	r2, r3, #3
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a2 	beq.w	8002ce6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	4b57      	ldr	r3, [pc, #348]	@ (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002baa:	4a56      	ldr	r2, [pc, #344]	@ (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bb2:	4b54      	ldr	r3, [pc, #336]	@ (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bbe:	4a52      	ldr	r2, [pc, #328]	@ (8002d08 <HAL_GPIO_Init+0x2ec>)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	089b      	lsrs	r3, r3, #2
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	220f      	movs	r2, #15
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a49      	ldr	r2, [pc, #292]	@ (8002d0c <HAL_GPIO_Init+0x2f0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d019      	beq.n	8002c1e <HAL_GPIO_Init+0x202>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a48      	ldr	r2, [pc, #288]	@ (8002d10 <HAL_GPIO_Init+0x2f4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_GPIO_Init+0x1fe>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a47      	ldr	r2, [pc, #284]	@ (8002d14 <HAL_GPIO_Init+0x2f8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00d      	beq.n	8002c16 <HAL_GPIO_Init+0x1fa>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a46      	ldr	r2, [pc, #280]	@ (8002d18 <HAL_GPIO_Init+0x2fc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <HAL_GPIO_Init+0x1f6>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a45      	ldr	r2, [pc, #276]	@ (8002d1c <HAL_GPIO_Init+0x300>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_GPIO_Init+0x1f2>
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	e008      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c0e:	2307      	movs	r3, #7
 8002c10:	e006      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c12:	2303      	movs	r3, #3
 8002c14:	e004      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e002      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	f002 0203 	and.w	r2, r2, #3
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	4093      	lsls	r3, r2
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c30:	4935      	ldr	r1, [pc, #212]	@ (8002d08 <HAL_GPIO_Init+0x2ec>)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	3302      	adds	r3, #2
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3e:	4b38      	ldr	r3, [pc, #224]	@ (8002d20 <HAL_GPIO_Init+0x304>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c62:	4a2f      	ldr	r2, [pc, #188]	@ (8002d20 <HAL_GPIO_Init+0x304>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c68:	4b2d      	ldr	r3, [pc, #180]	@ (8002d20 <HAL_GPIO_Init+0x304>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c8c:	4a24      	ldr	r2, [pc, #144]	@ (8002d20 <HAL_GPIO_Init+0x304>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c92:	4b23      	ldr	r3, [pc, #140]	@ (8002d20 <HAL_GPIO_Init+0x304>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d20 <HAL_GPIO_Init+0x304>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cbc:	4b18      	ldr	r3, [pc, #96]	@ (8002d20 <HAL_GPIO_Init+0x304>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8002d20 <HAL_GPIO_Init+0x304>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b0f      	cmp	r3, #15
 8002cf0:	f67f aea2 	bls.w	8002a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3724      	adds	r7, #36	@ 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	40020400 	.word	0x40020400
 8002d14:	40020800 	.word	0x40020800
 8002d18:	40020c00 	.word	0x40020c00
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40013c00 	.word	0x40013c00

08002d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	887b      	ldrh	r3, [r7, #2]
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
 8002d40:	e001      	b.n	8002d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e267      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d075      	beq.n	8002e5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d72:	4b88      	ldr	r3, [pc, #544]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d00c      	beq.n	8002d98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d7e:	4b85      	ldr	r3, [pc, #532]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d112      	bne.n	8002db0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d8a:	4b82      	ldr	r3, [pc, #520]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d96:	d10b      	bne.n	8002db0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d98:	4b7e      	ldr	r3, [pc, #504]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d05b      	beq.n	8002e5c <HAL_RCC_OscConfig+0x108>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d157      	bne.n	8002e5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e242      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db8:	d106      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x74>
 8002dba:	4b76      	ldr	r3, [pc, #472]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a75      	ldr	r2, [pc, #468]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	e01d      	b.n	8002e04 <HAL_RCC_OscConfig+0xb0>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCC_OscConfig+0x98>
 8002dd2:	4b70      	ldr	r3, [pc, #448]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a6f      	ldr	r2, [pc, #444]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	4b6d      	ldr	r3, [pc, #436]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a6c      	ldr	r2, [pc, #432]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e00b      	b.n	8002e04 <HAL_RCC_OscConfig+0xb0>
 8002dec:	4b69      	ldr	r3, [pc, #420]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a68      	ldr	r2, [pc, #416]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002df2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	4b66      	ldr	r3, [pc, #408]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a65      	ldr	r2, [pc, #404]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d013      	beq.n	8002e34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7fe fa1e 	bl	800124c <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e14:	f7fe fa1a 	bl	800124c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	@ 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e207      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	4b5b      	ldr	r3, [pc, #364]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0xc0>
 8002e32:	e014      	b.n	8002e5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7fe fa0a 	bl	800124c <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e3c:	f7fe fa06 	bl	800124c <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	@ 0x64
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e1f3      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4e:	4b51      	ldr	r3, [pc, #324]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0xe8>
 8002e5a:	e000      	b.n	8002e5e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d063      	beq.n	8002f32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00b      	beq.n	8002e8e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e76:	4b47      	ldr	r3, [pc, #284]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d11c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e82:	4b44      	ldr	r3, [pc, #272]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d116      	bne.n	8002ebc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8e:	4b41      	ldr	r3, [pc, #260]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x152>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e1c7      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4937      	ldr	r1, [pc, #220]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eba:	e03a      	b.n	8002f32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d020      	beq.n	8002f06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec4:	4b34      	ldr	r3, [pc, #208]	@ (8002f98 <HAL_RCC_OscConfig+0x244>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eca:	f7fe f9bf 	bl	800124c <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed2:	f7fe f9bb 	bl	800124c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e1a8      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f0      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef0:	4b28      	ldr	r3, [pc, #160]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4925      	ldr	r1, [pc, #148]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]
 8002f04:	e015      	b.n	8002f32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f06:	4b24      	ldr	r3, [pc, #144]	@ (8002f98 <HAL_RCC_OscConfig+0x244>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7fe f99e 	bl	800124c <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f14:	f7fe f99a 	bl	800124c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e187      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f26:	4b1b      	ldr	r3, [pc, #108]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d036      	beq.n	8002fac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d016      	beq.n	8002f74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f46:	4b15      	ldr	r3, [pc, #84]	@ (8002f9c <HAL_RCC_OscConfig+0x248>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4c:	f7fe f97e 	bl	800124c <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f54:	f7fe f97a 	bl	800124c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e167      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f66:	4b0b      	ldr	r3, [pc, #44]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0x200>
 8002f72:	e01b      	b.n	8002fac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f74:	4b09      	ldr	r3, [pc, #36]	@ (8002f9c <HAL_RCC_OscConfig+0x248>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7a:	f7fe f967 	bl	800124c <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f80:	e00e      	b.n	8002fa0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f82:	f7fe f963 	bl	800124c <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d907      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e150      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
 8002f94:	40023800 	.word	0x40023800
 8002f98:	42470000 	.word	0x42470000
 8002f9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa0:	4b88      	ldr	r3, [pc, #544]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ea      	bne.n	8002f82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 8097 	beq.w	80030e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fbe:	4b81      	ldr	r3, [pc, #516]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10f      	bne.n	8002fea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	4b7d      	ldr	r3, [pc, #500]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	4a7c      	ldr	r2, [pc, #496]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fda:	4b7a      	ldr	r3, [pc, #488]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe2:	60bb      	str	r3, [r7, #8]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fea:	4b77      	ldr	r3, [pc, #476]	@ (80031c8 <HAL_RCC_OscConfig+0x474>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d118      	bne.n	8003028 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ff6:	4b74      	ldr	r3, [pc, #464]	@ (80031c8 <HAL_RCC_OscConfig+0x474>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a73      	ldr	r2, [pc, #460]	@ (80031c8 <HAL_RCC_OscConfig+0x474>)
 8002ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003002:	f7fe f923 	bl	800124c <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300a:	f7fe f91f 	bl	800124c <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e10c      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301c:	4b6a      	ldr	r3, [pc, #424]	@ (80031c8 <HAL_RCC_OscConfig+0x474>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d106      	bne.n	800303e <HAL_RCC_OscConfig+0x2ea>
 8003030:	4b64      	ldr	r3, [pc, #400]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003034:	4a63      	ldr	r2, [pc, #396]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6713      	str	r3, [r2, #112]	@ 0x70
 800303c:	e01c      	b.n	8003078 <HAL_RCC_OscConfig+0x324>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b05      	cmp	r3, #5
 8003044:	d10c      	bne.n	8003060 <HAL_RCC_OscConfig+0x30c>
 8003046:	4b5f      	ldr	r3, [pc, #380]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304a:	4a5e      	ldr	r2, [pc, #376]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	6713      	str	r3, [r2, #112]	@ 0x70
 8003052:	4b5c      	ldr	r3, [pc, #368]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003056:	4a5b      	ldr	r2, [pc, #364]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6713      	str	r3, [r2, #112]	@ 0x70
 800305e:	e00b      	b.n	8003078 <HAL_RCC_OscConfig+0x324>
 8003060:	4b58      	ldr	r3, [pc, #352]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003064:	4a57      	ldr	r2, [pc, #348]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	6713      	str	r3, [r2, #112]	@ 0x70
 800306c:	4b55      	ldr	r3, [pc, #340]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003070:	4a54      	ldr	r2, [pc, #336]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003072:	f023 0304 	bic.w	r3, r3, #4
 8003076:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d015      	beq.n	80030ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7fe f8e4 	bl	800124c <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003086:	e00a      	b.n	800309e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003088:	f7fe f8e0 	bl	800124c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e0cb      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309e:	4b49      	ldr	r3, [pc, #292]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0ee      	beq.n	8003088 <HAL_RCC_OscConfig+0x334>
 80030aa:	e014      	b.n	80030d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ac:	f7fe f8ce 	bl	800124c <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7fe f8ca 	bl	800124c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e0b5      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ca:	4b3e      	ldr	r3, [pc, #248]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1ee      	bne.n	80030b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d105      	bne.n	80030e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030dc:	4b39      	ldr	r3, [pc, #228]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 80030de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e0:	4a38      	ldr	r2, [pc, #224]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 80030e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80a1 	beq.w	8003234 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030f2:	4b34      	ldr	r3, [pc, #208]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d05c      	beq.n	80031b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d141      	bne.n	800318a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003106:	4b31      	ldr	r3, [pc, #196]	@ (80031cc <HAL_RCC_OscConfig+0x478>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7fe f89e 	bl	800124c <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003114:	f7fe f89a 	bl	800124c <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e087      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	4b27      	ldr	r3, [pc, #156]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69da      	ldr	r2, [r3, #28]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	019b      	lsls	r3, r3, #6
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003148:	085b      	lsrs	r3, r3, #1
 800314a:	3b01      	subs	r3, #1
 800314c:	041b      	lsls	r3, r3, #16
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	061b      	lsls	r3, r3, #24
 8003156:	491b      	ldr	r1, [pc, #108]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800315c:	4b1b      	ldr	r3, [pc, #108]	@ (80031cc <HAL_RCC_OscConfig+0x478>)
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003162:	f7fe f873 	bl	800124c <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316a:	f7fe f86f 	bl	800124c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e05c      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317c:	4b11      	ldr	r3, [pc, #68]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x416>
 8003188:	e054      	b.n	8003234 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318a:	4b10      	ldr	r3, [pc, #64]	@ (80031cc <HAL_RCC_OscConfig+0x478>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fe f85c 	bl	800124c <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003198:	f7fe f858 	bl	800124c <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e045      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031aa:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x444>
 80031b6:	e03d      	b.n	8003234 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d107      	bne.n	80031d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e038      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40007000 	.word	0x40007000
 80031cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <HAL_RCC_OscConfig+0x4ec>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d028      	beq.n	8003230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d121      	bne.n	8003230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d11a      	bne.n	8003230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003200:	4013      	ands	r3, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003206:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003208:	4293      	cmp	r3, r2
 800320a:	d111      	bne.n	8003230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	3b01      	subs	r3, #1
 800321a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d107      	bne.n	8003230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800

08003244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0cc      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003258:	4b68      	ldr	r3, [pc, #416]	@ (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d90c      	bls.n	8003280 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b65      	ldr	r3, [pc, #404]	@ (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b63      	ldr	r3, [pc, #396]	@ (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0b8      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d020      	beq.n	80032ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003298:	4b59      	ldr	r3, [pc, #356]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	4a58      	ldr	r2, [pc, #352]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b0:	4b53      	ldr	r3, [pc, #332]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4a52      	ldr	r2, [pc, #328]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032bc:	4b50      	ldr	r3, [pc, #320]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	494d      	ldr	r1, [pc, #308]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d044      	beq.n	8003364 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e2:	4b47      	ldr	r3, [pc, #284]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d119      	bne.n	8003322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e07f      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d003      	beq.n	8003302 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d107      	bne.n	8003312 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003302:	4b3f      	ldr	r3, [pc, #252]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e06f      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003312:	4b3b      	ldr	r3, [pc, #236]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e067      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003322:	4b37      	ldr	r3, [pc, #220]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f023 0203 	bic.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4934      	ldr	r1, [pc, #208]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	4313      	orrs	r3, r2
 8003332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003334:	f7fd ff8a 	bl	800124c <HAL_GetTick>
 8003338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	e00a      	b.n	8003352 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333c:	f7fd ff86 	bl	800124c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e04f      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	4b2b      	ldr	r3, [pc, #172]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 020c 	and.w	r2, r3, #12
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	429a      	cmp	r2, r3
 8003362:	d1eb      	bne.n	800333c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003364:	4b25      	ldr	r3, [pc, #148]	@ (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d20c      	bcs.n	800338c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b22      	ldr	r3, [pc, #136]	@ (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	4b20      	ldr	r3, [pc, #128]	@ (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e032      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003398:	4b19      	ldr	r3, [pc, #100]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4916      	ldr	r1, [pc, #88]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033b6:	4b12      	ldr	r3, [pc, #72]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	490e      	ldr	r1, [pc, #56]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ca:	f000 f82d 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80033ce:	4602      	mov	r2, r0
 80033d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	490a      	ldr	r1, [pc, #40]	@ (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 80033dc:	5ccb      	ldrb	r3, [r1, r3]
 80033de:	fa22 f303 	lsr.w	r3, r2, r3
 80033e2:	4a09      	ldr	r2, [pc, #36]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80033e6:	4b09      	ldr	r3, [pc, #36]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd feea 	bl	80011c4 <HAL_InitTick>

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023c00 	.word	0x40023c00
 8003400:	40023800 	.word	0x40023800
 8003404:	0800487c 	.word	0x0800487c
 8003408:	20000004 	.word	0x20000004
 800340c:	20000008 	.word	0x20000008

08003410 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003414:	4b03      	ldr	r3, [pc, #12]	@ (8003424 <HAL_RCC_EnableCSS+0x14>)
 8003416:	2201      	movs	r2, #1
 8003418:	601a      	str	r2, [r3, #0]
}
 800341a:	bf00      	nop
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	4247004c 	.word	0x4247004c

08003428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800342c:	b090      	sub	sp, #64	@ 0x40
 800342e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003440:	4b59      	ldr	r3, [pc, #356]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b08      	cmp	r3, #8
 800344a:	d00d      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x40>
 800344c:	2b08      	cmp	r3, #8
 800344e:	f200 80a1 	bhi.w	8003594 <HAL_RCC_GetSysClockFreq+0x16c>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x34>
 8003456:	2b04      	cmp	r3, #4
 8003458:	d003      	beq.n	8003462 <HAL_RCC_GetSysClockFreq+0x3a>
 800345a:	e09b      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b53      	ldr	r3, [pc, #332]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x184>)
 800345e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003460:	e09b      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003462:	4b53      	ldr	r3, [pc, #332]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003464:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003466:	e098      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003468:	4b4f      	ldr	r3, [pc, #316]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003470:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003472:	4b4d      	ldr	r3, [pc, #308]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d028      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347e:	4b4a      	ldr	r3, [pc, #296]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	099b      	lsrs	r3, r3, #6
 8003484:	2200      	movs	r2, #0
 8003486:	623b      	str	r3, [r7, #32]
 8003488:	627a      	str	r2, [r7, #36]	@ 0x24
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003490:	2100      	movs	r1, #0
 8003492:	4b47      	ldr	r3, [pc, #284]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003494:	fb03 f201 	mul.w	r2, r3, r1
 8003498:	2300      	movs	r3, #0
 800349a:	fb00 f303 	mul.w	r3, r0, r3
 800349e:	4413      	add	r3, r2
 80034a0:	4a43      	ldr	r2, [pc, #268]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80034a2:	fba0 1202 	umull	r1, r2, r0, r2
 80034a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034a8:	460a      	mov	r2, r1
 80034aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80034ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034ae:	4413      	add	r3, r2
 80034b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b4:	2200      	movs	r2, #0
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	61fa      	str	r2, [r7, #28]
 80034ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034c2:	f7fc fee5 	bl	8000290 <__aeabi_uldivmod>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4613      	mov	r3, r2
 80034cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034ce:	e053      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d0:	4b35      	ldr	r3, [pc, #212]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	2200      	movs	r2, #0
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	617a      	str	r2, [r7, #20]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034e2:	f04f 0b00 	mov.w	fp, #0
 80034e6:	4652      	mov	r2, sl
 80034e8:	465b      	mov	r3, fp
 80034ea:	f04f 0000 	mov.w	r0, #0
 80034ee:	f04f 0100 	mov.w	r1, #0
 80034f2:	0159      	lsls	r1, r3, #5
 80034f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f8:	0150      	lsls	r0, r2, #5
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	ebb2 080a 	subs.w	r8, r2, sl
 8003502:	eb63 090b 	sbc.w	r9, r3, fp
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003512:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003516:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800351a:	ebb2 0408 	subs.w	r4, r2, r8
 800351e:	eb63 0509 	sbc.w	r5, r3, r9
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	00eb      	lsls	r3, r5, #3
 800352c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003530:	00e2      	lsls	r2, r4, #3
 8003532:	4614      	mov	r4, r2
 8003534:	461d      	mov	r5, r3
 8003536:	eb14 030a 	adds.w	r3, r4, sl
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	eb45 030b 	adc.w	r3, r5, fp
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800354e:	4629      	mov	r1, r5
 8003550:	028b      	lsls	r3, r1, #10
 8003552:	4621      	mov	r1, r4
 8003554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003558:	4621      	mov	r1, r4
 800355a:	028a      	lsls	r2, r1, #10
 800355c:	4610      	mov	r0, r2
 800355e:	4619      	mov	r1, r3
 8003560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003562:	2200      	movs	r2, #0
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	60fa      	str	r2, [r7, #12]
 8003568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800356c:	f7fc fe90 	bl	8000290 <__aeabi_uldivmod>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4613      	mov	r3, r2
 8003576:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003578:	4b0b      	ldr	r3, [pc, #44]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	0c1b      	lsrs	r3, r3, #16
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	3301      	adds	r3, #1
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003588:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003590:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003592:	e002      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003594:	4b05      	ldr	r3, [pc, #20]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x184>)
 8003596:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800359c:	4618      	mov	r0, r3
 800359e:	3740      	adds	r7, #64	@ 0x40
 80035a0:	46bd      	mov	sp, r7
 80035a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800
 80035ac:	00f42400 	.word	0x00f42400
 80035b0:	017d7840 	.word	0x017d7840

080035b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b8:	4b03      	ldr	r3, [pc, #12]	@ (80035c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ba:	681b      	ldr	r3, [r3, #0]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000004 	.word	0x20000004

080035cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035d0:	f7ff fff0 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80035d4:	4602      	mov	r2, r0
 80035d6:	4b05      	ldr	r3, [pc, #20]	@ (80035ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	0a9b      	lsrs	r3, r3, #10
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	4903      	ldr	r1, [pc, #12]	@ (80035f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e2:	5ccb      	ldrb	r3, [r1, r3]
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40023800 	.word	0x40023800
 80035f0:	0800488c 	.word	0x0800488c

080035f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035f8:	f7ff ffdc 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b05      	ldr	r3, [pc, #20]	@ (8003614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	0b5b      	lsrs	r3, r3, #13
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	4903      	ldr	r1, [pc, #12]	@ (8003618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800360a:	5ccb      	ldrb	r3, [r1, r3]
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40023800 	.word	0x40023800
 8003618:	0800488c 	.word	0x0800488c

0800361c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003620:	4b06      	ldr	r3, [pc, #24]	@ (800363c <HAL_RCC_NMI_IRQHandler+0x20>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003628:	2b80      	cmp	r3, #128	@ 0x80
 800362a:	d104      	bne.n	8003636 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800362c:	f000 f80a 	bl	8003644 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003630:	4b03      	ldr	r3, [pc, #12]	@ (8003640 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003632:	2280      	movs	r2, #128	@ 0x80
 8003634:	701a      	strb	r2, [r3, #0]
  }
}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40023800 	.word	0x40023800
 8003640:	4002380e 	.word	0x4002380e

08003644 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e042      	b.n	80036ea <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d106      	bne.n	800367e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7fd fc81 	bl	8000f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2224      	movs	r2, #36	@ 0x24
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003694:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f972 	bl	8003980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b08a      	sub	sp, #40	@ 0x28
 80036f6:	af02      	add	r7, sp, #8
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	4613      	mov	r3, r2
 8003700:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b20      	cmp	r3, #32
 8003710:	d175      	bne.n	80037fe <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <HAL_UART_Transmit+0x2c>
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e06e      	b.n	8003800 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2221      	movs	r2, #33	@ 0x21
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003730:	f7fd fd8c 	bl	800124c <HAL_GetTick>
 8003734:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	88fa      	ldrh	r2, [r7, #6]
 8003740:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800374a:	d108      	bne.n	800375e <HAL_UART_Transmit+0x6c>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d104      	bne.n	800375e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	61bb      	str	r3, [r7, #24]
 800375c:	e003      	b.n	8003766 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003762:	2300      	movs	r3, #0
 8003764:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003766:	e02e      	b.n	80037c6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2200      	movs	r2, #0
 8003770:	2180      	movs	r1, #128	@ 0x80
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f848 	bl	8003808 <UART_WaitOnFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e03a      	b.n	8003800 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10b      	bne.n	80037a8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800379e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	3302      	adds	r3, #2
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	e007      	b.n	80037b8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	781a      	ldrb	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3301      	adds	r3, #1
 80037b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1cb      	bne.n	8003768 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2200      	movs	r2, #0
 80037d8:	2140      	movs	r1, #64	@ 0x40
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f814 	bl	8003808 <UART_WaitOnFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e006      	b.n	8003800 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e000      	b.n	8003800 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037fe:	2302      	movs	r3, #2
  }
}
 8003800:	4618      	mov	r0, r3
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003818:	e03b      	b.n	8003892 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d037      	beq.n	8003892 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003822:	f7fd fd13 	bl	800124c <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	6a3a      	ldr	r2, [r7, #32]
 800382e:	429a      	cmp	r2, r3
 8003830:	d302      	bcc.n	8003838 <UART_WaitOnFlagUntilTimeout+0x30>
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e03a      	b.n	80038b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b00      	cmp	r3, #0
 8003848:	d023      	beq.n	8003892 <UART_WaitOnFlagUntilTimeout+0x8a>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b80      	cmp	r3, #128	@ 0x80
 800384e:	d020      	beq.n	8003892 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b40      	cmp	r3, #64	@ 0x40
 8003854:	d01d      	beq.n	8003892 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b08      	cmp	r3, #8
 8003862:	d116      	bne.n	8003892 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f81d 	bl	80038ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2208      	movs	r2, #8
 8003884:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e00f      	b.n	80038b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	4013      	ands	r3, r2
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	429a      	cmp	r2, r3
 80038a0:	bf0c      	ite	eq
 80038a2:	2301      	moveq	r3, #1
 80038a4:	2300      	movne	r3, #0
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	461a      	mov	r2, r3
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d0b4      	beq.n	800381a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b095      	sub	sp, #84	@ 0x54
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	330c      	adds	r3, #12
 80038c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	330c      	adds	r3, #12
 80038e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80038e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1e5      	bne.n	80038c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3314      	adds	r3, #20
 80038fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	61fb      	str	r3, [r7, #28]
   return(result);
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3314      	adds	r3, #20
 8003914:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003916:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003918:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800391c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e5      	bne.n	80038f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	2b01      	cmp	r3, #1
 8003930:	d119      	bne.n	8003966 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	330c      	adds	r3, #12
 8003938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	60bb      	str	r3, [r7, #8]
   return(result);
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f023 0310 	bic.w	r3, r3, #16
 8003948:	647b      	str	r3, [r7, #68]	@ 0x44
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	330c      	adds	r3, #12
 8003950:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003952:	61ba      	str	r2, [r7, #24]
 8003954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6979      	ldr	r1, [r7, #20]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	613b      	str	r3, [r7, #16]
   return(result);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e5      	bne.n	8003932 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003974:	bf00      	nop
 8003976:	3754      	adds	r7, #84	@ 0x54
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003984:	b0c0      	sub	sp, #256	@ 0x100
 8003986:	af00      	add	r7, sp, #0
 8003988:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399c:	68d9      	ldr	r1, [r3, #12]
 800399e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	ea40 0301 	orr.w	r3, r0, r1
 80039a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	431a      	orrs	r2, r3
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039d8:	f021 010c 	bic.w	r1, r1, #12
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039e6:	430b      	orrs	r3, r1
 80039e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fa:	6999      	ldr	r1, [r3, #24]
 80039fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	ea40 0301 	orr.w	r3, r0, r1
 8003a06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4b8f      	ldr	r3, [pc, #572]	@ (8003c4c <UART_SetConfig+0x2cc>)
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d005      	beq.n	8003a20 <UART_SetConfig+0xa0>
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4b8d      	ldr	r3, [pc, #564]	@ (8003c50 <UART_SetConfig+0x2d0>)
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d104      	bne.n	8003a2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a20:	f7ff fde8 	bl	80035f4 <HAL_RCC_GetPCLK2Freq>
 8003a24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a28:	e003      	b.n	8003a32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a2a:	f7ff fdcf 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 8003a2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a3c:	f040 810c 	bne.w	8003c58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a44:	2200      	movs	r2, #0
 8003a46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a52:	4622      	mov	r2, r4
 8003a54:	462b      	mov	r3, r5
 8003a56:	1891      	adds	r1, r2, r2
 8003a58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a5a:	415b      	adcs	r3, r3
 8003a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a62:	4621      	mov	r1, r4
 8003a64:	eb12 0801 	adds.w	r8, r2, r1
 8003a68:	4629      	mov	r1, r5
 8003a6a:	eb43 0901 	adc.w	r9, r3, r1
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a82:	4690      	mov	r8, r2
 8003a84:	4699      	mov	r9, r3
 8003a86:	4623      	mov	r3, r4
 8003a88:	eb18 0303 	adds.w	r3, r8, r3
 8003a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a90:	462b      	mov	r3, r5
 8003a92:	eb49 0303 	adc.w	r3, r9, r3
 8003a96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003aa6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003aaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003aae:	460b      	mov	r3, r1
 8003ab0:	18db      	adds	r3, r3, r3
 8003ab2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	eb42 0303 	adc.w	r3, r2, r3
 8003aba:	657b      	str	r3, [r7, #84]	@ 0x54
 8003abc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ac0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ac4:	f7fc fbe4 	bl	8000290 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4b61      	ldr	r3, [pc, #388]	@ (8003c54 <UART_SetConfig+0x2d4>)
 8003ace:	fba3 2302 	umull	r2, r3, r3, r2
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	011c      	lsls	r4, r3, #4
 8003ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ae0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ae4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ae8:	4642      	mov	r2, r8
 8003aea:	464b      	mov	r3, r9
 8003aec:	1891      	adds	r1, r2, r2
 8003aee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003af0:	415b      	adcs	r3, r3
 8003af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003af4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003af8:	4641      	mov	r1, r8
 8003afa:	eb12 0a01 	adds.w	sl, r2, r1
 8003afe:	4649      	mov	r1, r9
 8003b00:	eb43 0b01 	adc.w	fp, r3, r1
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b18:	4692      	mov	sl, r2
 8003b1a:	469b      	mov	fp, r3
 8003b1c:	4643      	mov	r3, r8
 8003b1e:	eb1a 0303 	adds.w	r3, sl, r3
 8003b22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b26:	464b      	mov	r3, r9
 8003b28:	eb4b 0303 	adc.w	r3, fp, r3
 8003b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b44:	460b      	mov	r3, r1
 8003b46:	18db      	adds	r3, r3, r3
 8003b48:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	eb42 0303 	adc.w	r3, r2, r3
 8003b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b5a:	f7fc fb99 	bl	8000290 <__aeabi_uldivmod>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4611      	mov	r1, r2
 8003b64:	4b3b      	ldr	r3, [pc, #236]	@ (8003c54 <UART_SetConfig+0x2d4>)
 8003b66:	fba3 2301 	umull	r2, r3, r3, r1
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	2264      	movs	r2, #100	@ 0x64
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	1acb      	subs	r3, r1, r3
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b7a:	4b36      	ldr	r3, [pc, #216]	@ (8003c54 <UART_SetConfig+0x2d4>)
 8003b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b88:	441c      	add	r4, r3
 8003b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	1891      	adds	r1, r2, r2
 8003ba2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ba4:	415b      	adcs	r3, r3
 8003ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ba8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003bac:	4641      	mov	r1, r8
 8003bae:	1851      	adds	r1, r2, r1
 8003bb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	414b      	adcs	r3, r1
 8003bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003bc4:	4659      	mov	r1, fp
 8003bc6:	00cb      	lsls	r3, r1, #3
 8003bc8:	4651      	mov	r1, sl
 8003bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bce:	4651      	mov	r1, sl
 8003bd0:	00ca      	lsls	r2, r1, #3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	4642      	mov	r2, r8
 8003bda:	189b      	adds	r3, r3, r2
 8003bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003be0:	464b      	mov	r3, r9
 8003be2:	460a      	mov	r2, r1
 8003be4:	eb42 0303 	adc.w	r3, r2, r3
 8003be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bf8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003bfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c00:	460b      	mov	r3, r1
 8003c02:	18db      	adds	r3, r3, r3
 8003c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c06:	4613      	mov	r3, r2
 8003c08:	eb42 0303 	adc.w	r3, r2, r3
 8003c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c16:	f7fc fb3b 	bl	8000290 <__aeabi_uldivmod>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <UART_SetConfig+0x2d4>)
 8003c20:	fba3 1302 	umull	r1, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	2164      	movs	r1, #100	@ 0x64
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	3332      	adds	r3, #50	@ 0x32
 8003c32:	4a08      	ldr	r2, [pc, #32]	@ (8003c54 <UART_SetConfig+0x2d4>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	f003 0207 	and.w	r2, r3, #7
 8003c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4422      	add	r2, r4
 8003c46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c48:	e106      	b.n	8003e58 <UART_SetConfig+0x4d8>
 8003c4a:	bf00      	nop
 8003c4c:	40011000 	.word	0x40011000
 8003c50:	40011400 	.word	0x40011400
 8003c54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c6a:	4642      	mov	r2, r8
 8003c6c:	464b      	mov	r3, r9
 8003c6e:	1891      	adds	r1, r2, r2
 8003c70:	6239      	str	r1, [r7, #32]
 8003c72:	415b      	adcs	r3, r3
 8003c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c7a:	4641      	mov	r1, r8
 8003c7c:	1854      	adds	r4, r2, r1
 8003c7e:	4649      	mov	r1, r9
 8003c80:	eb43 0501 	adc.w	r5, r3, r1
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	00eb      	lsls	r3, r5, #3
 8003c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c92:	00e2      	lsls	r2, r4, #3
 8003c94:	4614      	mov	r4, r2
 8003c96:	461d      	mov	r5, r3
 8003c98:	4643      	mov	r3, r8
 8003c9a:	18e3      	adds	r3, r4, r3
 8003c9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ca0:	464b      	mov	r3, r9
 8003ca2:	eb45 0303 	adc.w	r3, r5, r3
 8003ca6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	008b      	lsls	r3, r1, #2
 8003cca:	4621      	mov	r1, r4
 8003ccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	008a      	lsls	r2, r1, #2
 8003cd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003cd8:	f7fc fada 	bl	8000290 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4b60      	ldr	r3, [pc, #384]	@ (8003e64 <UART_SetConfig+0x4e4>)
 8003ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	011c      	lsls	r4, r3, #4
 8003cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cf4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	464b      	mov	r3, r9
 8003d00:	1891      	adds	r1, r2, r2
 8003d02:	61b9      	str	r1, [r7, #24]
 8003d04:	415b      	adcs	r3, r3
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d0c:	4641      	mov	r1, r8
 8003d0e:	1851      	adds	r1, r2, r1
 8003d10:	6139      	str	r1, [r7, #16]
 8003d12:	4649      	mov	r1, r9
 8003d14:	414b      	adcs	r3, r1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d24:	4659      	mov	r1, fp
 8003d26:	00cb      	lsls	r3, r1, #3
 8003d28:	4651      	mov	r1, sl
 8003d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d2e:	4651      	mov	r1, sl
 8003d30:	00ca      	lsls	r2, r1, #3
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	4642      	mov	r2, r8
 8003d3a:	189b      	adds	r3, r3, r2
 8003d3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d40:	464b      	mov	r3, r9
 8003d42:	460a      	mov	r2, r1
 8003d44:	eb42 0303 	adc.w	r3, r2, r3
 8003d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d64:	4649      	mov	r1, r9
 8003d66:	008b      	lsls	r3, r1, #2
 8003d68:	4641      	mov	r1, r8
 8003d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d6e:	4641      	mov	r1, r8
 8003d70:	008a      	lsls	r2, r1, #2
 8003d72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d76:	f7fc fa8b 	bl	8000290 <__aeabi_uldivmod>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4b38      	ldr	r3, [pc, #224]	@ (8003e64 <UART_SetConfig+0x4e4>)
 8003d82:	fba3 2301 	umull	r2, r3, r3, r1
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	2264      	movs	r2, #100	@ 0x64
 8003d8a:	fb02 f303 	mul.w	r3, r2, r3
 8003d8e:	1acb      	subs	r3, r1, r3
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	3332      	adds	r3, #50	@ 0x32
 8003d94:	4a33      	ldr	r2, [pc, #204]	@ (8003e64 <UART_SetConfig+0x4e4>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003da0:	441c      	add	r4, r3
 8003da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003da6:	2200      	movs	r2, #0
 8003da8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003daa:	677a      	str	r2, [r7, #116]	@ 0x74
 8003dac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003db0:	4642      	mov	r2, r8
 8003db2:	464b      	mov	r3, r9
 8003db4:	1891      	adds	r1, r2, r2
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	415b      	adcs	r3, r3
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	1851      	adds	r1, r2, r1
 8003dc4:	6039      	str	r1, [r7, #0]
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	414b      	adcs	r3, r1
 8003dca:	607b      	str	r3, [r7, #4]
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dd8:	4659      	mov	r1, fp
 8003dda:	00cb      	lsls	r3, r1, #3
 8003ddc:	4651      	mov	r1, sl
 8003dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003de2:	4651      	mov	r1, sl
 8003de4:	00ca      	lsls	r2, r1, #3
 8003de6:	4610      	mov	r0, r2
 8003de8:	4619      	mov	r1, r3
 8003dea:	4603      	mov	r3, r0
 8003dec:	4642      	mov	r2, r8
 8003dee:	189b      	adds	r3, r3, r2
 8003df0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003df2:	464b      	mov	r3, r9
 8003df4:	460a      	mov	r2, r1
 8003df6:	eb42 0303 	adc.w	r3, r2, r3
 8003dfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e06:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e14:	4649      	mov	r1, r9
 8003e16:	008b      	lsls	r3, r1, #2
 8003e18:	4641      	mov	r1, r8
 8003e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e1e:	4641      	mov	r1, r8
 8003e20:	008a      	lsls	r2, r1, #2
 8003e22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e26:	f7fc fa33 	bl	8000290 <__aeabi_uldivmod>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e64 <UART_SetConfig+0x4e4>)
 8003e30:	fba3 1302 	umull	r1, r3, r3, r2
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	2164      	movs	r1, #100	@ 0x64
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	3332      	adds	r3, #50	@ 0x32
 8003e42:	4a08      	ldr	r2, [pc, #32]	@ (8003e64 <UART_SetConfig+0x4e4>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	f003 020f 	and.w	r2, r3, #15
 8003e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4422      	add	r2, r4
 8003e56:	609a      	str	r2, [r3, #8]
}
 8003e58:	bf00      	nop
 8003e5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e64:	51eb851f 	.word	0x51eb851f

08003e68 <sniprintf>:
 8003e68:	b40c      	push	{r2, r3}
 8003e6a:	b530      	push	{r4, r5, lr}
 8003e6c:	4b18      	ldr	r3, [pc, #96]	@ (8003ed0 <sniprintf+0x68>)
 8003e6e:	1e0c      	subs	r4, r1, #0
 8003e70:	681d      	ldr	r5, [r3, #0]
 8003e72:	b09d      	sub	sp, #116	@ 0x74
 8003e74:	da08      	bge.n	8003e88 <sniprintf+0x20>
 8003e76:	238b      	movs	r3, #139	@ 0x8b
 8003e78:	602b      	str	r3, [r5, #0]
 8003e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7e:	b01d      	add	sp, #116	@ 0x74
 8003e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e84:	b002      	add	sp, #8
 8003e86:	4770      	bx	lr
 8003e88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003e8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003e96:	bf14      	ite	ne
 8003e98:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003e9c:	4623      	moveq	r3, r4
 8003e9e:	9304      	str	r3, [sp, #16]
 8003ea0:	9307      	str	r3, [sp, #28]
 8003ea2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ea6:	9002      	str	r0, [sp, #8]
 8003ea8:	9006      	str	r0, [sp, #24]
 8003eaa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003eae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003eb0:	ab21      	add	r3, sp, #132	@ 0x84
 8003eb2:	a902      	add	r1, sp, #8
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	f000 f994 	bl	80041e4 <_svfiprintf_r>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	bfbc      	itt	lt
 8003ec0:	238b      	movlt	r3, #139	@ 0x8b
 8003ec2:	602b      	strlt	r3, [r5, #0]
 8003ec4:	2c00      	cmp	r4, #0
 8003ec6:	d0da      	beq.n	8003e7e <sniprintf+0x16>
 8003ec8:	9b02      	ldr	r3, [sp, #8]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	e7d6      	b.n	8003e7e <sniprintf+0x16>
 8003ed0:	20000010 	.word	0x20000010

08003ed4 <memset>:
 8003ed4:	4402      	add	r2, r0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d100      	bne.n	8003ede <memset+0xa>
 8003edc:	4770      	bx	lr
 8003ede:	f803 1b01 	strb.w	r1, [r3], #1
 8003ee2:	e7f9      	b.n	8003ed8 <memset+0x4>

08003ee4 <__errno>:
 8003ee4:	4b01      	ldr	r3, [pc, #4]	@ (8003eec <__errno+0x8>)
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20000010 	.word	0x20000010

08003ef0 <__libc_init_array>:
 8003ef0:	b570      	push	{r4, r5, r6, lr}
 8003ef2:	4d0d      	ldr	r5, [pc, #52]	@ (8003f28 <__libc_init_array+0x38>)
 8003ef4:	4c0d      	ldr	r4, [pc, #52]	@ (8003f2c <__libc_init_array+0x3c>)
 8003ef6:	1b64      	subs	r4, r4, r5
 8003ef8:	10a4      	asrs	r4, r4, #2
 8003efa:	2600      	movs	r6, #0
 8003efc:	42a6      	cmp	r6, r4
 8003efe:	d109      	bne.n	8003f14 <__libc_init_array+0x24>
 8003f00:	4d0b      	ldr	r5, [pc, #44]	@ (8003f30 <__libc_init_array+0x40>)
 8003f02:	4c0c      	ldr	r4, [pc, #48]	@ (8003f34 <__libc_init_array+0x44>)
 8003f04:	f000 fc64 	bl	80047d0 <_init>
 8003f08:	1b64      	subs	r4, r4, r5
 8003f0a:	10a4      	asrs	r4, r4, #2
 8003f0c:	2600      	movs	r6, #0
 8003f0e:	42a6      	cmp	r6, r4
 8003f10:	d105      	bne.n	8003f1e <__libc_init_array+0x2e>
 8003f12:	bd70      	pop	{r4, r5, r6, pc}
 8003f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f18:	4798      	blx	r3
 8003f1a:	3601      	adds	r6, #1
 8003f1c:	e7ee      	b.n	8003efc <__libc_init_array+0xc>
 8003f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f22:	4798      	blx	r3
 8003f24:	3601      	adds	r6, #1
 8003f26:	e7f2      	b.n	8003f0e <__libc_init_array+0x1e>
 8003f28:	080048d8 	.word	0x080048d8
 8003f2c:	080048d8 	.word	0x080048d8
 8003f30:	080048d8 	.word	0x080048d8
 8003f34:	080048dc 	.word	0x080048dc

08003f38 <__retarget_lock_acquire_recursive>:
 8003f38:	4770      	bx	lr

08003f3a <__retarget_lock_release_recursive>:
 8003f3a:	4770      	bx	lr

08003f3c <_free_r>:
 8003f3c:	b538      	push	{r3, r4, r5, lr}
 8003f3e:	4605      	mov	r5, r0
 8003f40:	2900      	cmp	r1, #0
 8003f42:	d041      	beq.n	8003fc8 <_free_r+0x8c>
 8003f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f48:	1f0c      	subs	r4, r1, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bfb8      	it	lt
 8003f4e:	18e4      	addlt	r4, r4, r3
 8003f50:	f000 f8e0 	bl	8004114 <__malloc_lock>
 8003f54:	4a1d      	ldr	r2, [pc, #116]	@ (8003fcc <_free_r+0x90>)
 8003f56:	6813      	ldr	r3, [r2, #0]
 8003f58:	b933      	cbnz	r3, 8003f68 <_free_r+0x2c>
 8003f5a:	6063      	str	r3, [r4, #4]
 8003f5c:	6014      	str	r4, [r2, #0]
 8003f5e:	4628      	mov	r0, r5
 8003f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f64:	f000 b8dc 	b.w	8004120 <__malloc_unlock>
 8003f68:	42a3      	cmp	r3, r4
 8003f6a:	d908      	bls.n	8003f7e <_free_r+0x42>
 8003f6c:	6820      	ldr	r0, [r4, #0]
 8003f6e:	1821      	adds	r1, r4, r0
 8003f70:	428b      	cmp	r3, r1
 8003f72:	bf01      	itttt	eq
 8003f74:	6819      	ldreq	r1, [r3, #0]
 8003f76:	685b      	ldreq	r3, [r3, #4]
 8003f78:	1809      	addeq	r1, r1, r0
 8003f7a:	6021      	streq	r1, [r4, #0]
 8003f7c:	e7ed      	b.n	8003f5a <_free_r+0x1e>
 8003f7e:	461a      	mov	r2, r3
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	b10b      	cbz	r3, 8003f88 <_free_r+0x4c>
 8003f84:	42a3      	cmp	r3, r4
 8003f86:	d9fa      	bls.n	8003f7e <_free_r+0x42>
 8003f88:	6811      	ldr	r1, [r2, #0]
 8003f8a:	1850      	adds	r0, r2, r1
 8003f8c:	42a0      	cmp	r0, r4
 8003f8e:	d10b      	bne.n	8003fa8 <_free_r+0x6c>
 8003f90:	6820      	ldr	r0, [r4, #0]
 8003f92:	4401      	add	r1, r0
 8003f94:	1850      	adds	r0, r2, r1
 8003f96:	4283      	cmp	r3, r0
 8003f98:	6011      	str	r1, [r2, #0]
 8003f9a:	d1e0      	bne.n	8003f5e <_free_r+0x22>
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	6053      	str	r3, [r2, #4]
 8003fa2:	4408      	add	r0, r1
 8003fa4:	6010      	str	r0, [r2, #0]
 8003fa6:	e7da      	b.n	8003f5e <_free_r+0x22>
 8003fa8:	d902      	bls.n	8003fb0 <_free_r+0x74>
 8003faa:	230c      	movs	r3, #12
 8003fac:	602b      	str	r3, [r5, #0]
 8003fae:	e7d6      	b.n	8003f5e <_free_r+0x22>
 8003fb0:	6820      	ldr	r0, [r4, #0]
 8003fb2:	1821      	adds	r1, r4, r0
 8003fb4:	428b      	cmp	r3, r1
 8003fb6:	bf04      	itt	eq
 8003fb8:	6819      	ldreq	r1, [r3, #0]
 8003fba:	685b      	ldreq	r3, [r3, #4]
 8003fbc:	6063      	str	r3, [r4, #4]
 8003fbe:	bf04      	itt	eq
 8003fc0:	1809      	addeq	r1, r1, r0
 8003fc2:	6021      	streq	r1, [r4, #0]
 8003fc4:	6054      	str	r4, [r2, #4]
 8003fc6:	e7ca      	b.n	8003f5e <_free_r+0x22>
 8003fc8:	bd38      	pop	{r3, r4, r5, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000344 	.word	0x20000344

08003fd0 <sbrk_aligned>:
 8003fd0:	b570      	push	{r4, r5, r6, lr}
 8003fd2:	4e0f      	ldr	r6, [pc, #60]	@ (8004010 <sbrk_aligned+0x40>)
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	6831      	ldr	r1, [r6, #0]
 8003fd8:	4605      	mov	r5, r0
 8003fda:	b911      	cbnz	r1, 8003fe2 <sbrk_aligned+0x12>
 8003fdc:	f000 fba4 	bl	8004728 <_sbrk_r>
 8003fe0:	6030      	str	r0, [r6, #0]
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f000 fb9f 	bl	8004728 <_sbrk_r>
 8003fea:	1c43      	adds	r3, r0, #1
 8003fec:	d103      	bne.n	8003ff6 <sbrk_aligned+0x26>
 8003fee:	f04f 34ff 	mov.w	r4, #4294967295
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	bd70      	pop	{r4, r5, r6, pc}
 8003ff6:	1cc4      	adds	r4, r0, #3
 8003ff8:	f024 0403 	bic.w	r4, r4, #3
 8003ffc:	42a0      	cmp	r0, r4
 8003ffe:	d0f8      	beq.n	8003ff2 <sbrk_aligned+0x22>
 8004000:	1a21      	subs	r1, r4, r0
 8004002:	4628      	mov	r0, r5
 8004004:	f000 fb90 	bl	8004728 <_sbrk_r>
 8004008:	3001      	adds	r0, #1
 800400a:	d1f2      	bne.n	8003ff2 <sbrk_aligned+0x22>
 800400c:	e7ef      	b.n	8003fee <sbrk_aligned+0x1e>
 800400e:	bf00      	nop
 8004010:	20000340 	.word	0x20000340

08004014 <_malloc_r>:
 8004014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004018:	1ccd      	adds	r5, r1, #3
 800401a:	f025 0503 	bic.w	r5, r5, #3
 800401e:	3508      	adds	r5, #8
 8004020:	2d0c      	cmp	r5, #12
 8004022:	bf38      	it	cc
 8004024:	250c      	movcc	r5, #12
 8004026:	2d00      	cmp	r5, #0
 8004028:	4606      	mov	r6, r0
 800402a:	db01      	blt.n	8004030 <_malloc_r+0x1c>
 800402c:	42a9      	cmp	r1, r5
 800402e:	d904      	bls.n	800403a <_malloc_r+0x26>
 8004030:	230c      	movs	r3, #12
 8004032:	6033      	str	r3, [r6, #0]
 8004034:	2000      	movs	r0, #0
 8004036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800403a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004110 <_malloc_r+0xfc>
 800403e:	f000 f869 	bl	8004114 <__malloc_lock>
 8004042:	f8d8 3000 	ldr.w	r3, [r8]
 8004046:	461c      	mov	r4, r3
 8004048:	bb44      	cbnz	r4, 800409c <_malloc_r+0x88>
 800404a:	4629      	mov	r1, r5
 800404c:	4630      	mov	r0, r6
 800404e:	f7ff ffbf 	bl	8003fd0 <sbrk_aligned>
 8004052:	1c43      	adds	r3, r0, #1
 8004054:	4604      	mov	r4, r0
 8004056:	d158      	bne.n	800410a <_malloc_r+0xf6>
 8004058:	f8d8 4000 	ldr.w	r4, [r8]
 800405c:	4627      	mov	r7, r4
 800405e:	2f00      	cmp	r7, #0
 8004060:	d143      	bne.n	80040ea <_malloc_r+0xd6>
 8004062:	2c00      	cmp	r4, #0
 8004064:	d04b      	beq.n	80040fe <_malloc_r+0xea>
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	4639      	mov	r1, r7
 800406a:	4630      	mov	r0, r6
 800406c:	eb04 0903 	add.w	r9, r4, r3
 8004070:	f000 fb5a 	bl	8004728 <_sbrk_r>
 8004074:	4581      	cmp	r9, r0
 8004076:	d142      	bne.n	80040fe <_malloc_r+0xea>
 8004078:	6821      	ldr	r1, [r4, #0]
 800407a:	1a6d      	subs	r5, r5, r1
 800407c:	4629      	mov	r1, r5
 800407e:	4630      	mov	r0, r6
 8004080:	f7ff ffa6 	bl	8003fd0 <sbrk_aligned>
 8004084:	3001      	adds	r0, #1
 8004086:	d03a      	beq.n	80040fe <_malloc_r+0xea>
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	442b      	add	r3, r5
 800408c:	6023      	str	r3, [r4, #0]
 800408e:	f8d8 3000 	ldr.w	r3, [r8]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	bb62      	cbnz	r2, 80040f0 <_malloc_r+0xdc>
 8004096:	f8c8 7000 	str.w	r7, [r8]
 800409a:	e00f      	b.n	80040bc <_malloc_r+0xa8>
 800409c:	6822      	ldr	r2, [r4, #0]
 800409e:	1b52      	subs	r2, r2, r5
 80040a0:	d420      	bmi.n	80040e4 <_malloc_r+0xd0>
 80040a2:	2a0b      	cmp	r2, #11
 80040a4:	d917      	bls.n	80040d6 <_malloc_r+0xc2>
 80040a6:	1961      	adds	r1, r4, r5
 80040a8:	42a3      	cmp	r3, r4
 80040aa:	6025      	str	r5, [r4, #0]
 80040ac:	bf18      	it	ne
 80040ae:	6059      	strne	r1, [r3, #4]
 80040b0:	6863      	ldr	r3, [r4, #4]
 80040b2:	bf08      	it	eq
 80040b4:	f8c8 1000 	streq.w	r1, [r8]
 80040b8:	5162      	str	r2, [r4, r5]
 80040ba:	604b      	str	r3, [r1, #4]
 80040bc:	4630      	mov	r0, r6
 80040be:	f000 f82f 	bl	8004120 <__malloc_unlock>
 80040c2:	f104 000b 	add.w	r0, r4, #11
 80040c6:	1d23      	adds	r3, r4, #4
 80040c8:	f020 0007 	bic.w	r0, r0, #7
 80040cc:	1ac2      	subs	r2, r0, r3
 80040ce:	bf1c      	itt	ne
 80040d0:	1a1b      	subne	r3, r3, r0
 80040d2:	50a3      	strne	r3, [r4, r2]
 80040d4:	e7af      	b.n	8004036 <_malloc_r+0x22>
 80040d6:	6862      	ldr	r2, [r4, #4]
 80040d8:	42a3      	cmp	r3, r4
 80040da:	bf0c      	ite	eq
 80040dc:	f8c8 2000 	streq.w	r2, [r8]
 80040e0:	605a      	strne	r2, [r3, #4]
 80040e2:	e7eb      	b.n	80040bc <_malloc_r+0xa8>
 80040e4:	4623      	mov	r3, r4
 80040e6:	6864      	ldr	r4, [r4, #4]
 80040e8:	e7ae      	b.n	8004048 <_malloc_r+0x34>
 80040ea:	463c      	mov	r4, r7
 80040ec:	687f      	ldr	r7, [r7, #4]
 80040ee:	e7b6      	b.n	800405e <_malloc_r+0x4a>
 80040f0:	461a      	mov	r2, r3
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	42a3      	cmp	r3, r4
 80040f6:	d1fb      	bne.n	80040f0 <_malloc_r+0xdc>
 80040f8:	2300      	movs	r3, #0
 80040fa:	6053      	str	r3, [r2, #4]
 80040fc:	e7de      	b.n	80040bc <_malloc_r+0xa8>
 80040fe:	230c      	movs	r3, #12
 8004100:	6033      	str	r3, [r6, #0]
 8004102:	4630      	mov	r0, r6
 8004104:	f000 f80c 	bl	8004120 <__malloc_unlock>
 8004108:	e794      	b.n	8004034 <_malloc_r+0x20>
 800410a:	6005      	str	r5, [r0, #0]
 800410c:	e7d6      	b.n	80040bc <_malloc_r+0xa8>
 800410e:	bf00      	nop
 8004110:	20000344 	.word	0x20000344

08004114 <__malloc_lock>:
 8004114:	4801      	ldr	r0, [pc, #4]	@ (800411c <__malloc_lock+0x8>)
 8004116:	f7ff bf0f 	b.w	8003f38 <__retarget_lock_acquire_recursive>
 800411a:	bf00      	nop
 800411c:	2000033c 	.word	0x2000033c

08004120 <__malloc_unlock>:
 8004120:	4801      	ldr	r0, [pc, #4]	@ (8004128 <__malloc_unlock+0x8>)
 8004122:	f7ff bf0a 	b.w	8003f3a <__retarget_lock_release_recursive>
 8004126:	bf00      	nop
 8004128:	2000033c 	.word	0x2000033c

0800412c <__ssputs_r>:
 800412c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004130:	688e      	ldr	r6, [r1, #8]
 8004132:	461f      	mov	r7, r3
 8004134:	42be      	cmp	r6, r7
 8004136:	680b      	ldr	r3, [r1, #0]
 8004138:	4682      	mov	sl, r0
 800413a:	460c      	mov	r4, r1
 800413c:	4690      	mov	r8, r2
 800413e:	d82d      	bhi.n	800419c <__ssputs_r+0x70>
 8004140:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004144:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004148:	d026      	beq.n	8004198 <__ssputs_r+0x6c>
 800414a:	6965      	ldr	r5, [r4, #20]
 800414c:	6909      	ldr	r1, [r1, #16]
 800414e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004152:	eba3 0901 	sub.w	r9, r3, r1
 8004156:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800415a:	1c7b      	adds	r3, r7, #1
 800415c:	444b      	add	r3, r9
 800415e:	106d      	asrs	r5, r5, #1
 8004160:	429d      	cmp	r5, r3
 8004162:	bf38      	it	cc
 8004164:	461d      	movcc	r5, r3
 8004166:	0553      	lsls	r3, r2, #21
 8004168:	d527      	bpl.n	80041ba <__ssputs_r+0x8e>
 800416a:	4629      	mov	r1, r5
 800416c:	f7ff ff52 	bl	8004014 <_malloc_r>
 8004170:	4606      	mov	r6, r0
 8004172:	b360      	cbz	r0, 80041ce <__ssputs_r+0xa2>
 8004174:	6921      	ldr	r1, [r4, #16]
 8004176:	464a      	mov	r2, r9
 8004178:	f000 fae6 	bl	8004748 <memcpy>
 800417c:	89a3      	ldrh	r3, [r4, #12]
 800417e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004186:	81a3      	strh	r3, [r4, #12]
 8004188:	6126      	str	r6, [r4, #16]
 800418a:	6165      	str	r5, [r4, #20]
 800418c:	444e      	add	r6, r9
 800418e:	eba5 0509 	sub.w	r5, r5, r9
 8004192:	6026      	str	r6, [r4, #0]
 8004194:	60a5      	str	r5, [r4, #8]
 8004196:	463e      	mov	r6, r7
 8004198:	42be      	cmp	r6, r7
 800419a:	d900      	bls.n	800419e <__ssputs_r+0x72>
 800419c:	463e      	mov	r6, r7
 800419e:	6820      	ldr	r0, [r4, #0]
 80041a0:	4632      	mov	r2, r6
 80041a2:	4641      	mov	r1, r8
 80041a4:	f000 faa6 	bl	80046f4 <memmove>
 80041a8:	68a3      	ldr	r3, [r4, #8]
 80041aa:	1b9b      	subs	r3, r3, r6
 80041ac:	60a3      	str	r3, [r4, #8]
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	4433      	add	r3, r6
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	2000      	movs	r0, #0
 80041b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ba:	462a      	mov	r2, r5
 80041bc:	f000 fad2 	bl	8004764 <_realloc_r>
 80041c0:	4606      	mov	r6, r0
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d1e0      	bne.n	8004188 <__ssputs_r+0x5c>
 80041c6:	6921      	ldr	r1, [r4, #16]
 80041c8:	4650      	mov	r0, sl
 80041ca:	f7ff feb7 	bl	8003f3c <_free_r>
 80041ce:	230c      	movs	r3, #12
 80041d0:	f8ca 3000 	str.w	r3, [sl]
 80041d4:	89a3      	ldrh	r3, [r4, #12]
 80041d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041da:	81a3      	strh	r3, [r4, #12]
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	e7e9      	b.n	80041b6 <__ssputs_r+0x8a>
	...

080041e4 <_svfiprintf_r>:
 80041e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e8:	4698      	mov	r8, r3
 80041ea:	898b      	ldrh	r3, [r1, #12]
 80041ec:	061b      	lsls	r3, r3, #24
 80041ee:	b09d      	sub	sp, #116	@ 0x74
 80041f0:	4607      	mov	r7, r0
 80041f2:	460d      	mov	r5, r1
 80041f4:	4614      	mov	r4, r2
 80041f6:	d510      	bpl.n	800421a <_svfiprintf_r+0x36>
 80041f8:	690b      	ldr	r3, [r1, #16]
 80041fa:	b973      	cbnz	r3, 800421a <_svfiprintf_r+0x36>
 80041fc:	2140      	movs	r1, #64	@ 0x40
 80041fe:	f7ff ff09 	bl	8004014 <_malloc_r>
 8004202:	6028      	str	r0, [r5, #0]
 8004204:	6128      	str	r0, [r5, #16]
 8004206:	b930      	cbnz	r0, 8004216 <_svfiprintf_r+0x32>
 8004208:	230c      	movs	r3, #12
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	f04f 30ff 	mov.w	r0, #4294967295
 8004210:	b01d      	add	sp, #116	@ 0x74
 8004212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004216:	2340      	movs	r3, #64	@ 0x40
 8004218:	616b      	str	r3, [r5, #20]
 800421a:	2300      	movs	r3, #0
 800421c:	9309      	str	r3, [sp, #36]	@ 0x24
 800421e:	2320      	movs	r3, #32
 8004220:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004224:	f8cd 800c 	str.w	r8, [sp, #12]
 8004228:	2330      	movs	r3, #48	@ 0x30
 800422a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80043c8 <_svfiprintf_r+0x1e4>
 800422e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004232:	f04f 0901 	mov.w	r9, #1
 8004236:	4623      	mov	r3, r4
 8004238:	469a      	mov	sl, r3
 800423a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800423e:	b10a      	cbz	r2, 8004244 <_svfiprintf_r+0x60>
 8004240:	2a25      	cmp	r2, #37	@ 0x25
 8004242:	d1f9      	bne.n	8004238 <_svfiprintf_r+0x54>
 8004244:	ebba 0b04 	subs.w	fp, sl, r4
 8004248:	d00b      	beq.n	8004262 <_svfiprintf_r+0x7e>
 800424a:	465b      	mov	r3, fp
 800424c:	4622      	mov	r2, r4
 800424e:	4629      	mov	r1, r5
 8004250:	4638      	mov	r0, r7
 8004252:	f7ff ff6b 	bl	800412c <__ssputs_r>
 8004256:	3001      	adds	r0, #1
 8004258:	f000 80a7 	beq.w	80043aa <_svfiprintf_r+0x1c6>
 800425c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800425e:	445a      	add	r2, fp
 8004260:	9209      	str	r2, [sp, #36]	@ 0x24
 8004262:	f89a 3000 	ldrb.w	r3, [sl]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 809f 	beq.w	80043aa <_svfiprintf_r+0x1c6>
 800426c:	2300      	movs	r3, #0
 800426e:	f04f 32ff 	mov.w	r2, #4294967295
 8004272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004276:	f10a 0a01 	add.w	sl, sl, #1
 800427a:	9304      	str	r3, [sp, #16]
 800427c:	9307      	str	r3, [sp, #28]
 800427e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004282:	931a      	str	r3, [sp, #104]	@ 0x68
 8004284:	4654      	mov	r4, sl
 8004286:	2205      	movs	r2, #5
 8004288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800428c:	484e      	ldr	r0, [pc, #312]	@ (80043c8 <_svfiprintf_r+0x1e4>)
 800428e:	f7fb ffaf 	bl	80001f0 <memchr>
 8004292:	9a04      	ldr	r2, [sp, #16]
 8004294:	b9d8      	cbnz	r0, 80042ce <_svfiprintf_r+0xea>
 8004296:	06d0      	lsls	r0, r2, #27
 8004298:	bf44      	itt	mi
 800429a:	2320      	movmi	r3, #32
 800429c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042a0:	0711      	lsls	r1, r2, #28
 80042a2:	bf44      	itt	mi
 80042a4:	232b      	movmi	r3, #43	@ 0x2b
 80042a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042aa:	f89a 3000 	ldrb.w	r3, [sl]
 80042ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80042b0:	d015      	beq.n	80042de <_svfiprintf_r+0xfa>
 80042b2:	9a07      	ldr	r2, [sp, #28]
 80042b4:	4654      	mov	r4, sl
 80042b6:	2000      	movs	r0, #0
 80042b8:	f04f 0c0a 	mov.w	ip, #10
 80042bc:	4621      	mov	r1, r4
 80042be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042c2:	3b30      	subs	r3, #48	@ 0x30
 80042c4:	2b09      	cmp	r3, #9
 80042c6:	d94b      	bls.n	8004360 <_svfiprintf_r+0x17c>
 80042c8:	b1b0      	cbz	r0, 80042f8 <_svfiprintf_r+0x114>
 80042ca:	9207      	str	r2, [sp, #28]
 80042cc:	e014      	b.n	80042f8 <_svfiprintf_r+0x114>
 80042ce:	eba0 0308 	sub.w	r3, r0, r8
 80042d2:	fa09 f303 	lsl.w	r3, r9, r3
 80042d6:	4313      	orrs	r3, r2
 80042d8:	9304      	str	r3, [sp, #16]
 80042da:	46a2      	mov	sl, r4
 80042dc:	e7d2      	b.n	8004284 <_svfiprintf_r+0xa0>
 80042de:	9b03      	ldr	r3, [sp, #12]
 80042e0:	1d19      	adds	r1, r3, #4
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	9103      	str	r1, [sp, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	bfbb      	ittet	lt
 80042ea:	425b      	neglt	r3, r3
 80042ec:	f042 0202 	orrlt.w	r2, r2, #2
 80042f0:	9307      	strge	r3, [sp, #28]
 80042f2:	9307      	strlt	r3, [sp, #28]
 80042f4:	bfb8      	it	lt
 80042f6:	9204      	strlt	r2, [sp, #16]
 80042f8:	7823      	ldrb	r3, [r4, #0]
 80042fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80042fc:	d10a      	bne.n	8004314 <_svfiprintf_r+0x130>
 80042fe:	7863      	ldrb	r3, [r4, #1]
 8004300:	2b2a      	cmp	r3, #42	@ 0x2a
 8004302:	d132      	bne.n	800436a <_svfiprintf_r+0x186>
 8004304:	9b03      	ldr	r3, [sp, #12]
 8004306:	1d1a      	adds	r2, r3, #4
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	9203      	str	r2, [sp, #12]
 800430c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004310:	3402      	adds	r4, #2
 8004312:	9305      	str	r3, [sp, #20]
 8004314:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80043d8 <_svfiprintf_r+0x1f4>
 8004318:	7821      	ldrb	r1, [r4, #0]
 800431a:	2203      	movs	r2, #3
 800431c:	4650      	mov	r0, sl
 800431e:	f7fb ff67 	bl	80001f0 <memchr>
 8004322:	b138      	cbz	r0, 8004334 <_svfiprintf_r+0x150>
 8004324:	9b04      	ldr	r3, [sp, #16]
 8004326:	eba0 000a 	sub.w	r0, r0, sl
 800432a:	2240      	movs	r2, #64	@ 0x40
 800432c:	4082      	lsls	r2, r0
 800432e:	4313      	orrs	r3, r2
 8004330:	3401      	adds	r4, #1
 8004332:	9304      	str	r3, [sp, #16]
 8004334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004338:	4824      	ldr	r0, [pc, #144]	@ (80043cc <_svfiprintf_r+0x1e8>)
 800433a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800433e:	2206      	movs	r2, #6
 8004340:	f7fb ff56 	bl	80001f0 <memchr>
 8004344:	2800      	cmp	r0, #0
 8004346:	d036      	beq.n	80043b6 <_svfiprintf_r+0x1d2>
 8004348:	4b21      	ldr	r3, [pc, #132]	@ (80043d0 <_svfiprintf_r+0x1ec>)
 800434a:	bb1b      	cbnz	r3, 8004394 <_svfiprintf_r+0x1b0>
 800434c:	9b03      	ldr	r3, [sp, #12]
 800434e:	3307      	adds	r3, #7
 8004350:	f023 0307 	bic.w	r3, r3, #7
 8004354:	3308      	adds	r3, #8
 8004356:	9303      	str	r3, [sp, #12]
 8004358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800435a:	4433      	add	r3, r6
 800435c:	9309      	str	r3, [sp, #36]	@ 0x24
 800435e:	e76a      	b.n	8004236 <_svfiprintf_r+0x52>
 8004360:	fb0c 3202 	mla	r2, ip, r2, r3
 8004364:	460c      	mov	r4, r1
 8004366:	2001      	movs	r0, #1
 8004368:	e7a8      	b.n	80042bc <_svfiprintf_r+0xd8>
 800436a:	2300      	movs	r3, #0
 800436c:	3401      	adds	r4, #1
 800436e:	9305      	str	r3, [sp, #20]
 8004370:	4619      	mov	r1, r3
 8004372:	f04f 0c0a 	mov.w	ip, #10
 8004376:	4620      	mov	r0, r4
 8004378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800437c:	3a30      	subs	r2, #48	@ 0x30
 800437e:	2a09      	cmp	r2, #9
 8004380:	d903      	bls.n	800438a <_svfiprintf_r+0x1a6>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0c6      	beq.n	8004314 <_svfiprintf_r+0x130>
 8004386:	9105      	str	r1, [sp, #20]
 8004388:	e7c4      	b.n	8004314 <_svfiprintf_r+0x130>
 800438a:	fb0c 2101 	mla	r1, ip, r1, r2
 800438e:	4604      	mov	r4, r0
 8004390:	2301      	movs	r3, #1
 8004392:	e7f0      	b.n	8004376 <_svfiprintf_r+0x192>
 8004394:	ab03      	add	r3, sp, #12
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	462a      	mov	r2, r5
 800439a:	4b0e      	ldr	r3, [pc, #56]	@ (80043d4 <_svfiprintf_r+0x1f0>)
 800439c:	a904      	add	r1, sp, #16
 800439e:	4638      	mov	r0, r7
 80043a0:	f3af 8000 	nop.w
 80043a4:	1c42      	adds	r2, r0, #1
 80043a6:	4606      	mov	r6, r0
 80043a8:	d1d6      	bne.n	8004358 <_svfiprintf_r+0x174>
 80043aa:	89ab      	ldrh	r3, [r5, #12]
 80043ac:	065b      	lsls	r3, r3, #25
 80043ae:	f53f af2d 	bmi.w	800420c <_svfiprintf_r+0x28>
 80043b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80043b4:	e72c      	b.n	8004210 <_svfiprintf_r+0x2c>
 80043b6:	ab03      	add	r3, sp, #12
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	462a      	mov	r2, r5
 80043bc:	4b05      	ldr	r3, [pc, #20]	@ (80043d4 <_svfiprintf_r+0x1f0>)
 80043be:	a904      	add	r1, sp, #16
 80043c0:	4638      	mov	r0, r7
 80043c2:	f000 f879 	bl	80044b8 <_printf_i>
 80043c6:	e7ed      	b.n	80043a4 <_svfiprintf_r+0x1c0>
 80043c8:	0800489c 	.word	0x0800489c
 80043cc:	080048a6 	.word	0x080048a6
 80043d0:	00000000 	.word	0x00000000
 80043d4:	0800412d 	.word	0x0800412d
 80043d8:	080048a2 	.word	0x080048a2

080043dc <_printf_common>:
 80043dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043e0:	4616      	mov	r6, r2
 80043e2:	4698      	mov	r8, r3
 80043e4:	688a      	ldr	r2, [r1, #8]
 80043e6:	690b      	ldr	r3, [r1, #16]
 80043e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043ec:	4293      	cmp	r3, r2
 80043ee:	bfb8      	it	lt
 80043f0:	4613      	movlt	r3, r2
 80043f2:	6033      	str	r3, [r6, #0]
 80043f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043f8:	4607      	mov	r7, r0
 80043fa:	460c      	mov	r4, r1
 80043fc:	b10a      	cbz	r2, 8004402 <_printf_common+0x26>
 80043fe:	3301      	adds	r3, #1
 8004400:	6033      	str	r3, [r6, #0]
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	0699      	lsls	r1, r3, #26
 8004406:	bf42      	ittt	mi
 8004408:	6833      	ldrmi	r3, [r6, #0]
 800440a:	3302      	addmi	r3, #2
 800440c:	6033      	strmi	r3, [r6, #0]
 800440e:	6825      	ldr	r5, [r4, #0]
 8004410:	f015 0506 	ands.w	r5, r5, #6
 8004414:	d106      	bne.n	8004424 <_printf_common+0x48>
 8004416:	f104 0a19 	add.w	sl, r4, #25
 800441a:	68e3      	ldr	r3, [r4, #12]
 800441c:	6832      	ldr	r2, [r6, #0]
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	42ab      	cmp	r3, r5
 8004422:	dc26      	bgt.n	8004472 <_printf_common+0x96>
 8004424:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004428:	6822      	ldr	r2, [r4, #0]
 800442a:	3b00      	subs	r3, #0
 800442c:	bf18      	it	ne
 800442e:	2301      	movne	r3, #1
 8004430:	0692      	lsls	r2, r2, #26
 8004432:	d42b      	bmi.n	800448c <_printf_common+0xb0>
 8004434:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004438:	4641      	mov	r1, r8
 800443a:	4638      	mov	r0, r7
 800443c:	47c8      	blx	r9
 800443e:	3001      	adds	r0, #1
 8004440:	d01e      	beq.n	8004480 <_printf_common+0xa4>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	6922      	ldr	r2, [r4, #16]
 8004446:	f003 0306 	and.w	r3, r3, #6
 800444a:	2b04      	cmp	r3, #4
 800444c:	bf02      	ittt	eq
 800444e:	68e5      	ldreq	r5, [r4, #12]
 8004450:	6833      	ldreq	r3, [r6, #0]
 8004452:	1aed      	subeq	r5, r5, r3
 8004454:	68a3      	ldr	r3, [r4, #8]
 8004456:	bf0c      	ite	eq
 8004458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800445c:	2500      	movne	r5, #0
 800445e:	4293      	cmp	r3, r2
 8004460:	bfc4      	itt	gt
 8004462:	1a9b      	subgt	r3, r3, r2
 8004464:	18ed      	addgt	r5, r5, r3
 8004466:	2600      	movs	r6, #0
 8004468:	341a      	adds	r4, #26
 800446a:	42b5      	cmp	r5, r6
 800446c:	d11a      	bne.n	80044a4 <_printf_common+0xc8>
 800446e:	2000      	movs	r0, #0
 8004470:	e008      	b.n	8004484 <_printf_common+0xa8>
 8004472:	2301      	movs	r3, #1
 8004474:	4652      	mov	r2, sl
 8004476:	4641      	mov	r1, r8
 8004478:	4638      	mov	r0, r7
 800447a:	47c8      	blx	r9
 800447c:	3001      	adds	r0, #1
 800447e:	d103      	bne.n	8004488 <_printf_common+0xac>
 8004480:	f04f 30ff 	mov.w	r0, #4294967295
 8004484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004488:	3501      	adds	r5, #1
 800448a:	e7c6      	b.n	800441a <_printf_common+0x3e>
 800448c:	18e1      	adds	r1, r4, r3
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	2030      	movs	r0, #48	@ 0x30
 8004492:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004496:	4422      	add	r2, r4
 8004498:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800449c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044a0:	3302      	adds	r3, #2
 80044a2:	e7c7      	b.n	8004434 <_printf_common+0x58>
 80044a4:	2301      	movs	r3, #1
 80044a6:	4622      	mov	r2, r4
 80044a8:	4641      	mov	r1, r8
 80044aa:	4638      	mov	r0, r7
 80044ac:	47c8      	blx	r9
 80044ae:	3001      	adds	r0, #1
 80044b0:	d0e6      	beq.n	8004480 <_printf_common+0xa4>
 80044b2:	3601      	adds	r6, #1
 80044b4:	e7d9      	b.n	800446a <_printf_common+0x8e>
	...

080044b8 <_printf_i>:
 80044b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044bc:	7e0f      	ldrb	r7, [r1, #24]
 80044be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044c0:	2f78      	cmp	r7, #120	@ 0x78
 80044c2:	4691      	mov	r9, r2
 80044c4:	4680      	mov	r8, r0
 80044c6:	460c      	mov	r4, r1
 80044c8:	469a      	mov	sl, r3
 80044ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044ce:	d807      	bhi.n	80044e0 <_printf_i+0x28>
 80044d0:	2f62      	cmp	r7, #98	@ 0x62
 80044d2:	d80a      	bhi.n	80044ea <_printf_i+0x32>
 80044d4:	2f00      	cmp	r7, #0
 80044d6:	f000 80d1 	beq.w	800467c <_printf_i+0x1c4>
 80044da:	2f58      	cmp	r7, #88	@ 0x58
 80044dc:	f000 80b8 	beq.w	8004650 <_printf_i+0x198>
 80044e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044e8:	e03a      	b.n	8004560 <_printf_i+0xa8>
 80044ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044ee:	2b15      	cmp	r3, #21
 80044f0:	d8f6      	bhi.n	80044e0 <_printf_i+0x28>
 80044f2:	a101      	add	r1, pc, #4	@ (adr r1, 80044f8 <_printf_i+0x40>)
 80044f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044f8:	08004551 	.word	0x08004551
 80044fc:	08004565 	.word	0x08004565
 8004500:	080044e1 	.word	0x080044e1
 8004504:	080044e1 	.word	0x080044e1
 8004508:	080044e1 	.word	0x080044e1
 800450c:	080044e1 	.word	0x080044e1
 8004510:	08004565 	.word	0x08004565
 8004514:	080044e1 	.word	0x080044e1
 8004518:	080044e1 	.word	0x080044e1
 800451c:	080044e1 	.word	0x080044e1
 8004520:	080044e1 	.word	0x080044e1
 8004524:	08004663 	.word	0x08004663
 8004528:	0800458f 	.word	0x0800458f
 800452c:	0800461d 	.word	0x0800461d
 8004530:	080044e1 	.word	0x080044e1
 8004534:	080044e1 	.word	0x080044e1
 8004538:	08004685 	.word	0x08004685
 800453c:	080044e1 	.word	0x080044e1
 8004540:	0800458f 	.word	0x0800458f
 8004544:	080044e1 	.word	0x080044e1
 8004548:	080044e1 	.word	0x080044e1
 800454c:	08004625 	.word	0x08004625
 8004550:	6833      	ldr	r3, [r6, #0]
 8004552:	1d1a      	adds	r2, r3, #4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6032      	str	r2, [r6, #0]
 8004558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800455c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004560:	2301      	movs	r3, #1
 8004562:	e09c      	b.n	800469e <_printf_i+0x1e6>
 8004564:	6833      	ldr	r3, [r6, #0]
 8004566:	6820      	ldr	r0, [r4, #0]
 8004568:	1d19      	adds	r1, r3, #4
 800456a:	6031      	str	r1, [r6, #0]
 800456c:	0606      	lsls	r6, r0, #24
 800456e:	d501      	bpl.n	8004574 <_printf_i+0xbc>
 8004570:	681d      	ldr	r5, [r3, #0]
 8004572:	e003      	b.n	800457c <_printf_i+0xc4>
 8004574:	0645      	lsls	r5, r0, #25
 8004576:	d5fb      	bpl.n	8004570 <_printf_i+0xb8>
 8004578:	f9b3 5000 	ldrsh.w	r5, [r3]
 800457c:	2d00      	cmp	r5, #0
 800457e:	da03      	bge.n	8004588 <_printf_i+0xd0>
 8004580:	232d      	movs	r3, #45	@ 0x2d
 8004582:	426d      	negs	r5, r5
 8004584:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004588:	4858      	ldr	r0, [pc, #352]	@ (80046ec <_printf_i+0x234>)
 800458a:	230a      	movs	r3, #10
 800458c:	e011      	b.n	80045b2 <_printf_i+0xfa>
 800458e:	6821      	ldr	r1, [r4, #0]
 8004590:	6833      	ldr	r3, [r6, #0]
 8004592:	0608      	lsls	r0, r1, #24
 8004594:	f853 5b04 	ldr.w	r5, [r3], #4
 8004598:	d402      	bmi.n	80045a0 <_printf_i+0xe8>
 800459a:	0649      	lsls	r1, r1, #25
 800459c:	bf48      	it	mi
 800459e:	b2ad      	uxthmi	r5, r5
 80045a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80045a2:	4852      	ldr	r0, [pc, #328]	@ (80046ec <_printf_i+0x234>)
 80045a4:	6033      	str	r3, [r6, #0]
 80045a6:	bf14      	ite	ne
 80045a8:	230a      	movne	r3, #10
 80045aa:	2308      	moveq	r3, #8
 80045ac:	2100      	movs	r1, #0
 80045ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045b2:	6866      	ldr	r6, [r4, #4]
 80045b4:	60a6      	str	r6, [r4, #8]
 80045b6:	2e00      	cmp	r6, #0
 80045b8:	db05      	blt.n	80045c6 <_printf_i+0x10e>
 80045ba:	6821      	ldr	r1, [r4, #0]
 80045bc:	432e      	orrs	r6, r5
 80045be:	f021 0104 	bic.w	r1, r1, #4
 80045c2:	6021      	str	r1, [r4, #0]
 80045c4:	d04b      	beq.n	800465e <_printf_i+0x1a6>
 80045c6:	4616      	mov	r6, r2
 80045c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80045cc:	fb03 5711 	mls	r7, r3, r1, r5
 80045d0:	5dc7      	ldrb	r7, [r0, r7]
 80045d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045d6:	462f      	mov	r7, r5
 80045d8:	42bb      	cmp	r3, r7
 80045da:	460d      	mov	r5, r1
 80045dc:	d9f4      	bls.n	80045c8 <_printf_i+0x110>
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d10b      	bne.n	80045fa <_printf_i+0x142>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	07df      	lsls	r7, r3, #31
 80045e6:	d508      	bpl.n	80045fa <_printf_i+0x142>
 80045e8:	6923      	ldr	r3, [r4, #16]
 80045ea:	6861      	ldr	r1, [r4, #4]
 80045ec:	4299      	cmp	r1, r3
 80045ee:	bfde      	ittt	le
 80045f0:	2330      	movle	r3, #48	@ 0x30
 80045f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045fa:	1b92      	subs	r2, r2, r6
 80045fc:	6122      	str	r2, [r4, #16]
 80045fe:	f8cd a000 	str.w	sl, [sp]
 8004602:	464b      	mov	r3, r9
 8004604:	aa03      	add	r2, sp, #12
 8004606:	4621      	mov	r1, r4
 8004608:	4640      	mov	r0, r8
 800460a:	f7ff fee7 	bl	80043dc <_printf_common>
 800460e:	3001      	adds	r0, #1
 8004610:	d14a      	bne.n	80046a8 <_printf_i+0x1f0>
 8004612:	f04f 30ff 	mov.w	r0, #4294967295
 8004616:	b004      	add	sp, #16
 8004618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	f043 0320 	orr.w	r3, r3, #32
 8004622:	6023      	str	r3, [r4, #0]
 8004624:	4832      	ldr	r0, [pc, #200]	@ (80046f0 <_printf_i+0x238>)
 8004626:	2778      	movs	r7, #120	@ 0x78
 8004628:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	6831      	ldr	r1, [r6, #0]
 8004630:	061f      	lsls	r7, r3, #24
 8004632:	f851 5b04 	ldr.w	r5, [r1], #4
 8004636:	d402      	bmi.n	800463e <_printf_i+0x186>
 8004638:	065f      	lsls	r7, r3, #25
 800463a:	bf48      	it	mi
 800463c:	b2ad      	uxthmi	r5, r5
 800463e:	6031      	str	r1, [r6, #0]
 8004640:	07d9      	lsls	r1, r3, #31
 8004642:	bf44      	itt	mi
 8004644:	f043 0320 	orrmi.w	r3, r3, #32
 8004648:	6023      	strmi	r3, [r4, #0]
 800464a:	b11d      	cbz	r5, 8004654 <_printf_i+0x19c>
 800464c:	2310      	movs	r3, #16
 800464e:	e7ad      	b.n	80045ac <_printf_i+0xf4>
 8004650:	4826      	ldr	r0, [pc, #152]	@ (80046ec <_printf_i+0x234>)
 8004652:	e7e9      	b.n	8004628 <_printf_i+0x170>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	f023 0320 	bic.w	r3, r3, #32
 800465a:	6023      	str	r3, [r4, #0]
 800465c:	e7f6      	b.n	800464c <_printf_i+0x194>
 800465e:	4616      	mov	r6, r2
 8004660:	e7bd      	b.n	80045de <_printf_i+0x126>
 8004662:	6833      	ldr	r3, [r6, #0]
 8004664:	6825      	ldr	r5, [r4, #0]
 8004666:	6961      	ldr	r1, [r4, #20]
 8004668:	1d18      	adds	r0, r3, #4
 800466a:	6030      	str	r0, [r6, #0]
 800466c:	062e      	lsls	r6, r5, #24
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	d501      	bpl.n	8004676 <_printf_i+0x1be>
 8004672:	6019      	str	r1, [r3, #0]
 8004674:	e002      	b.n	800467c <_printf_i+0x1c4>
 8004676:	0668      	lsls	r0, r5, #25
 8004678:	d5fb      	bpl.n	8004672 <_printf_i+0x1ba>
 800467a:	8019      	strh	r1, [r3, #0]
 800467c:	2300      	movs	r3, #0
 800467e:	6123      	str	r3, [r4, #16]
 8004680:	4616      	mov	r6, r2
 8004682:	e7bc      	b.n	80045fe <_printf_i+0x146>
 8004684:	6833      	ldr	r3, [r6, #0]
 8004686:	1d1a      	adds	r2, r3, #4
 8004688:	6032      	str	r2, [r6, #0]
 800468a:	681e      	ldr	r6, [r3, #0]
 800468c:	6862      	ldr	r2, [r4, #4]
 800468e:	2100      	movs	r1, #0
 8004690:	4630      	mov	r0, r6
 8004692:	f7fb fdad 	bl	80001f0 <memchr>
 8004696:	b108      	cbz	r0, 800469c <_printf_i+0x1e4>
 8004698:	1b80      	subs	r0, r0, r6
 800469a:	6060      	str	r0, [r4, #4]
 800469c:	6863      	ldr	r3, [r4, #4]
 800469e:	6123      	str	r3, [r4, #16]
 80046a0:	2300      	movs	r3, #0
 80046a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046a6:	e7aa      	b.n	80045fe <_printf_i+0x146>
 80046a8:	6923      	ldr	r3, [r4, #16]
 80046aa:	4632      	mov	r2, r6
 80046ac:	4649      	mov	r1, r9
 80046ae:	4640      	mov	r0, r8
 80046b0:	47d0      	blx	sl
 80046b2:	3001      	adds	r0, #1
 80046b4:	d0ad      	beq.n	8004612 <_printf_i+0x15a>
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	079b      	lsls	r3, r3, #30
 80046ba:	d413      	bmi.n	80046e4 <_printf_i+0x22c>
 80046bc:	68e0      	ldr	r0, [r4, #12]
 80046be:	9b03      	ldr	r3, [sp, #12]
 80046c0:	4298      	cmp	r0, r3
 80046c2:	bfb8      	it	lt
 80046c4:	4618      	movlt	r0, r3
 80046c6:	e7a6      	b.n	8004616 <_printf_i+0x15e>
 80046c8:	2301      	movs	r3, #1
 80046ca:	4632      	mov	r2, r6
 80046cc:	4649      	mov	r1, r9
 80046ce:	4640      	mov	r0, r8
 80046d0:	47d0      	blx	sl
 80046d2:	3001      	adds	r0, #1
 80046d4:	d09d      	beq.n	8004612 <_printf_i+0x15a>
 80046d6:	3501      	adds	r5, #1
 80046d8:	68e3      	ldr	r3, [r4, #12]
 80046da:	9903      	ldr	r1, [sp, #12]
 80046dc:	1a5b      	subs	r3, r3, r1
 80046de:	42ab      	cmp	r3, r5
 80046e0:	dcf2      	bgt.n	80046c8 <_printf_i+0x210>
 80046e2:	e7eb      	b.n	80046bc <_printf_i+0x204>
 80046e4:	2500      	movs	r5, #0
 80046e6:	f104 0619 	add.w	r6, r4, #25
 80046ea:	e7f5      	b.n	80046d8 <_printf_i+0x220>
 80046ec:	080048ad 	.word	0x080048ad
 80046f0:	080048be 	.word	0x080048be

080046f4 <memmove>:
 80046f4:	4288      	cmp	r0, r1
 80046f6:	b510      	push	{r4, lr}
 80046f8:	eb01 0402 	add.w	r4, r1, r2
 80046fc:	d902      	bls.n	8004704 <memmove+0x10>
 80046fe:	4284      	cmp	r4, r0
 8004700:	4623      	mov	r3, r4
 8004702:	d807      	bhi.n	8004714 <memmove+0x20>
 8004704:	1e43      	subs	r3, r0, #1
 8004706:	42a1      	cmp	r1, r4
 8004708:	d008      	beq.n	800471c <memmove+0x28>
 800470a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800470e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004712:	e7f8      	b.n	8004706 <memmove+0x12>
 8004714:	4402      	add	r2, r0
 8004716:	4601      	mov	r1, r0
 8004718:	428a      	cmp	r2, r1
 800471a:	d100      	bne.n	800471e <memmove+0x2a>
 800471c:	bd10      	pop	{r4, pc}
 800471e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004726:	e7f7      	b.n	8004718 <memmove+0x24>

08004728 <_sbrk_r>:
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	4d06      	ldr	r5, [pc, #24]	@ (8004744 <_sbrk_r+0x1c>)
 800472c:	2300      	movs	r3, #0
 800472e:	4604      	mov	r4, r0
 8004730:	4608      	mov	r0, r1
 8004732:	602b      	str	r3, [r5, #0]
 8004734:	f7fc fcb2 	bl	800109c <_sbrk>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	d102      	bne.n	8004742 <_sbrk_r+0x1a>
 800473c:	682b      	ldr	r3, [r5, #0]
 800473e:	b103      	cbz	r3, 8004742 <_sbrk_r+0x1a>
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	bd38      	pop	{r3, r4, r5, pc}
 8004744:	20000338 	.word	0x20000338

08004748 <memcpy>:
 8004748:	440a      	add	r2, r1
 800474a:	4291      	cmp	r1, r2
 800474c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004750:	d100      	bne.n	8004754 <memcpy+0xc>
 8004752:	4770      	bx	lr
 8004754:	b510      	push	{r4, lr}
 8004756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800475a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800475e:	4291      	cmp	r1, r2
 8004760:	d1f9      	bne.n	8004756 <memcpy+0xe>
 8004762:	bd10      	pop	{r4, pc}

08004764 <_realloc_r>:
 8004764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004768:	4607      	mov	r7, r0
 800476a:	4614      	mov	r4, r2
 800476c:	460d      	mov	r5, r1
 800476e:	b921      	cbnz	r1, 800477a <_realloc_r+0x16>
 8004770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004774:	4611      	mov	r1, r2
 8004776:	f7ff bc4d 	b.w	8004014 <_malloc_r>
 800477a:	b92a      	cbnz	r2, 8004788 <_realloc_r+0x24>
 800477c:	f7ff fbde 	bl	8003f3c <_free_r>
 8004780:	4625      	mov	r5, r4
 8004782:	4628      	mov	r0, r5
 8004784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004788:	f000 f81a 	bl	80047c0 <_malloc_usable_size_r>
 800478c:	4284      	cmp	r4, r0
 800478e:	4606      	mov	r6, r0
 8004790:	d802      	bhi.n	8004798 <_realloc_r+0x34>
 8004792:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004796:	d8f4      	bhi.n	8004782 <_realloc_r+0x1e>
 8004798:	4621      	mov	r1, r4
 800479a:	4638      	mov	r0, r7
 800479c:	f7ff fc3a 	bl	8004014 <_malloc_r>
 80047a0:	4680      	mov	r8, r0
 80047a2:	b908      	cbnz	r0, 80047a8 <_realloc_r+0x44>
 80047a4:	4645      	mov	r5, r8
 80047a6:	e7ec      	b.n	8004782 <_realloc_r+0x1e>
 80047a8:	42b4      	cmp	r4, r6
 80047aa:	4622      	mov	r2, r4
 80047ac:	4629      	mov	r1, r5
 80047ae:	bf28      	it	cs
 80047b0:	4632      	movcs	r2, r6
 80047b2:	f7ff ffc9 	bl	8004748 <memcpy>
 80047b6:	4629      	mov	r1, r5
 80047b8:	4638      	mov	r0, r7
 80047ba:	f7ff fbbf 	bl	8003f3c <_free_r>
 80047be:	e7f1      	b.n	80047a4 <_realloc_r+0x40>

080047c0 <_malloc_usable_size_r>:
 80047c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047c4:	1f18      	subs	r0, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	bfbc      	itt	lt
 80047ca:	580b      	ldrlt	r3, [r1, r0]
 80047cc:	18c0      	addlt	r0, r0, r3
 80047ce:	4770      	bx	lr

080047d0 <_init>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr

080047dc <_fini>:
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	bf00      	nop
 80047e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e2:	bc08      	pop	{r3}
 80047e4:	469e      	mov	lr, r3
 80047e6:	4770      	bx	lr
