
jesman_rc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000432c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080044cc  080044cc  000054cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045b4  080045b4  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080045b4  080045b4  000055b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045bc  080045bc  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045bc  080045bc  000055bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045c0  080045c0  000055c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080045c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000060  08004624  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08004624  00006348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7bd  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002120  00000000  00000000  0001184d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000000ce  00000000  00000000  0001396d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  00013a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d3  00000000  00000000  00014470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001735b  00000000  00000000  00014c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce95  00000000  00000000  0002bf9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092453  00000000  00000000  00038e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cb286  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d78  00000000  00000000  000cb2cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  000ce044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080044b4 	.word	0x080044b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080044b4 	.word	0x080044b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <map>:
void MX_ADC1_Init(void);
void MX_USART1_UART_Init(void);


uint16_t map(uint16_t value, uint16_t fromLow, uint16_t fromHigh, uint16_t toLow, uint16_t toHigh){
	return (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow;
 80005bc:	1a40      	subs	r0, r0, r1
 80005be:	f8bd c000 	ldrh.w	ip, [sp]
 80005c2:	ebac 0c03 	sub.w	ip, ip, r3
 80005c6:	fb0c f000 	mul.w	r0, ip, r0
 80005ca:	1a52      	subs	r2, r2, r1
 80005cc:	fb90 f0f2 	sdiv	r0, r0, r2
 80005d0:	4418      	add	r0, r3
}
 80005d2:	b280      	uxth	r0, r0
 80005d4:	4770      	bx	lr
	...

080005d8 <mapping_adc>:
*/

/**
 * @brief Maps values from 0-4095 to 192-1792(suited range for SBUS)
 */
void mapping_adc(){
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	b083      	sub	sp, #12
	joystick_arr_[0][0] = map(joystick_arr[0], 0, 4095, 192, 1792)+errors[0];
 80005dc:	4e0e      	ldr	r6, [pc, #56]	@ (8000618 <mapping_adc+0x40>)
 80005de:	f44f 67e0 	mov.w	r7, #1792	@ 0x700
 80005e2:	9700      	str	r7, [sp, #0]
 80005e4:	23c0      	movs	r3, #192	@ 0xc0
 80005e6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80005ea:	2100      	movs	r1, #0
 80005ec:	8830      	ldrh	r0, [r6, #0]
 80005ee:	f7ff ffe5 	bl	80005bc <map>
 80005f2:	4d0a      	ldr	r5, [pc, #40]	@ (800061c <mapping_adc+0x44>)
 80005f4:	882b      	ldrh	r3, [r5, #0]
 80005f6:	4418      	add	r0, r3
 80005f8:	4c09      	ldr	r4, [pc, #36]	@ (8000620 <mapping_adc+0x48>)
 80005fa:	8020      	strh	r0, [r4, #0]
	joystick_arr_[0][1] = map(joystick_arr[1], 4095, 0, 192, 1792)+errors[1];
 80005fc:	9700      	str	r7, [sp, #0]
 80005fe:	23c0      	movs	r3, #192	@ 0xc0
 8000600:	2200      	movs	r2, #0
 8000602:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8000606:	8870      	ldrh	r0, [r6, #2]
 8000608:	f7ff ffd8 	bl	80005bc <map>
 800060c:	886b      	ldrh	r3, [r5, #2]
 800060e:	4418      	add	r0, r3
 8000610:	8060      	strh	r0, [r4, #2]
}
 8000612:	b003      	add	sp, #12
 8000614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000616:	bf00      	nop
 8000618:	20000170 	.word	0x20000170
 800061c:	200001d4 	.word	0x200001d4
 8000620:	20000174 	.word	0x20000174

08000624 <channels_>:

/**
 * @brief Mapping adc values (x and y of joystick) to channels, packed in 11 bits
 */
void channels_(){
	channels[0] = (joystick_arr_[0][0]& 0x07FF); //Roll
 8000624:	4905      	ldr	r1, [pc, #20]	@ (800063c <channels_+0x18>)
 8000626:	880b      	ldrh	r3, [r1, #0]
 8000628:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800062c:	4a04      	ldr	r2, [pc, #16]	@ (8000640 <channels_+0x1c>)
 800062e:	8013      	strh	r3, [r2, #0]
	channels[1] = (joystick_arr_[0][1]& 0x07FF); //Pitch
 8000630:	884b      	ldrh	r3, [r1, #2]
 8000632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000636:	8053      	strh	r3, [r2, #2]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000174 	.word	0x20000174
 8000640:	20000198 	.word	0x20000198

08000644 <sbus_packet>:
}
*/

// Refer to this
void sbus_packet() {
    memset(packet, 0, sizeof(packet));
 8000644:	4b3d      	ldr	r3, [pc, #244]	@ (800073c <sbus_packet+0xf8>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]
 8000652:	615a      	str	r2, [r3, #20]
 8000654:	761a      	strb	r2, [r3, #24]
    packet[0] = 0x0F;
 8000656:	220f      	movs	r2, #15
 8000658:	701a      	strb	r2, [r3, #0]
    packet[1] = (uint8_t) ((channels[0] & 0x07FF));
 800065a:	4a39      	ldr	r2, [pc, #228]	@ (8000740 <sbus_packet+0xfc>)
 800065c:	8811      	ldrh	r1, [r2, #0]
 800065e:	7059      	strb	r1, [r3, #1]
    packet[2] = (uint8_t) ((channels[0] & 0x07FF)>>8 | (channels[1] & 0x07FF)<<3);
 8000660:	8850      	ldrh	r0, [r2, #2]
 8000662:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8000666:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 800066a:	7099      	strb	r1, [r3, #2]
    packet[3] = (uint8_t) ((channels[1] & 0x07FF)>>5 | (channels[2] & 0x07FF)<<6);
 800066c:	8891      	ldrh	r1, [r2, #4]
 800066e:	f3c0 1045 	ubfx	r0, r0, #5, #6
 8000672:	ea40 1081 	orr.w	r0, r0, r1, lsl #6
 8000676:	70d8      	strb	r0, [r3, #3]
    packet[4] = (uint8_t) ((channels[2] & 0x07FF)>>2);
 8000678:	f3c1 0087 	ubfx	r0, r1, #2, #8
 800067c:	7118      	strb	r0, [r3, #4]
    packet[5] = (uint8_t) ((channels[2] & 0x07FF)>>10 | (channels[3] & 0x07FF)<<1);
 800067e:	f8b2 c006 	ldrh.w	ip, [r2, #6]
 8000682:	f3c1 2180 	ubfx	r1, r1, #10, #1
 8000686:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
 800068a:	7159      	strb	r1, [r3, #5]
    packet[6] = (uint8_t) ((channels[3] & 0x07FF)>>7 | (channels[4] & 0x07FF)<<4);
 800068c:	8910      	ldrh	r0, [r2, #8]
 800068e:	f3cc 1cc3 	ubfx	ip, ip, #7, #4
 8000692:	ea4c 1c00 	orr.w	ip, ip, r0, lsl #4
 8000696:	f883 c006 	strb.w	ip, [r3, #6]
    packet[7] = (uint8_t) ((channels[4] & 0x07FF)>>4 | (channels[5] & 0x07FF)<<7);
 800069a:	8951      	ldrh	r1, [r2, #10]
 800069c:	f3c0 1006 	ubfx	r0, r0, #4, #7
 80006a0:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 80006a4:	71d8      	strb	r0, [r3, #7]
    packet[8] = (uint8_t) ((channels[5] & 0x07FF)>>1);
 80006a6:	f3c1 0047 	ubfx	r0, r1, #1, #8
 80006aa:	7218      	strb	r0, [r3, #8]
    packet[9] = (uint8_t) ((channels[5] & 0x07FF)>>9 | (channels[6] & 0x07FF)<<2);
 80006ac:	8990      	ldrh	r0, [r2, #12]
 80006ae:	f3c1 2141 	ubfx	r1, r1, #9, #2
 80006b2:	ea41 0180 	orr.w	r1, r1, r0, lsl #2
 80006b6:	7259      	strb	r1, [r3, #9]
    packet[10] = (uint8_t) ((channels[6] & 0x07FF)>>6 | (channels[7] & 0x07FF)<<5);
 80006b8:	89d1      	ldrh	r1, [r2, #14]
 80006ba:	f3c0 1084 	ubfx	r0, r0, #6, #5
 80006be:	ea40 1041 	orr.w	r0, r0, r1, lsl #5
 80006c2:	7298      	strb	r0, [r3, #10]
    packet[11] = (uint8_t) ((channels[7] & 0x07FF)>>3);
 80006c4:	f3c1 01c7 	ubfx	r1, r1, #3, #8
 80006c8:	72d9      	strb	r1, [r3, #11]
    packet[12] = (uint8_t) ((channels[8] & 0x07FF));
 80006ca:	8a11      	ldrh	r1, [r2, #16]
 80006cc:	7319      	strb	r1, [r3, #12]
    packet[13] = (uint8_t) ((channels[8] & 0x07FF)>>8 | (channels[9] & 0x07FF)<<3);
 80006ce:	8a50      	ldrh	r0, [r2, #18]
 80006d0:	f3c1 2102 	ubfx	r1, r1, #8, #3
 80006d4:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 80006d8:	7359      	strb	r1, [r3, #13]
    packet[14] = (uint8_t) ((channels[9] & 0x07FF)>>5 | (channels[10] & 0x07FF)<<6);
 80006da:	8a91      	ldrh	r1, [r2, #20]
 80006dc:	f3c0 1045 	ubfx	r0, r0, #5, #6
 80006e0:	ea40 1081 	orr.w	r0, r0, r1, lsl #6
 80006e4:	7398      	strb	r0, [r3, #14]
    packet[15] = (uint8_t) ((channels[10] & 0x07FF)>>2);
 80006e6:	f3c1 0087 	ubfx	r0, r1, #2, #8
 80006ea:	73d8      	strb	r0, [r3, #15]
    packet[16] = (uint8_t) ((channels[10] & 0x07FF)>>10 | (channels[11] & 0x07FF)<<1);
 80006ec:	f8b2 c016 	ldrh.w	ip, [r2, #22]
 80006f0:	f3c1 2180 	ubfx	r1, r1, #10, #1
 80006f4:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
 80006f8:	7419      	strb	r1, [r3, #16]
    packet[17] = (uint8_t) ((channels[11] & 0x07FF)>>7 | (channels[12] & 0x07FF)<<4);
 80006fa:	8b10      	ldrh	r0, [r2, #24]
 80006fc:	f3cc 1cc3 	ubfx	ip, ip, #7, #4
 8000700:	ea4c 1c00 	orr.w	ip, ip, r0, lsl #4
 8000704:	f883 c011 	strb.w	ip, [r3, #17]
    packet[18] = (uint8_t) ((channels[12] & 0x07FF)>>4 | (channels[13] & 0x07FF)<<7);
 8000708:	8b51      	ldrh	r1, [r2, #26]
 800070a:	f3c0 1006 	ubfx	r0, r0, #4, #7
 800070e:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 8000712:	7498      	strb	r0, [r3, #18]
    packet[19] = (uint8_t) ((channels[13] & 0x07FF)>>1);
 8000714:	f3c1 0047 	ubfx	r0, r1, #1, #8
 8000718:	74d8      	strb	r0, [r3, #19]
    packet[20] = (uint8_t) ((channels[13] & 0x07FF)>>9 | (channels[14] & 0x07FF)<<2);
 800071a:	8b90      	ldrh	r0, [r2, #28]
 800071c:	f3c1 2141 	ubfx	r1, r1, #9, #2
 8000720:	ea41 0180 	orr.w	r1, r1, r0, lsl #2
 8000724:	7519      	strb	r1, [r3, #20]
    packet[21] = (uint8_t) ((channels[14] & 0x07FF)>>6 | (channels[15] & 0x07FF)<<5);
 8000726:	8bd2      	ldrh	r2, [r2, #30]
 8000728:	f3c0 1084 	ubfx	r0, r0, #6, #5
 800072c:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
 8000730:	7558      	strb	r0, [r3, #21]
    packet[22] = (uint8_t) ((channels[15] & 0x07FF)>>3);
 8000732:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8000736:	759a      	strb	r2, [r3, #22]
    packet[23] = 0x00;
    packet[24] = 0x00;
}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	200001b8 	.word	0x200001b8
 8000740:	20000198 	.word	0x20000198

08000744 <flash_write>:

/**
 * @brief Write the error offset to flash so that if calibration is choosen not to be done after another power cycle, then the error offset stored in flash can be used
 */
void flash_write(){
 8000744:	b538      	push	{r3, r4, r5, lr}
	HAL_FLASH_Unlock();
 8000746:	f001 fe21 	bl	800238c <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(FLASH_SECTOR_6,FLASH_VOLTAGE_RANGE_3);
 800074a:	2102      	movs	r1, #2
 800074c:	2006      	movs	r0, #6
 800074e:	f001 ff8f 	bl	8002670 <FLASH_Erase_Sector>
	for(uint8_t i = 0; i < 2; i++, addr++){
 8000752:	2400      	movs	r4, #0
 8000754:	e00d      	b.n	8000772 <flash_write+0x2e>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr, errors[i]);
 8000756:	4d09      	ldr	r5, [pc, #36]	@ (800077c <flash_write+0x38>)
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <flash_write+0x3c>)
 800075a:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 800075e:	2300      	movs	r3, #0
 8000760:	6829      	ldr	r1, [r5, #0]
 8000762:	2001      	movs	r0, #1
 8000764:	f001 fdc0 	bl	80022e8 <HAL_FLASH_Program>
	for(uint8_t i = 0; i < 2; i++, addr++){
 8000768:	3401      	adds	r4, #1
 800076a:	b2e4      	uxtb	r4, r4
 800076c:	682b      	ldr	r3, [r5, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	602b      	str	r3, [r5, #0]
 8000772:	2c01      	cmp	r4, #1
 8000774:	d9ef      	bls.n	8000756 <flash_write+0x12>
		}
	HAL_FLASH_Lock();
 8000776:	f001 fe2b 	bl	80023d0 <HAL_FLASH_Lock>
}
 800077a:	bd38      	pop	{r3, r4, r5, pc}
 800077c:	20000000 	.word	0x20000000
 8000780:	200001d4 	.word	0x200001d4

08000784 <flash_read>:

/**
 * @brief Read the error offset stored flash
 */
void flash_read(void) {
    for (uint8_t i = 0; i < 2; i++, addr++) {
 8000784:	2300      	movs	r3, #0
 8000786:	e009      	b.n	800079c <flash_read+0x18>
    	errors[i] = *(volatile uint16_t*)(addr);
 8000788:	4906      	ldr	r1, [pc, #24]	@ (80007a4 <flash_read+0x20>)
 800078a:	680a      	ldr	r2, [r1, #0]
 800078c:	f832 cb01 	ldrh.w	ip, [r2], #1
 8000790:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <flash_read+0x24>)
 8000792:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
    for (uint8_t i = 0; i < 2; i++, addr++) {
 8000796:	3301      	adds	r3, #1
 8000798:	b2db      	uxtb	r3, r3
 800079a:	600a      	str	r2, [r1, #0]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d9f3      	bls.n	8000788 <flash_read+0x4>
    }
}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000000 	.word	0x20000000
 80007a8:	200001d4 	.word	0x200001d4

080007ac <joystick_calib>:

/**
 * @brief Calibration of the joystick
 * Center, low and high values are stored
 */
void joystick_calib(void) {
 80007ac:	b530      	push	{r4, r5, lr}
 80007ae:	b08d      	sub	sp, #52	@ 0x34
    char CALIB_MSG[32];
    const char* prompts[] = {
 80007b0:	4b23      	ldr	r3, [pc, #140]	@ (8000840 <joystick_calib+0x94>)
 80007b2:	466c      	mov	r4, sp
 80007b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        "Keep the joysticks at the center\r\n",
        "Keep the joysticks at the top\r\n",
        "Keep the joysticks at the bottom\r\n"
    };

    for (uint8_t pos = 0; pos < 3; ++pos) {
 80007ba:	2400      	movs	r4, #0
 80007bc:	e020      	b.n	8000800 <joystick_calib+0x54>
        HAL_Delay(100);

        memset(joystick_arr_calib, 0, sizeof(joystick_arr_calib));

        for (uint8_t i = 0; i < 100; i++) {
            joystick_arr_calib[0][0] += joystick_arr_[0][0];
 80007be:	4a21      	ldr	r2, [pc, #132]	@ (8000844 <joystick_calib+0x98>)
 80007c0:	6811      	ldr	r1, [r2, #0]
 80007c2:	4821      	ldr	r0, [pc, #132]	@ (8000848 <joystick_calib+0x9c>)
 80007c4:	f8b0 c000 	ldrh.w	ip, [r0]
 80007c8:	4461      	add	r1, ip
 80007ca:	6011      	str	r1, [r2, #0]
            joystick_arr_calib[0][1] += joystick_arr_[0][1];
 80007cc:	6851      	ldr	r1, [r2, #4]
 80007ce:	8840      	ldrh	r0, [r0, #2]
 80007d0:	4401      	add	r1, r0
 80007d2:	6051      	str	r1, [r2, #4]
        for (uint8_t i = 0; i < 100; i++) {
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b63      	cmp	r3, #99	@ 0x63
 80007da:	d9f0      	bls.n	80007be <joystick_calib+0x12>
            //joystick_arr_calib[1][0] += joystick_arr_[1][0];
            //joystick_arr_calib[1][1] += joystick_arr_[1][1];
        }

        joystick_arr_calib_[0][pos][0] = joystick_arr_calib[0][0] / 100;
 80007dc:	4819      	ldr	r0, [pc, #100]	@ (8000844 <joystick_calib+0x98>)
 80007de:	6803      	ldr	r3, [r0, #0]
 80007e0:	491a      	ldr	r1, [pc, #104]	@ (800084c <joystick_calib+0xa0>)
 80007e2:	fba1 2303 	umull	r2, r3, r1, r3
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	4a19      	ldr	r2, [pc, #100]	@ (8000850 <joystick_calib+0xa4>)
 80007ea:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
        joystick_arr_calib_[0][pos][1] = joystick_arr_calib[0][1] / 100;
 80007ee:	6843      	ldr	r3, [r0, #4]
 80007f0:	fba1 1303 	umull	r1, r3, r1, r3
 80007f4:	095b      	lsrs	r3, r3, #5
 80007f6:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80007fa:	6053      	str	r3, [r2, #4]
    for (uint8_t pos = 0; pos < 3; ++pos) {
 80007fc:	3401      	adds	r4, #1
 80007fe:	b2e4      	uxtb	r4, r4
 8000800:	2c02      	cmp	r4, #2
 8000802:	d81b      	bhi.n	800083c <joystick_calib+0x90>
        snprintf(CALIB_MSG, sizeof(CALIB_MSG), "%s", prompts[pos]);
 8000804:	4625      	mov	r5, r4
 8000806:	ab0c      	add	r3, sp, #48	@ 0x30
 8000808:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800080c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000810:	4a10      	ldr	r2, [pc, #64]	@ (8000854 <joystick_calib+0xa8>)
 8000812:	2120      	movs	r1, #32
 8000814:	a804      	add	r0, sp, #16
 8000816:	f003 f999 	bl	8003b4c <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)CALIB_MSG, strlen(CALIB_MSG), 100);
 800081a:	a804      	add	r0, sp, #16
 800081c:	f7ff fce0 	bl	80001e0 <strlen>
 8000820:	2364      	movs	r3, #100	@ 0x64
 8000822:	b282      	uxth	r2, r0
 8000824:	a904      	add	r1, sp, #16
 8000826:	480c      	ldr	r0, [pc, #48]	@ (8000858 <joystick_calib+0xac>)
 8000828:	f002 fdd5 	bl	80033d6 <HAL_UART_Transmit>
        HAL_Delay(100);
 800082c:	2064      	movs	r0, #100	@ 0x64
 800082e:	f000 fb8b 	bl	8000f48 <HAL_Delay>
        memset(joystick_arr_calib, 0, sizeof(joystick_arr_calib));
 8000832:	4a04      	ldr	r2, [pc, #16]	@ (8000844 <joystick_calib+0x98>)
 8000834:	2300      	movs	r3, #0
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	6053      	str	r3, [r2, #4]
        for (uint8_t i = 0; i < 100; i++) {
 800083a:	e7cd      	b.n	80007d8 <joystick_calib+0x2c>
        //joystick_arr_calib_[1][pos][0] = joystick_arr_calib[1][0] / 100;
        //joystick_arr_calib_[1][pos][1] = joystick_arr_calib[1][1] / 100;
    }
}
 800083c:	b00d      	add	sp, #52	@ 0x34
 800083e:	bd30      	pop	{r4, r5, pc}
 8000840:	080044cc 	.word	0x080044cc
 8000844:	20000178 	.word	0x20000178
 8000848:	20000174 	.word	0x20000174
 800084c:	51eb851f 	.word	0x51eb851f
 8000850:	20000180 	.word	0x20000180
 8000854:	080044dc 	.word	0x080044dc
 8000858:	20000124 	.word	0x20000124

0800085c <check_calib_button>:

/**
 * @brief Checks the state of a button, if pressed begins calibration of the joystick and calibration can only be done once a power cycle since:
 * calib_button_state determines if the button has been pressed once and doesn't allow the function to execute again as it gets negated in the condition to 0
 */
void check_calib_button(void) {
 800085c:	b508      	push	{r3, lr}
    if (HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin) == GPIO_PIN_SET && !calib_button_state) {
 800085e:	2110      	movs	r1, #16
 8000860:	4809      	ldr	r0, [pc, #36]	@ (8000888 <check_calib_button+0x2c>)
 8000862:	f002 f8d1 	bl	8002a08 <HAL_GPIO_ReadPin>
 8000866:	2801      	cmp	r0, #1
 8000868:	d000      	beq.n	800086c <check_calib_button+0x10>
        joystick_calib();
        flash_write();
        flash_read();
        calib_button_state = 1;
    }
}
 800086a:	bd08      	pop	{r3, pc}
    if (HAL_GPIO_ReadPin(CALIB_BUTTON_GPIO_Port, CALIB_BUTTON_Pin) == GPIO_PIN_SET && !calib_button_state) {
 800086c:	4b07      	ldr	r3, [pc, #28]	@ (800088c <check_calib_button+0x30>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d1fa      	bne.n	800086a <check_calib_button+0xe>
        joystick_calib();
 8000874:	f7ff ff9a 	bl	80007ac <joystick_calib>
        flash_write();
 8000878:	f7ff ff64 	bl	8000744 <flash_write>
        flash_read();
 800087c:	f7ff ff82 	bl	8000784 <flash_read>
        calib_button_state = 1;
 8000880:	4b02      	ldr	r3, [pc, #8]	@ (800088c <check_calib_button+0x30>)
 8000882:	2201      	movs	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
}
 8000886:	e7f0      	b.n	800086a <check_calib_button+0xe>
 8000888:	40020000 	.word	0x40020000
 800088c:	2000016c 	.word	0x2000016c

08000890 <main>:

int main(void) {
 8000890:	b508      	push	{r3, lr}
    HAL_Init();
 8000892:	f000 fae7 	bl	8000e64 <HAL_Init>
    SystemClock_Config();
 8000896:	f000 f82f 	bl	80008f8 <SystemClock_Config>
    MX_GPIO_Init();
 800089a:	f000 f90d 	bl	8000ab8 <MX_GPIO_Init>
    MX_DMA_Init();
 800089e:	f000 f8f1 	bl	8000a84 <MX_DMA_Init>
    MX_ADC1_Init();
 80008a2:	f000 f87d 	bl	80009a0 <MX_ADC1_Init>
    MX_USART1_UART_Init();
 80008a6:	f000 f8d3 	bl	8000a50 <MX_USART1_UART_Init>

    //ADC through DMA begins here
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)joystick_arr, sizeof(joystick_arr) / sizeof(joystick_arr[0]));
 80008aa:	2202      	movs	r2, #2
 80008ac:	490d      	ldr	r1, [pc, #52]	@ (80008e4 <main+0x54>)
 80008ae:	480e      	ldr	r0, [pc, #56]	@ (80008e8 <main+0x58>)
 80008b0:	f000 fcc2 	bl	8001238 <HAL_ADC_Start_DMA>
 80008b4:	e010      	b.n	80008d8 <main+0x48>
    while (1) {
		//Check if button to begin calibration is pressed or no, initially set to 0 since we want one calibration after each power cycle but not mandatory
    	if(!calib_button_state){
        check_calib_button();
 80008b6:	f7ff ffd1 	bl	800085c <check_calib_button>
    	}

    	mapping_adc(); //Maps to sbus range
 80008ba:	f7ff fe8d 	bl	80005d8 <mapping_adc>
    	channels_(); //ADC values into channels
 80008be:	f7ff feb1 	bl	8000624 <channels_>
    	sbus_packet(); //Packed for transmission
 80008c2:	f7ff febf 	bl	8000644 <sbus_packet>

        //snprintf(MSG, sizeof(MSG), "[X: %d, Y: %d]\r\n", joystick_arr_[0][0]+errors[0], joystick_arr_[0][1]+errors[1]);
        //snprintf(MSG2, sizeof(MSG2), "X2: %d, Y2: %d\r\n", joystick_arr_[1][0]+errorx2, joystick_arr_[1][1]+errory2);

        HAL_UART_Transmit(&huart1, (uint8_t*)packet, sizeof(packet)/sizeof(packet[0]), 100);
 80008c6:	2364      	movs	r3, #100	@ 0x64
 80008c8:	2219      	movs	r2, #25
 80008ca:	4908      	ldr	r1, [pc, #32]	@ (80008ec <main+0x5c>)
 80008cc:	4808      	ldr	r0, [pc, #32]	@ (80008f0 <main+0x60>)
 80008ce:	f002 fd82 	bl	80033d6 <HAL_UART_Transmit>
        HAL_Delay(100);
 80008d2:	2064      	movs	r0, #100	@ 0x64
 80008d4:	f000 fb38 	bl	8000f48 <HAL_Delay>
    	if(!calib_button_state){
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <main+0x64>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d0ea      	beq.n	80008b6 <main+0x26>
 80008e0:	e7eb      	b.n	80008ba <main+0x2a>
 80008e2:	bf00      	nop
 80008e4:	20000170 	.word	0x20000170
 80008e8:	2000007c 	.word	0x2000007c
 80008ec:	200001b8 	.word	0x200001b8
 80008f0:	20000124 	.word	0x20000124
 80008f4:	2000016c 	.word	0x2000016c

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b500      	push	{lr}
 80008fa:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fc:	2230      	movs	r2, #48	@ 0x30
 80008fe:	2100      	movs	r1, #0
 8000900:	a808      	add	r0, sp, #32
 8000902:	f003 f959 	bl	8003bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000906:	2300      	movs	r3, #0
 8000908:	9303      	str	r3, [sp, #12]
 800090a:	9304      	str	r3, [sp, #16]
 800090c:	9305      	str	r3, [sp, #20]
 800090e:	9306      	str	r3, [sp, #24]
 8000910:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	9301      	str	r3, [sp, #4]
 8000914:	4a20      	ldr	r2, [pc, #128]	@ (8000998 <SystemClock_Config+0xa0>)
 8000916:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000918:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800091c:	6411      	str	r1, [r2, #64]	@ 0x40
 800091e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000920:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000924:	9201      	str	r2, [sp, #4]
 8000926:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000928:	9302      	str	r3, [sp, #8]
 800092a:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <SystemClock_Config+0xa4>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800093a:	9302      	str	r3, [sp, #8]
 800093c:	9b02      	ldr	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800093e:	2301      	movs	r3, #1
 8000940:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000942:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000946:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000948:	2302      	movs	r3, #2
 800094a:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000950:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000952:	2219      	movs	r2, #25
 8000954:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000956:	22a8      	movs	r2, #168	@ 0xa8
 8000958:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800095a:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800095c:	2304      	movs	r3, #4
 800095e:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000960:	a808      	add	r0, sp, #32
 8000962:	f002 f869 	bl	8002a38 <HAL_RCC_OscConfig>
 8000966:	b990      	cbnz	r0, 800098e <SystemClock_Config+0x96>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000968:	230f      	movs	r3, #15
 800096a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096c:	2102      	movs	r1, #2
 800096e:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000974:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000978:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097a:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800097c:	a803      	add	r0, sp, #12
 800097e:	f002 fad3 	bl	8002f28 <HAL_RCC_ClockConfig>
 8000982:	b930      	cbnz	r0, 8000992 <SystemClock_Config+0x9a>
    Error_Handler();
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000984:	f002 fbb6 	bl	80030f4 <HAL_RCC_EnableCSS>
}
 8000988:	b015      	add	sp, #84	@ 0x54
 800098a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800098e:	f000 f8bf 	bl	8000b10 <Error_Handler>
    Error_Handler();
 8000992:	f000 f8bd 	bl	8000b10 <Error_Handler>
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000

080009a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 80009a0:	b500      	push	{lr}
 80009a2:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009a4:	2300      	movs	r3, #0
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	9301      	str	r3, [sp, #4]
 80009aa:	9302      	str	r3, [sp, #8]
 80009ac:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ae:	4825      	ldr	r0, [pc, #148]	@ (8000a44 <MX_ADC1_Init+0xa4>)
 80009b0:	4a25      	ldr	r2, [pc, #148]	@ (8000a48 <MX_ADC1_Init+0xa8>)
 80009b2:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009b8:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ba:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009bc:	2201      	movs	r2, #1
 80009be:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009c0:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c2:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c8:	4920      	ldr	r1, [pc, #128]	@ (8000a4c <MX_ADC1_Init+0xac>)
 80009ca:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009cc:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 4;
 80009ce:	2104      	movs	r1, #4
 80009d0:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009d2:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009d6:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d8:	f000 fada 	bl	8000f90 <HAL_ADC_Init>
 80009dc:	bb40      	cbnz	r0, 8000a30 <MX_ADC1_Init+0x90>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009de:	2300      	movs	r3, #0
 80009e0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80009e6:	2307      	movs	r3, #7
 80009e8:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ea:	4669      	mov	r1, sp
 80009ec:	4815      	ldr	r0, [pc, #84]	@ (8000a44 <MX_ADC1_Init+0xa4>)
 80009ee:	f000 fd3f 	bl	8001470 <HAL_ADC_ConfigChannel>
 80009f2:	b9f8      	cbnz	r0, 8000a34 <MX_ADC1_Init+0x94>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fc:	4669      	mov	r1, sp
 80009fe:	4811      	ldr	r0, [pc, #68]	@ (8000a44 <MX_ADC1_Init+0xa4>)
 8000a00:	f000 fd36 	bl	8001470 <HAL_ADC_ConfigChannel>
 8000a04:	b9c0      	cbnz	r0, 8000a38 <MX_ADC1_Init+0x98>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0e:	4669      	mov	r1, sp
 8000a10:	480c      	ldr	r0, [pc, #48]	@ (8000a44 <MX_ADC1_Init+0xa4>)
 8000a12:	f000 fd2d 	bl	8001470 <HAL_ADC_ConfigChannel>
 8000a16:	b988      	cbnz	r0, 8000a3c <MX_ADC1_Init+0x9c>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a20:	4669      	mov	r1, sp
 8000a22:	4808      	ldr	r0, [pc, #32]	@ (8000a44 <MX_ADC1_Init+0xa4>)
 8000a24:	f000 fd24 	bl	8001470 <HAL_ADC_ConfigChannel>
 8000a28:	b950      	cbnz	r0, 8000a40 <MX_ADC1_Init+0xa0>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a2a:	b005      	add	sp, #20
 8000a2c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000a30:	f000 f86e 	bl	8000b10 <Error_Handler>
    Error_Handler();
 8000a34:	f000 f86c 	bl	8000b10 <Error_Handler>
    Error_Handler();
 8000a38:	f000 f86a 	bl	8000b10 <Error_Handler>
    Error_Handler();
 8000a3c:	f000 f868 	bl	8000b10 <Error_Handler>
    Error_Handler();
 8000a40:	f000 f866 	bl	8000b10 <Error_Handler>
 8000a44:	2000007c 	.word	0x2000007c
 8000a48:	40012000 	.word	0x40012000
 8000a4c:	0f000001 	.word	0x0f000001

08000a50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000a50:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a52:	480a      	ldr	r0, [pc, #40]	@ (8000a7c <MX_USART1_UART_Init+0x2c>)
 8000a54:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <MX_USART1_UART_Init+0x30>)
 8000a56:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000a58:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000a5c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a62:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a64:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000a66:	2208      	movs	r2, #8
 8000a68:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6e:	f002 fc62 	bl	8003336 <HAL_UART_Init>
 8000a72:	b900      	cbnz	r0, 8000a76 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a74:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a76:	f000 f84b 	bl	8000b10 <Error_Handler>
 8000a7a:	bf00      	nop
 8000a7c:	20000124 	.word	0x20000124
 8000a80:	40011000 	.word	0x40011000

08000a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a84:	b500      	push	{lr}
 8000a86:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a88:	2100      	movs	r1, #0
 8000a8a:	9101      	str	r1, [sp, #4]
 8000a8c:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <MX_DMA_Init+0x30>)
 8000a8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a90:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000a94:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000aa0:	460a      	mov	r2, r1
 8000aa2:	2038      	movs	r0, #56	@ 0x38
 8000aa4:	f001 f879 	bl	8001b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000aa8:	2038      	movs	r0, #56	@ 0x38
 8000aaa:	f001 f892 	bl	8001bd2 <HAL_NVIC_EnableIRQ>

}
 8000aae:	b003      	add	sp, #12
 8000ab0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000ab8:	b500      	push	{lr}
 8000aba:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	2300      	movs	r3, #0
 8000abe:	9303      	str	r3, [sp, #12]
 8000ac0:	9304      	str	r3, [sp, #16]
 8000ac2:	9305      	str	r3, [sp, #20]
 8000ac4:	9306      	str	r3, [sp, #24]
 8000ac6:	9307      	str	r3, [sp, #28]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	4a0f      	ldr	r2, [pc, #60]	@ (8000b08 <MX_GPIO_Init+0x50>)
 8000acc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8000ace:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8000ad2:	6311      	str	r1, [r2, #48]	@ 0x30
 8000ad4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8000ad6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8000ada:	9101      	str	r1, [sp, #4]
 8000adc:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	9302      	str	r3, [sp, #8]
 8000ae0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	9302      	str	r3, [sp, #8]
 8000af0:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : CALIB_BUTTON_Pin */
  GPIO_InitStruct.Pin = CALIB_BUTTON_Pin;
 8000af2:	2310      	movs	r3, #16
 8000af4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000af6:	2302      	movs	r3, #2
 8000af8:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(CALIB_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000afa:	a903      	add	r1, sp, #12
 8000afc:	4803      	ldr	r0, [pc, #12]	@ (8000b0c <MX_GPIO_Init+0x54>)
 8000afe:	f001 fdff 	bl	8002700 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b02:	b009      	add	sp, #36	@ 0x24
 8000b04:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020000 	.word	0x40020000

08000b10 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <Error_Handler+0x2>

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	4a0f      	ldr	r2, [pc, #60]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3e:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800

08000b64 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	@ 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a33      	ldr	r2, [pc, #204]	@ (8000c50 <HAL_ADC_MspInit+0xec>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d15f      	bne.n	8000c46 <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b32      	ldr	r3, [pc, #200]	@ (8000c54 <HAL_ADC_MspInit+0xf0>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8e:	4a31      	ldr	r2, [pc, #196]	@ (8000c54 <HAL_ADC_MspInit+0xf0>)
 8000b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b96:	4b2f      	ldr	r3, [pc, #188]	@ (8000c54 <HAL_ADC_MspInit+0xf0>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c54 <HAL_ADC_MspInit+0xf0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a2a      	ldr	r2, [pc, #168]	@ (8000c54 <HAL_ADC_MspInit+0xf0>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b28      	ldr	r3, [pc, #160]	@ (8000c54 <HAL_ADC_MspInit+0xf0>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4821      	ldr	r0, [pc, #132]	@ (8000c58 <HAL_ADC_MspInit+0xf4>)
 8000bd2:	f001 fd95 	bl	8002700 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <HAL_ADC_MspInit+0xf8>)
 8000bd8:	4a21      	ldr	r2, [pc, #132]	@ (8000c60 <HAL_ADC_MspInit+0xfc>)
 8000bda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <HAL_ADC_MspInit+0xf8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <HAL_ADC_MspInit+0xf8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <HAL_ADC_MspInit+0xf8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bee:	4b1b      	ldr	r3, [pc, #108]	@ (8000c5c <HAL_ADC_MspInit+0xf8>)
 8000bf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bf4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <HAL_ADC_MspInit+0xf8>)
 8000bf8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bfc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <HAL_ADC_MspInit+0xf8>)
 8000c00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <HAL_ADC_MspInit+0xf8>)
 8000c08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c0c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <HAL_ADC_MspInit+0xf8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <HAL_ADC_MspInit+0xf8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c1a:	4810      	ldr	r0, [pc, #64]	@ (8000c5c <HAL_ADC_MspInit+0xf8>)
 8000c1c:	f000 fff4 	bl	8001c08 <HAL_DMA_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000c26:	f7ff ff73 	bl	8000b10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c5c <HAL_ADC_MspInit+0xf8>)
 8000c2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c30:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <HAL_ADC_MspInit+0xf8>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2101      	movs	r1, #1
 8000c3a:	2012      	movs	r0, #18
 8000c3c:	f000 ffad 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c40:	2012      	movs	r0, #18
 8000c42:	f000 ffc6 	bl	8001bd2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	@ 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40012000 	.word	0x40012000
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	200000c4 	.word	0x200000c4
 8000c60:	40026410 	.word	0x40026410

08000c64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	@ 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a19      	ldr	r2, [pc, #100]	@ (8000ce8 <HAL_UART_MspInit+0x84>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d12c      	bne.n	8000ce0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <HAL_UART_MspInit+0x88>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	4a17      	ldr	r2, [pc, #92]	@ (8000cec <HAL_UART_MspInit+0x88>)
 8000c90:	f043 0310 	orr.w	r3, r3, #16
 8000c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c96:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <HAL_UART_MspInit+0x88>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	f003 0310 	and.w	r3, r3, #16
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <HAL_UART_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a10      	ldr	r2, [pc, #64]	@ (8000cec <HAL_UART_MspInit+0x88>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <HAL_UART_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cbe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <HAL_UART_MspInit+0x8c>)
 8000cdc:	f001 fd10 	bl	8002700 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	@ 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000cf8:	f002 fb02 	bl	8003300 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <NMI_Handler+0x8>

08000d00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <MemManage_Handler+0x4>

08000d10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4e:	f000 f8db 	bl	8000f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d5c:	4802      	ldr	r0, [pc, #8]	@ (8000d68 <ADC_IRQHandler+0x10>)
 8000d5e:	f000 f95a 	bl	8001016 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2000007c 	.word	0x2000007c

08000d6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d70:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <DMA2_Stream0_IRQHandler+0x10>)
 8000d72:	f001 f84f 	bl	8001e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000c4 	.word	0x200000c4

08000d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d88:	4a14      	ldr	r2, [pc, #80]	@ (8000ddc <_sbrk+0x5c>)
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <_sbrk+0x60>)
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <_sbrk+0x64>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	@ (8000de8 <_sbrk+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da2:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d207      	bcs.n	8000dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db0:	f002 ff0a 	bl	8003bc8 <__errno>
 8000db4:	4603      	mov	r3, r0
 8000db6:	220c      	movs	r2, #12
 8000db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	e009      	b.n	8000dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <_sbrk+0x64>)
 8000dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20020000 	.word	0x20020000
 8000de0:	00000400 	.word	0x00000400
 8000de4:	200001d8 	.word	0x200001d8
 8000de8:	20000348 	.word	0x20000348

08000dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <SystemInit+0x20>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000df6:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <SystemInit+0x20>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e14:	f7ff ffea 	bl	8000dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e18:	480c      	ldr	r0, [pc, #48]	@ (8000e4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e1a:	490d      	ldr	r1, [pc, #52]	@ (8000e50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e30:	4c0a      	ldr	r4, [pc, #40]	@ (8000e5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f002 fec9 	bl	8003bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e42:	f7ff fd25 	bl	8000890 <main>
  bx  lr    
 8000e46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e54:	080045c4 	.word	0x080045c4
  ldr r2, =_sbss
 8000e58:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e5c:	20000348 	.word	0x20000348

08000e60 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <DMA1_Stream0_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea4 <HAL_Init+0x40>)
 8000e6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <HAL_Init+0x40>)
 8000e7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e80:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a07      	ldr	r2, [pc, #28]	@ (8000ea4 <HAL_Init+0x40>)
 8000e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 fe79 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e92:	200f      	movs	r0, #15
 8000e94:	f000 f808 	bl	8000ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e98:	f7ff fe3c 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023c00 	.word	0x40023c00

08000ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb0:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_InitTick+0x54>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <HAL_InitTick+0x58>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 fe91 	bl	8001bee <HAL_SYSTICK_Config>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00e      	b.n	8000ef4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b0f      	cmp	r3, #15
 8000eda:	d80a      	bhi.n	8000ef2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000edc:	2200      	movs	r2, #0
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f000 fe59 	bl	8001b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee8:	4a06      	ldr	r2, [pc, #24]	@ (8000f04 <HAL_InitTick+0x5c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e000      	b.n	8000ef4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000004 	.word	0x20000004
 8000f00:	2000000c 	.word	0x2000000c
 8000f04:	20000008 	.word	0x20000008

08000f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_IncTick+0x20>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_IncTick+0x24>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a04      	ldr	r2, [pc, #16]	@ (8000f2c <HAL_IncTick+0x24>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	2000000c 	.word	0x2000000c
 8000f2c:	200001dc 	.word	0x200001dc

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	@ (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	200001dc 	.word	0x200001dc

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff ffee 	bl	8000f30 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f62:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffde 	bl	8000f30 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000000c 	.word	0x2000000c

08000f90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e033      	b.n	800100e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d109      	bne.n	8000fc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fdd8 	bl	8000b64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f003 0310 	and.w	r3, r3, #16
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d118      	bne.n	8001000 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fd6:	f023 0302 	bic.w	r3, r3, #2
 8000fda:	f043 0202 	orr.w	r2, r3, #2
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 fb76 	bl	80016d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	f023 0303 	bic.w	r3, r3, #3
 8000ff6:	f043 0201 	orr.w	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ffe:	e001      	b.n	8001004 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800100c:	7bfb      	ldrb	r3, [r7, #15]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	f003 0320 	and.w	r3, r3, #32
 8001044:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d049      	beq.n	80010e0 <HAL_ADC_IRQHandler+0xca>
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d046      	beq.n	80010e0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	d105      	bne.n	800106a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d12b      	bne.n	80010d0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800107c:	2b00      	cmp	r3, #0
 800107e:	d127      	bne.n	80010d0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001086:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800108a:	2b00      	cmp	r3, #0
 800108c:	d006      	beq.n	800109c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001098:	2b00      	cmp	r3, #0
 800109a:	d119      	bne.n	80010d0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0220 	bic.w	r2, r2, #32
 80010aa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d105      	bne.n	80010d0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	f043 0201 	orr.w	r2, r3, #1
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 f9a5 	bl	8001420 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f06f 0212 	mvn.w	r2, #18
 80010de:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ee:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d057      	beq.n	80011a6 <HAL_ADC_IRQHandler+0x190>
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d054      	beq.n	80011a6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001100:	f003 0310 	and.w	r3, r3, #16
 8001104:	2b00      	cmp	r3, #0
 8001106:	d105      	bne.n	8001114 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d139      	bne.n	8001196 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001128:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800113a:	2b00      	cmp	r3, #0
 800113c:	d12b      	bne.n	8001196 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001148:	2b00      	cmp	r3, #0
 800114a:	d124      	bne.n	8001196 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001156:	2b00      	cmp	r3, #0
 8001158:	d11d      	bne.n	8001196 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800115e:	2b00      	cmp	r3, #0
 8001160:	d119      	bne.n	8001196 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001170:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001186:	2b00      	cmp	r3, #0
 8001188:	d105      	bne.n	8001196 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	f043 0201 	orr.w	r2, r3, #1
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 fc1a 	bl	80019d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f06f 020c 	mvn.w	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011b4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d017      	beq.n	80011ec <HAL_ADC_IRQHandler+0x1d6>
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d014      	beq.n	80011ec <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d10d      	bne.n	80011ec <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f933 	bl	8001448 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f06f 0201 	mvn.w	r2, #1
 80011ea:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0320 	and.w	r3, r3, #32
 80011f2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011fa:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d015      	beq.n	800122e <HAL_ADC_IRQHandler+0x218>
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d012      	beq.n	800122e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120c:	f043 0202 	orr.w	r2, r3, #2
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f06f 0220 	mvn.w	r2, #32
 800121c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f91c 	bl	800145c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f06f 0220 	mvn.w	r2, #32
 800122c:	601a      	str	r2, [r3, #0]
  }
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001252:	2b01      	cmp	r3, #1
 8001254:	d101      	bne.n	800125a <HAL_ADC_Start_DMA+0x22>
 8001256:	2302      	movs	r3, #2
 8001258:	e0d0      	b.n	80013fc <HAL_ADC_Start_DMA+0x1c4>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b01      	cmp	r3, #1
 800126e:	d018      	beq.n	80012a2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 0201 	orr.w	r2, r2, #1
 800127e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001280:	4b60      	ldr	r3, [pc, #384]	@ (8001404 <HAL_ADC_Start_DMA+0x1cc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a60      	ldr	r2, [pc, #384]	@ (8001408 <HAL_ADC_Start_DMA+0x1d0>)
 8001286:	fba2 2303 	umull	r2, r3, r2, r3
 800128a:	0c9a      	lsrs	r2, r3, #18
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001294:	e002      	b.n	800129c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3b01      	subs	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f9      	bne.n	8001296 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012b0:	d107      	bne.n	80012c2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012c0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	f040 8088 	bne.w	80013e2 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80012da:	f023 0301 	bic.w	r3, r3, #1
 80012de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d007      	beq.n	8001304 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012fc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800130c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001310:	d106      	bne.n	8001320 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	f023 0206 	bic.w	r2, r3, #6
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	645a      	str	r2, [r3, #68]	@ 0x44
 800131e:	e002      	b.n	8001326 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800132e:	4b37      	ldr	r3, [pc, #220]	@ (800140c <HAL_ADC_Start_DMA+0x1d4>)
 8001330:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001336:	4a36      	ldr	r2, [pc, #216]	@ (8001410 <HAL_ADC_Start_DMA+0x1d8>)
 8001338:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800133e:	4a35      	ldr	r2, [pc, #212]	@ (8001414 <HAL_ADC_Start_DMA+0x1dc>)
 8001340:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001346:	4a34      	ldr	r2, [pc, #208]	@ (8001418 <HAL_ADC_Start_DMA+0x1e0>)
 8001348:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001352:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001362:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001372:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	334c      	adds	r3, #76	@ 0x4c
 800137e:	4619      	mov	r1, r3
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f000 fcee 	bl	8001d64 <HAL_DMA_Start_IT>
 8001388:	4603      	mov	r3, r0
 800138a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 031f 	and.w	r3, r3, #31
 8001394:	2b00      	cmp	r3, #0
 8001396:	d10f      	bne.n	80013b8 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d129      	bne.n	80013fa <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	e020      	b.n	80013fa <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a17      	ldr	r2, [pc, #92]	@ (800141c <HAL_ADC_Start_DMA+0x1e4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d11b      	bne.n	80013fa <HAL_ADC_Start_DMA+0x1c2>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d114      	bne.n	80013fa <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	e00b      	b.n	80013fa <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	f043 0210 	orr.w	r2, r3, #16
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	f043 0201 	orr.w	r2, r3, #1
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80013fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000004 	.word	0x20000004
 8001408:	431bde83 	.word	0x431bde83
 800140c:	40012300 	.word	0x40012300
 8001410:	080018cd 	.word	0x080018cd
 8001414:	08001987 	.word	0x08001987
 8001418:	080019a3 	.word	0x080019a3
 800141c:	40012000 	.word	0x40012000

08001420 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <HAL_ADC_ConfigChannel+0x1c>
 8001488:	2302      	movs	r3, #2
 800148a:	e113      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x244>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b09      	cmp	r3, #9
 800149a:	d925      	bls.n	80014e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68d9      	ldr	r1, [r3, #12]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	3b1e      	subs	r3, #30
 80014b2:	2207      	movs	r2, #7
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43da      	mvns	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	400a      	ands	r2, r1
 80014c0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68d9      	ldr	r1, [r3, #12]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	4603      	mov	r3, r0
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4403      	add	r3, r0
 80014da:	3b1e      	subs	r3, #30
 80014dc:	409a      	lsls	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	e022      	b.n	800152e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6919      	ldr	r1, [r3, #16]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	2207      	movs	r2, #7
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	400a      	ands	r2, r1
 800150a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6919      	ldr	r1, [r3, #16]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	4603      	mov	r3, r0
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4403      	add	r3, r0
 8001524:	409a      	lsls	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b06      	cmp	r3, #6
 8001534:	d824      	bhi.n	8001580 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	3b05      	subs	r3, #5
 8001548:	221f      	movs	r2, #31
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	400a      	ands	r2, r1
 8001556:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	b29b      	uxth	r3, r3
 8001564:	4618      	mov	r0, r3
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	3b05      	subs	r3, #5
 8001572:	fa00 f203 	lsl.w	r2, r0, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	635a      	str	r2, [r3, #52]	@ 0x34
 800157e:	e04c      	b.n	800161a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b0c      	cmp	r3, #12
 8001586:	d824      	bhi.n	80015d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	3b23      	subs	r3, #35	@ 0x23
 800159a:	221f      	movs	r2, #31
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43da      	mvns	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	400a      	ands	r2, r1
 80015a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	3b23      	subs	r3, #35	@ 0x23
 80015c4:	fa00 f203 	lsl.w	r2, r0, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80015d0:	e023      	b.n	800161a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	3b41      	subs	r3, #65	@ 0x41
 80015e4:	221f      	movs	r2, #31
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	400a      	ands	r2, r1
 80015f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4618      	mov	r0, r3
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	3b41      	subs	r3, #65	@ 0x41
 800160e:	fa00 f203 	lsl.w	r2, r0, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800161a:	4b29      	ldr	r3, [pc, #164]	@ (80016c0 <HAL_ADC_ConfigChannel+0x250>)
 800161c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a28      	ldr	r2, [pc, #160]	@ (80016c4 <HAL_ADC_ConfigChannel+0x254>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d10f      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x1d8>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b12      	cmp	r3, #18
 800162e:	d10b      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1d      	ldr	r2, [pc, #116]	@ (80016c4 <HAL_ADC_ConfigChannel+0x254>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d12b      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x23a>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a1c      	ldr	r2, [pc, #112]	@ (80016c8 <HAL_ADC_ConfigChannel+0x258>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d003      	beq.n	8001664 <HAL_ADC_ConfigChannel+0x1f4>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b11      	cmp	r3, #17
 8001662:	d122      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a11      	ldr	r2, [pc, #68]	@ (80016c8 <HAL_ADC_ConfigChannel+0x258>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d111      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <HAL_ADC_ConfigChannel+0x25c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a11      	ldr	r2, [pc, #68]	@ (80016d0 <HAL_ADC_ConfigChannel+0x260>)
 800168c:	fba2 2303 	umull	r2, r3, r2, r3
 8001690:	0c9a      	lsrs	r2, r3, #18
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800169c:	e002      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f9      	bne.n	800169e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40012300 	.word	0x40012300
 80016c4:	40012000 	.word	0x40012000
 80016c8:	10000012 	.word	0x10000012
 80016cc:	20000004 	.word	0x20000004
 80016d0:	431bde83 	.word	0x431bde83

080016d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016dc:	4b79      	ldr	r3, [pc, #484]	@ (80018c4 <ADC_Init+0x1f0>)
 80016de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	431a      	orrs	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001708:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6859      	ldr	r1, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	021a      	lsls	r2, r3, #8
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800172c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6859      	ldr	r1, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800174e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6899      	ldr	r1, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001766:	4a58      	ldr	r2, [pc, #352]	@ (80018c8 <ADC_Init+0x1f4>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d022      	beq.n	80017b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800177a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6899      	ldr	r1, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800179c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6899      	ldr	r1, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	e00f      	b.n	80017d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0202 	bic.w	r2, r2, #2
 80017e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6899      	ldr	r1, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7e1b      	ldrb	r3, [r3, #24]
 80017ec:	005a      	lsls	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d01b      	beq.n	8001838 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800180e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800181e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6859      	ldr	r1, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182a:	3b01      	subs	r3, #1
 800182c:	035a      	lsls	r2, r3, #13
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	e007      	b.n	8001848 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001846:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001856:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	3b01      	subs	r3, #1
 8001864:	051a      	lsls	r2, r3, #20
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800187c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6899      	ldr	r1, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800188a:	025a      	lsls	r2, r3, #9
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6899      	ldr	r1, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	029a      	lsls	r2, r3, #10
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	609a      	str	r2, [r3, #8]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40012300 	.word	0x40012300
 80018c8:	0f000001 	.word	0x0f000001

080018cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d13c      	bne.n	8001960 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d12b      	bne.n	8001958 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001904:	2b00      	cmp	r3, #0
 8001906:	d127      	bne.n	8001958 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001920:	2b00      	cmp	r3, #0
 8001922:	d119      	bne.n	8001958 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0220 	bic.w	r2, r2, #32
 8001932:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001938:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d105      	bne.n	8001958 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7ff fd61 	bl	8001420 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800195e:	e00e      	b.n	800197e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f7ff fd75 	bl	800145c <HAL_ADC_ErrorCallback>
}
 8001972:	e004      	b.n	800197e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	4798      	blx	r3
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001992:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f7ff fd4d 	bl	8001434 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ae:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2240      	movs	r2, #64	@ 0x40
 80019b4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	f043 0204 	orr.w	r2, r3, #4
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f7ff fd4a 	bl	800145c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019c8:	bf00      	nop
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	@ (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	@ (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db0b      	blt.n	8001a72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4907      	ldr	r1, [pc, #28]	@ (8001a80 <__NVIC_EnableIRQ+0x38>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	@ (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	@ (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	@ 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
         );
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	@ 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b50:	d301      	bcc.n	8001b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00f      	b.n	8001b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <SysTick_Config+0x40>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5e:	210f      	movs	r1, #15
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f7ff ff8e 	bl	8001a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <SysTick_Config+0x40>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	@ (8001b80 <SysTick_Config+0x40>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff29 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff3e 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff8e 	bl	8001ad8 <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5d 	bl	8001a84 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff31 	bl	8001a48 <__NVIC_EnableIRQ>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffa2 	bl	8001b40 <SysTick_Config>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff f98c 	bl	8000f30 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e099      	b.n	8001d58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0201 	bic.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c44:	e00f      	b.n	8001c66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c46:	f7ff f973 	bl	8000f30 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d908      	bls.n	8001c66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2220      	movs	r2, #32
 8001c58:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e078      	b.n	8001d58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1e8      	bne.n	8001c46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	4b38      	ldr	r3, [pc, #224]	@ (8001d60 <HAL_DMA_Init+0x158>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d107      	bne.n	8001cd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f023 0307 	bic.w	r3, r3, #7
 8001ce6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d117      	bne.n	8001d2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00e      	beq.n	8001d2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fa6f 	bl	80021f0 <DMA_CheckFifoParam>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2240      	movs	r2, #64	@ 0x40
 8001d1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d26:	2301      	movs	r3, #1
 8001d28:	e016      	b.n	8001d58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fa26 	bl	8002184 <DMA_CalcBaseAndBitshift>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d40:	223f      	movs	r2, #63	@ 0x3f
 8001d42:	409a      	lsls	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	f010803f 	.word	0xf010803f

08001d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_DMA_Start_IT+0x26>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e040      	b.n	8001e0c <HAL_DMA_Start_IT+0xa8>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d12f      	bne.n	8001dfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2202      	movs	r2, #2
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f9b8 	bl	8002128 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbc:	223f      	movs	r2, #63	@ 0x3f
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0216 	orr.w	r2, r2, #22
 8001dd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0208 	orr.w	r2, r2, #8
 8001dea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	e005      	b.n	8001e0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e06:	2302      	movs	r3, #2
 8001e08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e20:	4b8e      	ldr	r3, [pc, #568]	@ (800205c <HAL_DMA_IRQHandler+0x248>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a8e      	ldr	r2, [pc, #568]	@ (8002060 <HAL_DMA_IRQHandler+0x24c>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	0a9b      	lsrs	r3, r3, #10
 8001e2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3e:	2208      	movs	r2, #8
 8001e40:	409a      	lsls	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d01a      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0204 	bic.w	r2, r2, #4
 8001e66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e78:	f043 0201 	orr.w	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e84:	2201      	movs	r2, #1
 8001e86:	409a      	lsls	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d012      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00b      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eae:	f043 0202 	orr.w	r2, r3, #2
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eba:	2204      	movs	r2, #4
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d012      	beq.n	8001eec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00b      	beq.n	8001eec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed8:	2204      	movs	r2, #4
 8001eda:	409a      	lsls	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee4:	f043 0204 	orr.w	r2, r3, #4
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d043      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d03c      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0e:	2210      	movs	r2, #16
 8001f10:	409a      	lsls	r2, r3
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d018      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d108      	bne.n	8001f44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d024      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	4798      	blx	r3
 8001f42:	e01f      	b.n	8001f84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d01b      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4798      	blx	r3
 8001f54:	e016      	b.n	8001f84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d107      	bne.n	8001f74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0208 	bic.w	r2, r2, #8
 8001f72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f88:	2220      	movs	r2, #32
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 808f 	beq.w	80020b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 8087 	beq.w	80020b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001faa:	2220      	movs	r2, #32
 8001fac:	409a      	lsls	r2, r3
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b05      	cmp	r3, #5
 8001fbc:	d136      	bne.n	800202c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0216 	bic.w	r2, r2, #22
 8001fcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d103      	bne.n	8001fee <HAL_DMA_IRQHandler+0x1da>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0208 	bic.w	r2, r2, #8
 8001ffc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002002:	223f      	movs	r2, #63	@ 0x3f
 8002004:	409a      	lsls	r2, r3
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800201e:	2b00      	cmp	r3, #0
 8002020:	d07e      	beq.n	8002120 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	4798      	blx	r3
        }
        return;
 800202a:	e079      	b.n	8002120 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01d      	beq.n	8002076 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10d      	bne.n	8002064 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204c:	2b00      	cmp	r3, #0
 800204e:	d031      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
 8002058:	e02c      	b.n	80020b4 <HAL_DMA_IRQHandler+0x2a0>
 800205a:	bf00      	nop
 800205c:	20000004 	.word	0x20000004
 8002060:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002068:	2b00      	cmp	r3, #0
 800206a:	d023      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	4798      	blx	r3
 8002074:	e01e      	b.n	80020b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10f      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0210 	bic.w	r2, r2, #16
 8002092:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d032      	beq.n	8002122 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d022      	beq.n	800210e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2205      	movs	r2, #5
 80020cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	3301      	adds	r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d307      	bcc.n	80020fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f2      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x2cc>
 80020fa:	e000      	b.n	80020fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
 800211e:	e000      	b.n	8002122 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002120:	bf00      	nop
    }
  }
}
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002144:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b40      	cmp	r3, #64	@ 0x40
 8002154:	d108      	bne.n	8002168 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002166:	e007      	b.n	8002178 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	60da      	str	r2, [r3, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	3b10      	subs	r3, #16
 8002194:	4a14      	ldr	r2, [pc, #80]	@ (80021e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800219e:	4a13      	ldr	r2, [pc, #76]	@ (80021ec <DMA_CalcBaseAndBitshift+0x68>)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d909      	bls.n	80021c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021ba:	f023 0303 	bic.w	r3, r3, #3
 80021be:	1d1a      	adds	r2, r3, #4
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80021c4:	e007      	b.n	80021d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021ce:	f023 0303 	bic.w	r3, r3, #3
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	aaaaaaab 	.word	0xaaaaaaab
 80021ec:	08004578 	.word	0x08004578

080021f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002200:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d11f      	bne.n	800224a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d856      	bhi.n	80022be <DMA_CheckFifoParam+0xce>
 8002210:	a201      	add	r2, pc, #4	@ (adr r2, 8002218 <DMA_CheckFifoParam+0x28>)
 8002212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002216:	bf00      	nop
 8002218:	08002229 	.word	0x08002229
 800221c:	0800223b 	.word	0x0800223b
 8002220:	08002229 	.word	0x08002229
 8002224:	080022bf 	.word	0x080022bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d046      	beq.n	80022c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002238:	e043      	b.n	80022c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002242:	d140      	bne.n	80022c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002248:	e03d      	b.n	80022c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002252:	d121      	bne.n	8002298 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d837      	bhi.n	80022ca <DMA_CheckFifoParam+0xda>
 800225a:	a201      	add	r2, pc, #4	@ (adr r2, 8002260 <DMA_CheckFifoParam+0x70>)
 800225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002260:	08002271 	.word	0x08002271
 8002264:	08002277 	.word	0x08002277
 8002268:	08002271 	.word	0x08002271
 800226c:	08002289 	.word	0x08002289
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
      break;
 8002274:	e030      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d025      	beq.n	80022ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002286:	e022      	b.n	80022ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002290:	d11f      	bne.n	80022d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002296:	e01c      	b.n	80022d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d903      	bls.n	80022a6 <DMA_CheckFifoParam+0xb6>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d003      	beq.n	80022ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022a4:	e018      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	73fb      	strb	r3, [r7, #15]
      break;
 80022aa:	e015      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00e      	beq.n	80022d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
      break;
 80022bc:	e00b      	b.n	80022d6 <DMA_CheckFifoParam+0xe6>
      break;
 80022be:	bf00      	nop
 80022c0:	e00a      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;
 80022c2:	bf00      	nop
 80022c4:	e008      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;
 80022c6:	bf00      	nop
 80022c8:	e006      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;
 80022ca:	bf00      	nop
 80022cc:	e004      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;
 80022ce:	bf00      	nop
 80022d0:	e002      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022d2:	bf00      	nop
 80022d4:	e000      	b.n	80022d8 <DMA_CheckFifoParam+0xe8>
      break;
 80022d6:	bf00      	nop
    }
  } 
  
  return status; 
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop

080022e8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80022f6:	4b23      	ldr	r3, [pc, #140]	@ (8002384 <HAL_FLASH_Program+0x9c>)
 80022f8:	7e1b      	ldrb	r3, [r3, #24]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_FLASH_Program+0x1a>
 80022fe:	2302      	movs	r3, #2
 8002300:	e03b      	b.n	800237a <HAL_FLASH_Program+0x92>
 8002302:	4b20      	ldr	r3, [pc, #128]	@ (8002384 <HAL_FLASH_Program+0x9c>)
 8002304:	2201      	movs	r2, #1
 8002306:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002308:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800230c:	f000 f870 	bl	80023f0 <FLASH_WaitForLastOperation>
 8002310:	4603      	mov	r3, r0
 8002312:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002314:	7dfb      	ldrb	r3, [r7, #23]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d12b      	bne.n	8002372 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002320:	783b      	ldrb	r3, [r7, #0]
 8002322:	4619      	mov	r1, r3
 8002324:	68b8      	ldr	r0, [r7, #8]
 8002326:	f000 f91b 	bl	8002560 <FLASH_Program_Byte>
 800232a:	e016      	b.n	800235a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d105      	bne.n	800233e <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002332:	883b      	ldrh	r3, [r7, #0]
 8002334:	4619      	mov	r1, r3
 8002336:	68b8      	ldr	r0, [r7, #8]
 8002338:	f000 f8ee 	bl	8002518 <FLASH_Program_HalfWord>
 800233c:	e00d      	b.n	800235a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d105      	bne.n	8002350 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	4619      	mov	r1, r3
 8002348:	68b8      	ldr	r0, [r7, #8]
 800234a:	f000 f8c3 	bl	80024d4 <FLASH_Program_Word>
 800234e:	e004      	b.n	800235a <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002354:	68b8      	ldr	r0, [r7, #8]
 8002356:	f000 f88b 	bl	8002470 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800235a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800235e:	f000 f847 	bl	80023f0 <FLASH_WaitForLastOperation>
 8002362:	4603      	mov	r3, r0
 8002364:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002366:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <HAL_FLASH_Program+0xa0>)
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	4a07      	ldr	r2, [pc, #28]	@ (8002388 <HAL_FLASH_Program+0xa0>)
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002372:	4b04      	ldr	r3, [pc, #16]	@ (8002384 <HAL_FLASH_Program+0x9c>)
 8002374:	2200      	movs	r2, #0
 8002376:	761a      	strb	r2, [r3, #24]

  return status;
 8002378:	7dfb      	ldrb	r3, [r7, #23]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200001e0 	.word	0x200001e0
 8002388:	40023c00 	.word	0x40023c00

0800238c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002396:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <HAL_FLASH_Unlock+0x38>)
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	da0b      	bge.n	80023b6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800239e:	4b09      	ldr	r3, [pc, #36]	@ (80023c4 <HAL_FLASH_Unlock+0x38>)
 80023a0:	4a09      	ldr	r2, [pc, #36]	@ (80023c8 <HAL_FLASH_Unlock+0x3c>)
 80023a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80023a4:	4b07      	ldr	r3, [pc, #28]	@ (80023c4 <HAL_FLASH_Unlock+0x38>)
 80023a6:	4a09      	ldr	r2, [pc, #36]	@ (80023cc <HAL_FLASH_Unlock+0x40>)
 80023a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80023aa:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <HAL_FLASH_Unlock+0x38>)
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	da01      	bge.n	80023b6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80023b6:	79fb      	ldrb	r3, [r7, #7]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	40023c00 	.word	0x40023c00
 80023c8:	45670123 	.word	0x45670123
 80023cc:	cdef89ab 	.word	0xcdef89ab

080023d0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80023d4:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_FLASH_Lock+0x1c>)
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	4a04      	ldr	r2, [pc, #16]	@ (80023ec <HAL_FLASH_Lock+0x1c>)
 80023da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023de:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	40023c00 	.word	0x40023c00

080023f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002468 <FLASH_WaitForLastOperation+0x78>)
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002402:	f7fe fd95 	bl	8000f30 <HAL_GetTick>
 8002406:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002408:	e010      	b.n	800242c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002410:	d00c      	beq.n	800242c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <FLASH_WaitForLastOperation+0x38>
 8002418:	f7fe fd8a 	bl	8000f30 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	d201      	bcs.n	800242c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e019      	b.n	8002460 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800242c:	4b0f      	ldr	r3, [pc, #60]	@ (800246c <FLASH_WaitForLastOperation+0x7c>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1e8      	bne.n	800240a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002438:	4b0c      	ldr	r3, [pc, #48]	@ (800246c <FLASH_WaitForLastOperation+0x7c>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002444:	4b09      	ldr	r3, [pc, #36]	@ (800246c <FLASH_WaitForLastOperation+0x7c>)
 8002446:	2201      	movs	r2, #1
 8002448:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800244a:	4b08      	ldr	r3, [pc, #32]	@ (800246c <FLASH_WaitForLastOperation+0x7c>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002456:	f000 f8a5 	bl	80025a4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800245e:	2300      	movs	r3, #0

}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200001e0 	.word	0x200001e0
 800246c:	40023c00 	.word	0x40023c00

08002470 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800247c:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <FLASH_Program_DoubleWord+0x60>)
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	4a13      	ldr	r2, [pc, #76]	@ (80024d0 <FLASH_Program_DoubleWord+0x60>)
 8002482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002486:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002488:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <FLASH_Program_DoubleWord+0x60>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	4a10      	ldr	r2, [pc, #64]	@ (80024d0 <FLASH_Program_DoubleWord+0x60>)
 800248e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002492:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002494:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <FLASH_Program_DoubleWord+0x60>)
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	4a0d      	ldr	r2, [pc, #52]	@ (80024d0 <FLASH_Program_DoubleWord+0x60>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80024a6:	f3bf 8f6f 	isb	sy
}
 80024aa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80024ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	000a      	movs	r2, r1
 80024ba:	2300      	movs	r3, #0
 80024bc:	68f9      	ldr	r1, [r7, #12]
 80024be:	3104      	adds	r1, #4
 80024c0:	4613      	mov	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40023c00 	.word	0x40023c00

080024d4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024de:	4b0d      	ldr	r3, [pc, #52]	@ (8002514 <FLASH_Program_Word+0x40>)
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002514 <FLASH_Program_Word+0x40>)
 80024e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80024ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <FLASH_Program_Word+0x40>)
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	4a09      	ldr	r2, [pc, #36]	@ (8002514 <FLASH_Program_Word+0x40>)
 80024f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80024f6:	4b07      	ldr	r3, [pc, #28]	@ (8002514 <FLASH_Program_Word+0x40>)
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	4a06      	ldr	r2, [pc, #24]	@ (8002514 <FLASH_Program_Word+0x40>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	601a      	str	r2, [r3, #0]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	40023c00 	.word	0x40023c00

08002518 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002524:	4b0d      	ldr	r3, [pc, #52]	@ (800255c <FLASH_Program_HalfWord+0x44>)
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	4a0c      	ldr	r2, [pc, #48]	@ (800255c <FLASH_Program_HalfWord+0x44>)
 800252a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800252e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002530:	4b0a      	ldr	r3, [pc, #40]	@ (800255c <FLASH_Program_HalfWord+0x44>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	4a09      	ldr	r2, [pc, #36]	@ (800255c <FLASH_Program_HalfWord+0x44>)
 8002536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800253a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800253c:	4b07      	ldr	r3, [pc, #28]	@ (800255c <FLASH_Program_HalfWord+0x44>)
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	4a06      	ldr	r2, [pc, #24]	@ (800255c <FLASH_Program_HalfWord+0x44>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	801a      	strh	r2, [r3, #0]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40023c00 	.word	0x40023c00

08002560 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <FLASH_Program_Byte+0x40>)
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	4a0b      	ldr	r2, [pc, #44]	@ (80025a0 <FLASH_Program_Byte+0x40>)
 8002572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002576:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002578:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <FLASH_Program_Byte+0x40>)
 800257a:	4a09      	ldr	r2, [pc, #36]	@ (80025a0 <FLASH_Program_Byte+0x40>)
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002580:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <FLASH_Program_Byte+0x40>)
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	4a06      	ldr	r2, [pc, #24]	@ (80025a0 <FLASH_Program_Byte+0x40>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	78fa      	ldrb	r2, [r7, #3]
 8002590:	701a      	strb	r2, [r3, #0]
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40023c00 	.word	0x40023c00

080025a4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80025a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002668 <FLASH_SetErrorCode+0xc4>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80025b4:	4b2d      	ldr	r3, [pc, #180]	@ (800266c <FLASH_SetErrorCode+0xc8>)
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	f043 0310 	orr.w	r3, r3, #16
 80025bc:	4a2b      	ldr	r2, [pc, #172]	@ (800266c <FLASH_SetErrorCode+0xc8>)
 80025be:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80025c0:	4b29      	ldr	r3, [pc, #164]	@ (8002668 <FLASH_SetErrorCode+0xc4>)
 80025c2:	2210      	movs	r2, #16
 80025c4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80025c6:	4b28      	ldr	r3, [pc, #160]	@ (8002668 <FLASH_SetErrorCode+0xc4>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d008      	beq.n	80025e4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80025d2:	4b26      	ldr	r3, [pc, #152]	@ (800266c <FLASH_SetErrorCode+0xc8>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f043 0308 	orr.w	r3, r3, #8
 80025da:	4a24      	ldr	r2, [pc, #144]	@ (800266c <FLASH_SetErrorCode+0xc8>)
 80025dc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80025de:	4b22      	ldr	r3, [pc, #136]	@ (8002668 <FLASH_SetErrorCode+0xc4>)
 80025e0:	2220      	movs	r2, #32
 80025e2:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80025e4:	4b20      	ldr	r3, [pc, #128]	@ (8002668 <FLASH_SetErrorCode+0xc4>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80025f0:	4b1e      	ldr	r3, [pc, #120]	@ (800266c <FLASH_SetErrorCode+0xc8>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	4a1c      	ldr	r2, [pc, #112]	@ (800266c <FLASH_SetErrorCode+0xc8>)
 80025fa:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80025fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002668 <FLASH_SetErrorCode+0xc4>)
 80025fe:	2240      	movs	r2, #64	@ 0x40
 8002600:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002602:	4b19      	ldr	r3, [pc, #100]	@ (8002668 <FLASH_SetErrorCode+0xc4>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800260e:	4b17      	ldr	r3, [pc, #92]	@ (800266c <FLASH_SetErrorCode+0xc8>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	4a15      	ldr	r2, [pc, #84]	@ (800266c <FLASH_SetErrorCode+0xc8>)
 8002618:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800261a:	4b13      	ldr	r3, [pc, #76]	@ (8002668 <FLASH_SetErrorCode+0xc4>)
 800261c:	2280      	movs	r2, #128	@ 0x80
 800261e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002620:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <FLASH_SetErrorCode+0xc4>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d009      	beq.n	8002640 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800262c:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <FLASH_SetErrorCode+0xc8>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	4a0d      	ldr	r2, [pc, #52]	@ (800266c <FLASH_SetErrorCode+0xc8>)
 8002636:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002638:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <FLASH_SetErrorCode+0xc4>)
 800263a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800263e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002640:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <FLASH_SetErrorCode+0xc4>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800264c:	4b07      	ldr	r3, [pc, #28]	@ (800266c <FLASH_SetErrorCode+0xc8>)
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	f043 0320 	orr.w	r3, r3, #32
 8002654:	4a05      	ldr	r2, [pc, #20]	@ (800266c <FLASH_SetErrorCode+0xc8>)
 8002656:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002658:	4b03      	ldr	r3, [pc, #12]	@ (8002668 <FLASH_SetErrorCode+0xc4>)
 800265a:	2202      	movs	r2, #2
 800265c:	60da      	str	r2, [r3, #12]
  }
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40023c00 	.word	0x40023c00
 800266c:	200001e0 	.word	0x200001e0

08002670 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	e010      	b.n	80026ae <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d103      	bne.n	800269a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002692:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	e009      	b.n	80026ae <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d103      	bne.n	80026a8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80026a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	e002      	b.n	80026ae <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80026a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80026ac:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026ae:	4b13      	ldr	r3, [pc, #76]	@ (80026fc <FLASH_Erase_Sector+0x8c>)
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	4a12      	ldr	r2, [pc, #72]	@ (80026fc <FLASH_Erase_Sector+0x8c>)
 80026b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80026ba:	4b10      	ldr	r3, [pc, #64]	@ (80026fc <FLASH_Erase_Sector+0x8c>)
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	490f      	ldr	r1, [pc, #60]	@ (80026fc <FLASH_Erase_Sector+0x8c>)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80026c6:	4b0d      	ldr	r3, [pc, #52]	@ (80026fc <FLASH_Erase_Sector+0x8c>)
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	4a0c      	ldr	r2, [pc, #48]	@ (80026fc <FLASH_Erase_Sector+0x8c>)
 80026cc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80026d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80026d2:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <FLASH_Erase_Sector+0x8c>)
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4313      	orrs	r3, r2
 80026dc:	4a07      	ldr	r2, [pc, #28]	@ (80026fc <FLASH_Erase_Sector+0x8c>)
 80026de:	f043 0302 	orr.w	r3, r3, #2
 80026e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80026e4:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <FLASH_Erase_Sector+0x8c>)
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	4a04      	ldr	r2, [pc, #16]	@ (80026fc <FLASH_Erase_Sector+0x8c>)
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ee:	6113      	str	r3, [r2, #16]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40023c00 	.word	0x40023c00

08002700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	@ 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	e159      	b.n	80029d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800271c:	2201      	movs	r2, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	429a      	cmp	r2, r3
 8002736:	f040 8148 	bne.w	80029ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d005      	beq.n	8002752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800274e:	2b02      	cmp	r3, #2
 8002750:	d130      	bne.n	80027b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	2203      	movs	r2, #3
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002788:	2201      	movs	r2, #1
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 0201 	and.w	r2, r3, #1
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d017      	beq.n	80027f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2203      	movs	r2, #3
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d123      	bne.n	8002844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	08da      	lsrs	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3208      	adds	r2, #8
 8002804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	220f      	movs	r2, #15
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	08da      	lsrs	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3208      	adds	r2, #8
 800283e:	69b9      	ldr	r1, [r7, #24]
 8002840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2203      	movs	r2, #3
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0203 	and.w	r2, r3, #3
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80a2 	beq.w	80029ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	4b57      	ldr	r3, [pc, #348]	@ (80029e8 <HAL_GPIO_Init+0x2e8>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	4a56      	ldr	r2, [pc, #344]	@ (80029e8 <HAL_GPIO_Init+0x2e8>)
 8002890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002894:	6453      	str	r3, [r2, #68]	@ 0x44
 8002896:	4b54      	ldr	r3, [pc, #336]	@ (80029e8 <HAL_GPIO_Init+0x2e8>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028a2:	4a52      	ldr	r2, [pc, #328]	@ (80029ec <HAL_GPIO_Init+0x2ec>)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	089b      	lsrs	r3, r3, #2
 80028a8:	3302      	adds	r3, #2
 80028aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	220f      	movs	r2, #15
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a49      	ldr	r2, [pc, #292]	@ (80029f0 <HAL_GPIO_Init+0x2f0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d019      	beq.n	8002902 <HAL_GPIO_Init+0x202>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a48      	ldr	r2, [pc, #288]	@ (80029f4 <HAL_GPIO_Init+0x2f4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_GPIO_Init+0x1fe>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a47      	ldr	r2, [pc, #284]	@ (80029f8 <HAL_GPIO_Init+0x2f8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00d      	beq.n	80028fa <HAL_GPIO_Init+0x1fa>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a46      	ldr	r2, [pc, #280]	@ (80029fc <HAL_GPIO_Init+0x2fc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d007      	beq.n	80028f6 <HAL_GPIO_Init+0x1f6>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a45      	ldr	r2, [pc, #276]	@ (8002a00 <HAL_GPIO_Init+0x300>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_GPIO_Init+0x1f2>
 80028ee:	2304      	movs	r3, #4
 80028f0:	e008      	b.n	8002904 <HAL_GPIO_Init+0x204>
 80028f2:	2307      	movs	r3, #7
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_Init+0x204>
 80028f6:	2303      	movs	r3, #3
 80028f8:	e004      	b.n	8002904 <HAL_GPIO_Init+0x204>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e002      	b.n	8002904 <HAL_GPIO_Init+0x204>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <HAL_GPIO_Init+0x204>
 8002902:	2300      	movs	r3, #0
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	f002 0203 	and.w	r2, r2, #3
 800290a:	0092      	lsls	r2, r2, #2
 800290c:	4093      	lsls	r3, r2
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002914:	4935      	ldr	r1, [pc, #212]	@ (80029ec <HAL_GPIO_Init+0x2ec>)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	3302      	adds	r3, #2
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002922:	4b38      	ldr	r3, [pc, #224]	@ (8002a04 <HAL_GPIO_Init+0x304>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002946:	4a2f      	ldr	r2, [pc, #188]	@ (8002a04 <HAL_GPIO_Init+0x304>)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800294c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a04 <HAL_GPIO_Init+0x304>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002970:	4a24      	ldr	r2, [pc, #144]	@ (8002a04 <HAL_GPIO_Init+0x304>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002976:	4b23      	ldr	r3, [pc, #140]	@ (8002a04 <HAL_GPIO_Init+0x304>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800299a:	4a1a      	ldr	r2, [pc, #104]	@ (8002a04 <HAL_GPIO_Init+0x304>)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a0:	4b18      	ldr	r3, [pc, #96]	@ (8002a04 <HAL_GPIO_Init+0x304>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002a04 <HAL_GPIO_Init+0x304>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3301      	adds	r3, #1
 80029ce:	61fb      	str	r3, [r7, #28]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	2b0f      	cmp	r3, #15
 80029d4:	f67f aea2 	bls.w	800271c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3724      	adds	r7, #36	@ 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40013800 	.word	0x40013800
 80029f0:	40020000 	.word	0x40020000
 80029f4:	40020400 	.word	0x40020400
 80029f8:	40020800 	.word	0x40020800
 80029fc:	40020c00 	.word	0x40020c00
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40013c00 	.word	0x40013c00

08002a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	e001      	b.n	8002a2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e267      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d075      	beq.n	8002b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a56:	4b88      	ldr	r3, [pc, #544]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d00c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a62:	4b85      	ldr	r3, [pc, #532]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d112      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6e:	4b82      	ldr	r3, [pc, #520]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a7a:	d10b      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d05b      	beq.n	8002b40 <HAL_RCC_OscConfig+0x108>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d157      	bne.n	8002b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e242      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a9c:	d106      	bne.n	8002aac <HAL_RCC_OscConfig+0x74>
 8002a9e:	4b76      	ldr	r3, [pc, #472]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a75      	ldr	r2, [pc, #468]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e01d      	b.n	8002ae8 <HAL_RCC_OscConfig+0xb0>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x98>
 8002ab6:	4b70      	ldr	r3, [pc, #448]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a6f      	ldr	r2, [pc, #444]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6c      	ldr	r2, [pc, #432]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0xb0>
 8002ad0:	4b69      	ldr	r3, [pc, #420]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a68      	ldr	r2, [pc, #416]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b66      	ldr	r3, [pc, #408]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a65      	ldr	r2, [pc, #404]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fa1e 	bl	8000f30 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe fa1a 	bl	8000f30 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	@ 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e207      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0xc0>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fe fa0a 	bl	8000f30 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe fa06 	bl	8000f30 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	@ 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e1f3      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	4b51      	ldr	r3, [pc, #324]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0xe8>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d063      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5a:	4b47      	ldr	r3, [pc, #284]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d11c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b66:	4b44      	ldr	r3, [pc, #272]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d116      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	4b41      	ldr	r3, [pc, #260]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_RCC_OscConfig+0x152>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e1c7      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4937      	ldr	r1, [pc, #220]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	e03a      	b.n	8002c16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	4b34      	ldr	r3, [pc, #208]	@ (8002c7c <HAL_RCC_OscConfig+0x244>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bae:	f7fe f9bf 	bl	8000f30 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb6:	f7fe f9bb 	bl	8000f30 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e1a8      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd4:	4b28      	ldr	r3, [pc, #160]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4925      	ldr	r1, [pc, #148]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]
 8002be8:	e015      	b.n	8002c16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bea:	4b24      	ldr	r3, [pc, #144]	@ (8002c7c <HAL_RCC_OscConfig+0x244>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe f99e 	bl	8000f30 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7fe f99a 	bl	8000f30 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e187      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d036      	beq.n	8002c90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d016      	beq.n	8002c58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <HAL_RCC_OscConfig+0x248>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c30:	f7fe f97e 	bl	8000f30 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c38:	f7fe f97a 	bl	8000f30 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e167      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x200>
 8002c56:	e01b      	b.n	8002c90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c58:	4b09      	ldr	r3, [pc, #36]	@ (8002c80 <HAL_RCC_OscConfig+0x248>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5e:	f7fe f967 	bl	8000f30 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c64:	e00e      	b.n	8002c84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c66:	f7fe f963 	bl	8000f30 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d907      	bls.n	8002c84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e150      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	42470000 	.word	0x42470000
 8002c80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c84:	4b88      	ldr	r3, [pc, #544]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ea      	bne.n	8002c66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 8097 	beq.w	8002dcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca2:	4b81      	ldr	r3, [pc, #516]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10f      	bne.n	8002cce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cbe:	4b7a      	ldr	r3, [pc, #488]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cce:	4b77      	ldr	r3, [pc, #476]	@ (8002eac <HAL_RCC_OscConfig+0x474>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d118      	bne.n	8002d0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cda:	4b74      	ldr	r3, [pc, #464]	@ (8002eac <HAL_RCC_OscConfig+0x474>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a73      	ldr	r2, [pc, #460]	@ (8002eac <HAL_RCC_OscConfig+0x474>)
 8002ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce6:	f7fe f923 	bl	8000f30 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cee:	f7fe f91f 	bl	8000f30 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e10c      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	4b6a      	ldr	r3, [pc, #424]	@ (8002eac <HAL_RCC_OscConfig+0x474>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d106      	bne.n	8002d22 <HAL_RCC_OscConfig+0x2ea>
 8002d14:	4b64      	ldr	r3, [pc, #400]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d18:	4a63      	ldr	r2, [pc, #396]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d20:	e01c      	b.n	8002d5c <HAL_RCC_OscConfig+0x324>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b05      	cmp	r3, #5
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x30c>
 8002d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d30:	f043 0304 	orr.w	r3, r3, #4
 8002d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d36:	4b5c      	ldr	r3, [pc, #368]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d42:	e00b      	b.n	8002d5c <HAL_RCC_OscConfig+0x324>
 8002d44:	4b58      	ldr	r3, [pc, #352]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d48:	4a57      	ldr	r2, [pc, #348]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d50:	4b55      	ldr	r3, [pc, #340]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d54:	4a54      	ldr	r2, [pc, #336]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d56:	f023 0304 	bic.w	r3, r3, #4
 8002d5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d015      	beq.n	8002d90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7fe f8e4 	bl	8000f30 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6c:	f7fe f8e0 	bl	8000f30 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0cb      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	4b49      	ldr	r3, [pc, #292]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0ee      	beq.n	8002d6c <HAL_RCC_OscConfig+0x334>
 8002d8e:	e014      	b.n	8002dba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d90:	f7fe f8ce 	bl	8000f30 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d96:	e00a      	b.n	8002dae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d98:	f7fe f8ca 	bl	8000f30 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e0b5      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dae:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1ee      	bne.n	8002d98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc0:	4b39      	ldr	r3, [pc, #228]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc4:	4a38      	ldr	r2, [pc, #224]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002dc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80a1 	beq.w	8002f18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd6:	4b34      	ldr	r3, [pc, #208]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d05c      	beq.n	8002e9c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d141      	bne.n	8002e6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b31      	ldr	r3, [pc, #196]	@ (8002eb0 <HAL_RCC_OscConfig+0x478>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe f89e 	bl	8000f30 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe f89a 	bl	8000f30 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e087      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0a:	4b27      	ldr	r3, [pc, #156]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	019b      	lsls	r3, r3, #6
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	085b      	lsrs	r3, r3, #1
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	041b      	lsls	r3, r3, #16
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e38:	061b      	lsls	r3, r3, #24
 8002e3a:	491b      	ldr	r1, [pc, #108]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e40:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb0 <HAL_RCC_OscConfig+0x478>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e46:	f7fe f873 	bl	8000f30 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4e:	f7fe f86f 	bl	8000f30 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e05c      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e60:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x416>
 8002e6c:	e054      	b.n	8002f18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6e:	4b10      	ldr	r3, [pc, #64]	@ (8002eb0 <HAL_RCC_OscConfig+0x478>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fe f85c 	bl	8000f30 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7fe f858 	bl	8000f30 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e045      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x444>
 8002e9a:	e03d      	b.n	8002f18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d107      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e038      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f24 <HAL_RCC_OscConfig+0x4ec>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d028      	beq.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d121      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d11a      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d111      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efa:	085b      	lsrs	r3, r3, #1
 8002efc:	3b01      	subs	r3, #1
 8002efe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800

08002f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0cc      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b68      	ldr	r3, [pc, #416]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d90c      	bls.n	8002f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b65      	ldr	r3, [pc, #404]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	4b63      	ldr	r3, [pc, #396]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0b8      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d020      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f7c:	4b59      	ldr	r3, [pc, #356]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4a58      	ldr	r2, [pc, #352]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f94:	4b53      	ldr	r3, [pc, #332]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a52      	ldr	r2, [pc, #328]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa0:	4b50      	ldr	r3, [pc, #320]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	494d      	ldr	r1, [pc, #308]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d044      	beq.n	8003048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	4b47      	ldr	r3, [pc, #284]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d119      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e07f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e06f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e067      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003006:	4b37      	ldr	r3, [pc, #220]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4934      	ldr	r1, [pc, #208]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	4313      	orrs	r3, r2
 8003016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003018:	f7fd ff8a 	bl	8000f30 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	e00a      	b.n	8003036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003020:	f7fd ff86 	bl	8000f30 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e04f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	4b2b      	ldr	r3, [pc, #172]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 020c 	and.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	429a      	cmp	r2, r3
 8003046:	d1eb      	bne.n	8003020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003048:	4b25      	ldr	r3, [pc, #148]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d20c      	bcs.n	8003070 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b22      	ldr	r3, [pc, #136]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b20      	ldr	r3, [pc, #128]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e032      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800307c:	4b19      	ldr	r3, [pc, #100]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4916      	ldr	r1, [pc, #88]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800309a:	4b12      	ldr	r3, [pc, #72]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	490e      	ldr	r1, [pc, #56]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ae:	f000 f82d 	bl	800310c <HAL_RCC_GetSysClockFreq>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	490a      	ldr	r1, [pc, #40]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	5ccb      	ldrb	r3, [r1, r3]
 80030c2:	fa22 f303 	lsr.w	r3, r2, r3
 80030c6:	4a09      	ldr	r2, [pc, #36]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030ca:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd feea 	bl	8000ea8 <HAL_InitTick>

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023c00 	.word	0x40023c00
 80030e4:	40023800 	.word	0x40023800
 80030e8:	08004560 	.word	0x08004560
 80030ec:	20000004 	.word	0x20000004
 80030f0:	20000008 	.word	0x20000008

080030f4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80030f8:	4b03      	ldr	r3, [pc, #12]	@ (8003108 <HAL_RCC_EnableCSS+0x14>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
}
 80030fe:	bf00      	nop
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	4247004c 	.word	0x4247004c

0800310c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800310c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003110:	b090      	sub	sp, #64	@ 0x40
 8003112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003124:	4b59      	ldr	r3, [pc, #356]	@ (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d00d      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x40>
 8003130:	2b08      	cmp	r3, #8
 8003132:	f200 80a1 	bhi.w	8003278 <HAL_RCC_GetSysClockFreq+0x16c>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x34>
 800313a:	2b04      	cmp	r3, #4
 800313c:	d003      	beq.n	8003146 <HAL_RCC_GetSysClockFreq+0x3a>
 800313e:	e09b      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b53      	ldr	r3, [pc, #332]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x184>)
 8003142:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003144:	e09b      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003146:	4b53      	ldr	r3, [pc, #332]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x188>)
 8003148:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800314a:	e098      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800314c:	4b4f      	ldr	r3, [pc, #316]	@ (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003154:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003156:	4b4d      	ldr	r3, [pc, #308]	@ (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d028      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003162:	4b4a      	ldr	r3, [pc, #296]	@ (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	099b      	lsrs	r3, r3, #6
 8003168:	2200      	movs	r2, #0
 800316a:	623b      	str	r3, [r7, #32]
 800316c:	627a      	str	r2, [r7, #36]	@ 0x24
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003174:	2100      	movs	r1, #0
 8003176:	4b47      	ldr	r3, [pc, #284]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x188>)
 8003178:	fb03 f201 	mul.w	r2, r3, r1
 800317c:	2300      	movs	r3, #0
 800317e:	fb00 f303 	mul.w	r3, r0, r3
 8003182:	4413      	add	r3, r2
 8003184:	4a43      	ldr	r2, [pc, #268]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x188>)
 8003186:	fba0 1202 	umull	r1, r2, r0, r2
 800318a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800318c:	460a      	mov	r2, r1
 800318e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003192:	4413      	add	r3, r2
 8003194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003198:	2200      	movs	r2, #0
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	61fa      	str	r2, [r7, #28]
 800319e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80031a6:	f7fd f873 	bl	8000290 <__aeabi_uldivmod>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4613      	mov	r3, r2
 80031b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031b2:	e053      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b4:	4b35      	ldr	r3, [pc, #212]	@ (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	2200      	movs	r2, #0
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	617a      	str	r2, [r7, #20]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031c6:	f04f 0b00 	mov.w	fp, #0
 80031ca:	4652      	mov	r2, sl
 80031cc:	465b      	mov	r3, fp
 80031ce:	f04f 0000 	mov.w	r0, #0
 80031d2:	f04f 0100 	mov.w	r1, #0
 80031d6:	0159      	lsls	r1, r3, #5
 80031d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031dc:	0150      	lsls	r0, r2, #5
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	ebb2 080a 	subs.w	r8, r2, sl
 80031e6:	eb63 090b 	sbc.w	r9, r3, fp
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031fe:	ebb2 0408 	subs.w	r4, r2, r8
 8003202:	eb63 0509 	sbc.w	r5, r3, r9
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	00eb      	lsls	r3, r5, #3
 8003210:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003214:	00e2      	lsls	r2, r4, #3
 8003216:	4614      	mov	r4, r2
 8003218:	461d      	mov	r5, r3
 800321a:	eb14 030a 	adds.w	r3, r4, sl
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	eb45 030b 	adc.w	r3, r5, fp
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003232:	4629      	mov	r1, r5
 8003234:	028b      	lsls	r3, r1, #10
 8003236:	4621      	mov	r1, r4
 8003238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800323c:	4621      	mov	r1, r4
 800323e:	028a      	lsls	r2, r1, #10
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003246:	2200      	movs	r2, #0
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	60fa      	str	r2, [r7, #12]
 800324c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003250:	f7fd f81e 	bl	8000290 <__aeabi_uldivmod>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4613      	mov	r3, r2
 800325a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	0c1b      	lsrs	r3, r3, #16
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	3301      	adds	r3, #1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800326c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800326e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003276:	e002      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x184>)
 800327a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800327c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003280:	4618      	mov	r0, r3
 8003282:	3740      	adds	r7, #64	@ 0x40
 8003284:	46bd      	mov	sp, r7
 8003286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	00f42400 	.word	0x00f42400
 8003294:	017d7840 	.word	0x017d7840

08003298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800329c:	4b03      	ldr	r3, [pc, #12]	@ (80032ac <HAL_RCC_GetHCLKFreq+0x14>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000004 	.word	0x20000004

080032b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032b4:	f7ff fff0 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	@ (80032d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	0a9b      	lsrs	r3, r3, #10
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	@ (80032d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40023800 	.word	0x40023800
 80032d4:	08004570 	.word	0x08004570

080032d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032dc:	f7ff ffdc 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0b5b      	lsrs	r3, r3, #13
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4903      	ldr	r1, [pc, #12]	@ (80032fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	08004570 	.word	0x08004570

08003300 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003304:	4b06      	ldr	r3, [pc, #24]	@ (8003320 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330c:	2b80      	cmp	r3, #128	@ 0x80
 800330e:	d104      	bne.n	800331a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003310:	f000 f80a 	bl	8003328 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003314:	4b03      	ldr	r3, [pc, #12]	@ (8003324 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003316:	2280      	movs	r2, #128	@ 0x80
 8003318:	701a      	strb	r2, [r3, #0]
  }
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	4002380e 	.word	0x4002380e

08003328 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e042      	b.n	80033ce <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d106      	bne.n	8003362 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7fd fc81 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2224      	movs	r2, #36	@ 0x24
 8003366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003378:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f972 	bl	8003664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800338e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800339e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b08a      	sub	sp, #40	@ 0x28
 80033da:	af02      	add	r7, sp, #8
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	603b      	str	r3, [r7, #0]
 80033e2:	4613      	mov	r3, r2
 80033e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d175      	bne.n	80034e2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <HAL_UART_Transmit+0x2c>
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e06e      	b.n	80034e4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2221      	movs	r2, #33	@ 0x21
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003414:	f7fd fd8c 	bl	8000f30 <HAL_GetTick>
 8003418:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	88fa      	ldrh	r2, [r7, #6]
 800341e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	88fa      	ldrh	r2, [r7, #6]
 8003424:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800342e:	d108      	bne.n	8003442 <HAL_UART_Transmit+0x6c>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d104      	bne.n	8003442 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	e003      	b.n	800344a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003446:	2300      	movs	r3, #0
 8003448:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800344a:	e02e      	b.n	80034aa <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2200      	movs	r2, #0
 8003454:	2180      	movs	r1, #128	@ 0x80
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f848 	bl	80034ec <UART_WaitOnFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e03a      	b.n	80034e4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003482:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	3302      	adds	r3, #2
 8003488:	61bb      	str	r3, [r7, #24]
 800348a:	e007      	b.n	800349c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	781a      	ldrb	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3301      	adds	r3, #1
 800349a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1cb      	bne.n	800344c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2200      	movs	r2, #0
 80034bc:	2140      	movs	r1, #64	@ 0x40
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f814 	bl	80034ec <UART_WaitOnFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d005      	beq.n	80034d6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e006      	b.n	80034e4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	e000      	b.n	80034e4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034e2:	2302      	movs	r3, #2
  }
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3720      	adds	r7, #32
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fc:	e03b      	b.n	8003576 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d037      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003506:	f7fd fd13 	bl	8000f30 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	6a3a      	ldr	r2, [r7, #32]
 8003512:	429a      	cmp	r2, r3
 8003514:	d302      	bcc.n	800351c <UART_WaitOnFlagUntilTimeout+0x30>
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e03a      	b.n	8003596 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d023      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0x8a>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b80      	cmp	r3, #128	@ 0x80
 8003532:	d020      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b40      	cmp	r3, #64	@ 0x40
 8003538:	d01d      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b08      	cmp	r3, #8
 8003546:	d116      	bne.n	8003576 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f81d 	bl	800359e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2208      	movs	r2, #8
 8003568:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e00f      	b.n	8003596 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4013      	ands	r3, r2
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	429a      	cmp	r2, r3
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	429a      	cmp	r2, r3
 8003592:	d0b4      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800359e:	b480      	push	{r7}
 80035a0:	b095      	sub	sp, #84	@ 0x54
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	330c      	adds	r3, #12
 80035ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	330c      	adds	r3, #12
 80035c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80035c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e5      	bne.n	80035a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3314      	adds	r3, #20
 80035e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3314      	adds	r3, #20
 80035f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003600:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e5      	bne.n	80035da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	2b01      	cmp	r3, #1
 8003614:	d119      	bne.n	800364a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	330c      	adds	r3, #12
 800361c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	e853 3f00 	ldrex	r3, [r3]
 8003624:	60bb      	str	r3, [r7, #8]
   return(result);
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f023 0310 	bic.w	r3, r3, #16
 800362c:	647b      	str	r3, [r7, #68]	@ 0x44
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003636:	61ba      	str	r2, [r7, #24]
 8003638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	6979      	ldr	r1, [r7, #20]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	613b      	str	r3, [r7, #16]
   return(result);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e5      	bne.n	8003616 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003658:	bf00      	nop
 800365a:	3754      	adds	r7, #84	@ 0x54
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003668:	b0c0      	sub	sp, #256	@ 0x100
 800366a:	af00      	add	r7, sp, #0
 800366c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800367c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003680:	68d9      	ldr	r1, [r3, #12]
 8003682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	ea40 0301 	orr.w	r3, r0, r1
 800368c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800368e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	431a      	orrs	r2, r3
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80036bc:	f021 010c 	bic.w	r1, r1, #12
 80036c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036ca:	430b      	orrs	r3, r1
 80036cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036de:	6999      	ldr	r1, [r3, #24]
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	ea40 0301 	orr.w	r3, r0, r1
 80036ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4b8f      	ldr	r3, [pc, #572]	@ (8003930 <UART_SetConfig+0x2cc>)
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d005      	beq.n	8003704 <UART_SetConfig+0xa0>
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b8d      	ldr	r3, [pc, #564]	@ (8003934 <UART_SetConfig+0x2d0>)
 8003700:	429a      	cmp	r2, r3
 8003702:	d104      	bne.n	800370e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003704:	f7ff fde8 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8003708:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800370c:	e003      	b.n	8003716 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800370e:	f7ff fdcf 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 8003712:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003720:	f040 810c 	bne.w	800393c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003728:	2200      	movs	r2, #0
 800372a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800372e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003732:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003736:	4622      	mov	r2, r4
 8003738:	462b      	mov	r3, r5
 800373a:	1891      	adds	r1, r2, r2
 800373c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800373e:	415b      	adcs	r3, r3
 8003740:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003742:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003746:	4621      	mov	r1, r4
 8003748:	eb12 0801 	adds.w	r8, r2, r1
 800374c:	4629      	mov	r1, r5
 800374e:	eb43 0901 	adc.w	r9, r3, r1
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800375e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003766:	4690      	mov	r8, r2
 8003768:	4699      	mov	r9, r3
 800376a:	4623      	mov	r3, r4
 800376c:	eb18 0303 	adds.w	r3, r8, r3
 8003770:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003774:	462b      	mov	r3, r5
 8003776:	eb49 0303 	adc.w	r3, r9, r3
 800377a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800378a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800378e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003792:	460b      	mov	r3, r1
 8003794:	18db      	adds	r3, r3, r3
 8003796:	653b      	str	r3, [r7, #80]	@ 0x50
 8003798:	4613      	mov	r3, r2
 800379a:	eb42 0303 	adc.w	r3, r2, r3
 800379e:	657b      	str	r3, [r7, #84]	@ 0x54
 80037a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80037a8:	f7fc fd72 	bl	8000290 <__aeabi_uldivmod>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4b61      	ldr	r3, [pc, #388]	@ (8003938 <UART_SetConfig+0x2d4>)
 80037b2:	fba3 2302 	umull	r2, r3, r3, r2
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	011c      	lsls	r4, r3, #4
 80037ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037be:	2200      	movs	r2, #0
 80037c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80037c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80037cc:	4642      	mov	r2, r8
 80037ce:	464b      	mov	r3, r9
 80037d0:	1891      	adds	r1, r2, r2
 80037d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80037d4:	415b      	adcs	r3, r3
 80037d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037dc:	4641      	mov	r1, r8
 80037de:	eb12 0a01 	adds.w	sl, r2, r1
 80037e2:	4649      	mov	r1, r9
 80037e4:	eb43 0b01 	adc.w	fp, r3, r1
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037fc:	4692      	mov	sl, r2
 80037fe:	469b      	mov	fp, r3
 8003800:	4643      	mov	r3, r8
 8003802:	eb1a 0303 	adds.w	r3, sl, r3
 8003806:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800380a:	464b      	mov	r3, r9
 800380c:	eb4b 0303 	adc.w	r3, fp, r3
 8003810:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003820:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003824:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003828:	460b      	mov	r3, r1
 800382a:	18db      	adds	r3, r3, r3
 800382c:	643b      	str	r3, [r7, #64]	@ 0x40
 800382e:	4613      	mov	r3, r2
 8003830:	eb42 0303 	adc.w	r3, r2, r3
 8003834:	647b      	str	r3, [r7, #68]	@ 0x44
 8003836:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800383a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800383e:	f7fc fd27 	bl	8000290 <__aeabi_uldivmod>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4611      	mov	r1, r2
 8003848:	4b3b      	ldr	r3, [pc, #236]	@ (8003938 <UART_SetConfig+0x2d4>)
 800384a:	fba3 2301 	umull	r2, r3, r3, r1
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	2264      	movs	r2, #100	@ 0x64
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	1acb      	subs	r3, r1, r3
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800385e:	4b36      	ldr	r3, [pc, #216]	@ (8003938 <UART_SetConfig+0x2d4>)
 8003860:	fba3 2302 	umull	r2, r3, r3, r2
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800386c:	441c      	add	r4, r3
 800386e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003872:	2200      	movs	r2, #0
 8003874:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003878:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800387c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003880:	4642      	mov	r2, r8
 8003882:	464b      	mov	r3, r9
 8003884:	1891      	adds	r1, r2, r2
 8003886:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003888:	415b      	adcs	r3, r3
 800388a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800388c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003890:	4641      	mov	r1, r8
 8003892:	1851      	adds	r1, r2, r1
 8003894:	6339      	str	r1, [r7, #48]	@ 0x30
 8003896:	4649      	mov	r1, r9
 8003898:	414b      	adcs	r3, r1
 800389a:	637b      	str	r3, [r7, #52]	@ 0x34
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80038a8:	4659      	mov	r1, fp
 80038aa:	00cb      	lsls	r3, r1, #3
 80038ac:	4651      	mov	r1, sl
 80038ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038b2:	4651      	mov	r1, sl
 80038b4:	00ca      	lsls	r2, r1, #3
 80038b6:	4610      	mov	r0, r2
 80038b8:	4619      	mov	r1, r3
 80038ba:	4603      	mov	r3, r0
 80038bc:	4642      	mov	r2, r8
 80038be:	189b      	adds	r3, r3, r2
 80038c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038c4:	464b      	mov	r3, r9
 80038c6:	460a      	mov	r2, r1
 80038c8:	eb42 0303 	adc.w	r3, r2, r3
 80038cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038e4:	460b      	mov	r3, r1
 80038e6:	18db      	adds	r3, r3, r3
 80038e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038ea:	4613      	mov	r3, r2
 80038ec:	eb42 0303 	adc.w	r3, r2, r3
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038fa:	f7fc fcc9 	bl	8000290 <__aeabi_uldivmod>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4b0d      	ldr	r3, [pc, #52]	@ (8003938 <UART_SetConfig+0x2d4>)
 8003904:	fba3 1302 	umull	r1, r3, r3, r2
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	2164      	movs	r1, #100	@ 0x64
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	3332      	adds	r3, #50	@ 0x32
 8003916:	4a08      	ldr	r2, [pc, #32]	@ (8003938 <UART_SetConfig+0x2d4>)
 8003918:	fba2 2303 	umull	r2, r3, r2, r3
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	f003 0207 	and.w	r2, r3, #7
 8003922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4422      	add	r2, r4
 800392a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800392c:	e106      	b.n	8003b3c <UART_SetConfig+0x4d8>
 800392e:	bf00      	nop
 8003930:	40011000 	.word	0x40011000
 8003934:	40011400 	.word	0x40011400
 8003938:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800393c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003940:	2200      	movs	r2, #0
 8003942:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003946:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800394a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800394e:	4642      	mov	r2, r8
 8003950:	464b      	mov	r3, r9
 8003952:	1891      	adds	r1, r2, r2
 8003954:	6239      	str	r1, [r7, #32]
 8003956:	415b      	adcs	r3, r3
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
 800395a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800395e:	4641      	mov	r1, r8
 8003960:	1854      	adds	r4, r2, r1
 8003962:	4649      	mov	r1, r9
 8003964:	eb43 0501 	adc.w	r5, r3, r1
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	00eb      	lsls	r3, r5, #3
 8003972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003976:	00e2      	lsls	r2, r4, #3
 8003978:	4614      	mov	r4, r2
 800397a:	461d      	mov	r5, r3
 800397c:	4643      	mov	r3, r8
 800397e:	18e3      	adds	r3, r4, r3
 8003980:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003984:	464b      	mov	r3, r9
 8003986:	eb45 0303 	adc.w	r3, r5, r3
 800398a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800398e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800399a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039aa:	4629      	mov	r1, r5
 80039ac:	008b      	lsls	r3, r1, #2
 80039ae:	4621      	mov	r1, r4
 80039b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039b4:	4621      	mov	r1, r4
 80039b6:	008a      	lsls	r2, r1, #2
 80039b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80039bc:	f7fc fc68 	bl	8000290 <__aeabi_uldivmod>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4b60      	ldr	r3, [pc, #384]	@ (8003b48 <UART_SetConfig+0x4e4>)
 80039c6:	fba3 2302 	umull	r2, r3, r3, r2
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	011c      	lsls	r4, r3, #4
 80039ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039e0:	4642      	mov	r2, r8
 80039e2:	464b      	mov	r3, r9
 80039e4:	1891      	adds	r1, r2, r2
 80039e6:	61b9      	str	r1, [r7, #24]
 80039e8:	415b      	adcs	r3, r3
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039f0:	4641      	mov	r1, r8
 80039f2:	1851      	adds	r1, r2, r1
 80039f4:	6139      	str	r1, [r7, #16]
 80039f6:	4649      	mov	r1, r9
 80039f8:	414b      	adcs	r3, r1
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a08:	4659      	mov	r1, fp
 8003a0a:	00cb      	lsls	r3, r1, #3
 8003a0c:	4651      	mov	r1, sl
 8003a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a12:	4651      	mov	r1, sl
 8003a14:	00ca      	lsls	r2, r1, #3
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4642      	mov	r2, r8
 8003a1e:	189b      	adds	r3, r3, r2
 8003a20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a24:	464b      	mov	r3, r9
 8003a26:	460a      	mov	r2, r1
 8003a28:	eb42 0303 	adc.w	r3, r2, r3
 8003a2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a48:	4649      	mov	r1, r9
 8003a4a:	008b      	lsls	r3, r1, #2
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a52:	4641      	mov	r1, r8
 8003a54:	008a      	lsls	r2, r1, #2
 8003a56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a5a:	f7fc fc19 	bl	8000290 <__aeabi_uldivmod>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4611      	mov	r1, r2
 8003a64:	4b38      	ldr	r3, [pc, #224]	@ (8003b48 <UART_SetConfig+0x4e4>)
 8003a66:	fba3 2301 	umull	r2, r3, r3, r1
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	2264      	movs	r2, #100	@ 0x64
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	1acb      	subs	r3, r1, r3
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	3332      	adds	r3, #50	@ 0x32
 8003a78:	4a33      	ldr	r2, [pc, #204]	@ (8003b48 <UART_SetConfig+0x4e4>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a84:	441c      	add	r4, r3
 8003a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a94:	4642      	mov	r2, r8
 8003a96:	464b      	mov	r3, r9
 8003a98:	1891      	adds	r1, r2, r2
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	415b      	adcs	r3, r3
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aa4:	4641      	mov	r1, r8
 8003aa6:	1851      	adds	r1, r2, r1
 8003aa8:	6039      	str	r1, [r7, #0]
 8003aaa:	4649      	mov	r1, r9
 8003aac:	414b      	adcs	r3, r1
 8003aae:	607b      	str	r3, [r7, #4]
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003abc:	4659      	mov	r1, fp
 8003abe:	00cb      	lsls	r3, r1, #3
 8003ac0:	4651      	mov	r1, sl
 8003ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ac6:	4651      	mov	r1, sl
 8003ac8:	00ca      	lsls	r2, r1, #3
 8003aca:	4610      	mov	r0, r2
 8003acc:	4619      	mov	r1, r3
 8003ace:	4603      	mov	r3, r0
 8003ad0:	4642      	mov	r2, r8
 8003ad2:	189b      	adds	r3, r3, r2
 8003ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ad6:	464b      	mov	r3, r9
 8003ad8:	460a      	mov	r2, r1
 8003ada:	eb42 0303 	adc.w	r3, r2, r3
 8003ade:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003aea:	667a      	str	r2, [r7, #100]	@ 0x64
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003af8:	4649      	mov	r1, r9
 8003afa:	008b      	lsls	r3, r1, #2
 8003afc:	4641      	mov	r1, r8
 8003afe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b02:	4641      	mov	r1, r8
 8003b04:	008a      	lsls	r2, r1, #2
 8003b06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b0a:	f7fc fbc1 	bl	8000290 <__aeabi_uldivmod>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4b0d      	ldr	r3, [pc, #52]	@ (8003b48 <UART_SetConfig+0x4e4>)
 8003b14:	fba3 1302 	umull	r1, r3, r3, r2
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	2164      	movs	r1, #100	@ 0x64
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	3332      	adds	r3, #50	@ 0x32
 8003b26:	4a08      	ldr	r2, [pc, #32]	@ (8003b48 <UART_SetConfig+0x4e4>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	f003 020f 	and.w	r2, r3, #15
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4422      	add	r2, r4
 8003b3a:	609a      	str	r2, [r3, #8]
}
 8003b3c:	bf00      	nop
 8003b3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b42:	46bd      	mov	sp, r7
 8003b44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b48:	51eb851f 	.word	0x51eb851f

08003b4c <sniprintf>:
 8003b4c:	b40c      	push	{r2, r3}
 8003b4e:	b530      	push	{r4, r5, lr}
 8003b50:	4b18      	ldr	r3, [pc, #96]	@ (8003bb4 <sniprintf+0x68>)
 8003b52:	1e0c      	subs	r4, r1, #0
 8003b54:	681d      	ldr	r5, [r3, #0]
 8003b56:	b09d      	sub	sp, #116	@ 0x74
 8003b58:	da08      	bge.n	8003b6c <sniprintf+0x20>
 8003b5a:	238b      	movs	r3, #139	@ 0x8b
 8003b5c:	602b      	str	r3, [r5, #0]
 8003b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b62:	b01d      	add	sp, #116	@ 0x74
 8003b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b68:	b002      	add	sp, #8
 8003b6a:	4770      	bx	lr
 8003b6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003b70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003b7a:	bf14      	ite	ne
 8003b7c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003b80:	4623      	moveq	r3, r4
 8003b82:	9304      	str	r3, [sp, #16]
 8003b84:	9307      	str	r3, [sp, #28]
 8003b86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b8a:	9002      	str	r0, [sp, #8]
 8003b8c:	9006      	str	r0, [sp, #24]
 8003b8e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003b92:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003b94:	ab21      	add	r3, sp, #132	@ 0x84
 8003b96:	a902      	add	r1, sp, #8
 8003b98:	4628      	mov	r0, r5
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	f000 f994 	bl	8003ec8 <_svfiprintf_r>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	bfbc      	itt	lt
 8003ba4:	238b      	movlt	r3, #139	@ 0x8b
 8003ba6:	602b      	strlt	r3, [r5, #0]
 8003ba8:	2c00      	cmp	r4, #0
 8003baa:	d0da      	beq.n	8003b62 <sniprintf+0x16>
 8003bac:	9b02      	ldr	r3, [sp, #8]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	701a      	strb	r2, [r3, #0]
 8003bb2:	e7d6      	b.n	8003b62 <sniprintf+0x16>
 8003bb4:	20000010 	.word	0x20000010

08003bb8 <memset>:
 8003bb8:	4402      	add	r2, r0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d100      	bne.n	8003bc2 <memset+0xa>
 8003bc0:	4770      	bx	lr
 8003bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc6:	e7f9      	b.n	8003bbc <memset+0x4>

08003bc8 <__errno>:
 8003bc8:	4b01      	ldr	r3, [pc, #4]	@ (8003bd0 <__errno+0x8>)
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000010 	.word	0x20000010

08003bd4 <__libc_init_array>:
 8003bd4:	b570      	push	{r4, r5, r6, lr}
 8003bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8003c0c <__libc_init_array+0x38>)
 8003bd8:	4c0d      	ldr	r4, [pc, #52]	@ (8003c10 <__libc_init_array+0x3c>)
 8003bda:	1b64      	subs	r4, r4, r5
 8003bdc:	10a4      	asrs	r4, r4, #2
 8003bde:	2600      	movs	r6, #0
 8003be0:	42a6      	cmp	r6, r4
 8003be2:	d109      	bne.n	8003bf8 <__libc_init_array+0x24>
 8003be4:	4d0b      	ldr	r5, [pc, #44]	@ (8003c14 <__libc_init_array+0x40>)
 8003be6:	4c0c      	ldr	r4, [pc, #48]	@ (8003c18 <__libc_init_array+0x44>)
 8003be8:	f000 fc64 	bl	80044b4 <_init>
 8003bec:	1b64      	subs	r4, r4, r5
 8003bee:	10a4      	asrs	r4, r4, #2
 8003bf0:	2600      	movs	r6, #0
 8003bf2:	42a6      	cmp	r6, r4
 8003bf4:	d105      	bne.n	8003c02 <__libc_init_array+0x2e>
 8003bf6:	bd70      	pop	{r4, r5, r6, pc}
 8003bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bfc:	4798      	blx	r3
 8003bfe:	3601      	adds	r6, #1
 8003c00:	e7ee      	b.n	8003be0 <__libc_init_array+0xc>
 8003c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c06:	4798      	blx	r3
 8003c08:	3601      	adds	r6, #1
 8003c0a:	e7f2      	b.n	8003bf2 <__libc_init_array+0x1e>
 8003c0c:	080045bc 	.word	0x080045bc
 8003c10:	080045bc 	.word	0x080045bc
 8003c14:	080045bc 	.word	0x080045bc
 8003c18:	080045c0 	.word	0x080045c0

08003c1c <__retarget_lock_acquire_recursive>:
 8003c1c:	4770      	bx	lr

08003c1e <__retarget_lock_release_recursive>:
 8003c1e:	4770      	bx	lr

08003c20 <_free_r>:
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	4605      	mov	r5, r0
 8003c24:	2900      	cmp	r1, #0
 8003c26:	d041      	beq.n	8003cac <_free_r+0x8c>
 8003c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c2c:	1f0c      	subs	r4, r1, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	bfb8      	it	lt
 8003c32:	18e4      	addlt	r4, r4, r3
 8003c34:	f000 f8e0 	bl	8003df8 <__malloc_lock>
 8003c38:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb0 <_free_r+0x90>)
 8003c3a:	6813      	ldr	r3, [r2, #0]
 8003c3c:	b933      	cbnz	r3, 8003c4c <_free_r+0x2c>
 8003c3e:	6063      	str	r3, [r4, #4]
 8003c40:	6014      	str	r4, [r2, #0]
 8003c42:	4628      	mov	r0, r5
 8003c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c48:	f000 b8dc 	b.w	8003e04 <__malloc_unlock>
 8003c4c:	42a3      	cmp	r3, r4
 8003c4e:	d908      	bls.n	8003c62 <_free_r+0x42>
 8003c50:	6820      	ldr	r0, [r4, #0]
 8003c52:	1821      	adds	r1, r4, r0
 8003c54:	428b      	cmp	r3, r1
 8003c56:	bf01      	itttt	eq
 8003c58:	6819      	ldreq	r1, [r3, #0]
 8003c5a:	685b      	ldreq	r3, [r3, #4]
 8003c5c:	1809      	addeq	r1, r1, r0
 8003c5e:	6021      	streq	r1, [r4, #0]
 8003c60:	e7ed      	b.n	8003c3e <_free_r+0x1e>
 8003c62:	461a      	mov	r2, r3
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	b10b      	cbz	r3, 8003c6c <_free_r+0x4c>
 8003c68:	42a3      	cmp	r3, r4
 8003c6a:	d9fa      	bls.n	8003c62 <_free_r+0x42>
 8003c6c:	6811      	ldr	r1, [r2, #0]
 8003c6e:	1850      	adds	r0, r2, r1
 8003c70:	42a0      	cmp	r0, r4
 8003c72:	d10b      	bne.n	8003c8c <_free_r+0x6c>
 8003c74:	6820      	ldr	r0, [r4, #0]
 8003c76:	4401      	add	r1, r0
 8003c78:	1850      	adds	r0, r2, r1
 8003c7a:	4283      	cmp	r3, r0
 8003c7c:	6011      	str	r1, [r2, #0]
 8003c7e:	d1e0      	bne.n	8003c42 <_free_r+0x22>
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	6053      	str	r3, [r2, #4]
 8003c86:	4408      	add	r0, r1
 8003c88:	6010      	str	r0, [r2, #0]
 8003c8a:	e7da      	b.n	8003c42 <_free_r+0x22>
 8003c8c:	d902      	bls.n	8003c94 <_free_r+0x74>
 8003c8e:	230c      	movs	r3, #12
 8003c90:	602b      	str	r3, [r5, #0]
 8003c92:	e7d6      	b.n	8003c42 <_free_r+0x22>
 8003c94:	6820      	ldr	r0, [r4, #0]
 8003c96:	1821      	adds	r1, r4, r0
 8003c98:	428b      	cmp	r3, r1
 8003c9a:	bf04      	itt	eq
 8003c9c:	6819      	ldreq	r1, [r3, #0]
 8003c9e:	685b      	ldreq	r3, [r3, #4]
 8003ca0:	6063      	str	r3, [r4, #4]
 8003ca2:	bf04      	itt	eq
 8003ca4:	1809      	addeq	r1, r1, r0
 8003ca6:	6021      	streq	r1, [r4, #0]
 8003ca8:	6054      	str	r4, [r2, #4]
 8003caa:	e7ca      	b.n	8003c42 <_free_r+0x22>
 8003cac:	bd38      	pop	{r3, r4, r5, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000344 	.word	0x20000344

08003cb4 <sbrk_aligned>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	4e0f      	ldr	r6, [pc, #60]	@ (8003cf4 <sbrk_aligned+0x40>)
 8003cb8:	460c      	mov	r4, r1
 8003cba:	6831      	ldr	r1, [r6, #0]
 8003cbc:	4605      	mov	r5, r0
 8003cbe:	b911      	cbnz	r1, 8003cc6 <sbrk_aligned+0x12>
 8003cc0:	f000 fba4 	bl	800440c <_sbrk_r>
 8003cc4:	6030      	str	r0, [r6, #0]
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	4628      	mov	r0, r5
 8003cca:	f000 fb9f 	bl	800440c <_sbrk_r>
 8003cce:	1c43      	adds	r3, r0, #1
 8003cd0:	d103      	bne.n	8003cda <sbrk_aligned+0x26>
 8003cd2:	f04f 34ff 	mov.w	r4, #4294967295
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	bd70      	pop	{r4, r5, r6, pc}
 8003cda:	1cc4      	adds	r4, r0, #3
 8003cdc:	f024 0403 	bic.w	r4, r4, #3
 8003ce0:	42a0      	cmp	r0, r4
 8003ce2:	d0f8      	beq.n	8003cd6 <sbrk_aligned+0x22>
 8003ce4:	1a21      	subs	r1, r4, r0
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	f000 fb90 	bl	800440c <_sbrk_r>
 8003cec:	3001      	adds	r0, #1
 8003cee:	d1f2      	bne.n	8003cd6 <sbrk_aligned+0x22>
 8003cf0:	e7ef      	b.n	8003cd2 <sbrk_aligned+0x1e>
 8003cf2:	bf00      	nop
 8003cf4:	20000340 	.word	0x20000340

08003cf8 <_malloc_r>:
 8003cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cfc:	1ccd      	adds	r5, r1, #3
 8003cfe:	f025 0503 	bic.w	r5, r5, #3
 8003d02:	3508      	adds	r5, #8
 8003d04:	2d0c      	cmp	r5, #12
 8003d06:	bf38      	it	cc
 8003d08:	250c      	movcc	r5, #12
 8003d0a:	2d00      	cmp	r5, #0
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	db01      	blt.n	8003d14 <_malloc_r+0x1c>
 8003d10:	42a9      	cmp	r1, r5
 8003d12:	d904      	bls.n	8003d1e <_malloc_r+0x26>
 8003d14:	230c      	movs	r3, #12
 8003d16:	6033      	str	r3, [r6, #0]
 8003d18:	2000      	movs	r0, #0
 8003d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003df4 <_malloc_r+0xfc>
 8003d22:	f000 f869 	bl	8003df8 <__malloc_lock>
 8003d26:	f8d8 3000 	ldr.w	r3, [r8]
 8003d2a:	461c      	mov	r4, r3
 8003d2c:	bb44      	cbnz	r4, 8003d80 <_malloc_r+0x88>
 8003d2e:	4629      	mov	r1, r5
 8003d30:	4630      	mov	r0, r6
 8003d32:	f7ff ffbf 	bl	8003cb4 <sbrk_aligned>
 8003d36:	1c43      	adds	r3, r0, #1
 8003d38:	4604      	mov	r4, r0
 8003d3a:	d158      	bne.n	8003dee <_malloc_r+0xf6>
 8003d3c:	f8d8 4000 	ldr.w	r4, [r8]
 8003d40:	4627      	mov	r7, r4
 8003d42:	2f00      	cmp	r7, #0
 8003d44:	d143      	bne.n	8003dce <_malloc_r+0xd6>
 8003d46:	2c00      	cmp	r4, #0
 8003d48:	d04b      	beq.n	8003de2 <_malloc_r+0xea>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	4639      	mov	r1, r7
 8003d4e:	4630      	mov	r0, r6
 8003d50:	eb04 0903 	add.w	r9, r4, r3
 8003d54:	f000 fb5a 	bl	800440c <_sbrk_r>
 8003d58:	4581      	cmp	r9, r0
 8003d5a:	d142      	bne.n	8003de2 <_malloc_r+0xea>
 8003d5c:	6821      	ldr	r1, [r4, #0]
 8003d5e:	1a6d      	subs	r5, r5, r1
 8003d60:	4629      	mov	r1, r5
 8003d62:	4630      	mov	r0, r6
 8003d64:	f7ff ffa6 	bl	8003cb4 <sbrk_aligned>
 8003d68:	3001      	adds	r0, #1
 8003d6a:	d03a      	beq.n	8003de2 <_malloc_r+0xea>
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	442b      	add	r3, r5
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	f8d8 3000 	ldr.w	r3, [r8]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	bb62      	cbnz	r2, 8003dd4 <_malloc_r+0xdc>
 8003d7a:	f8c8 7000 	str.w	r7, [r8]
 8003d7e:	e00f      	b.n	8003da0 <_malloc_r+0xa8>
 8003d80:	6822      	ldr	r2, [r4, #0]
 8003d82:	1b52      	subs	r2, r2, r5
 8003d84:	d420      	bmi.n	8003dc8 <_malloc_r+0xd0>
 8003d86:	2a0b      	cmp	r2, #11
 8003d88:	d917      	bls.n	8003dba <_malloc_r+0xc2>
 8003d8a:	1961      	adds	r1, r4, r5
 8003d8c:	42a3      	cmp	r3, r4
 8003d8e:	6025      	str	r5, [r4, #0]
 8003d90:	bf18      	it	ne
 8003d92:	6059      	strne	r1, [r3, #4]
 8003d94:	6863      	ldr	r3, [r4, #4]
 8003d96:	bf08      	it	eq
 8003d98:	f8c8 1000 	streq.w	r1, [r8]
 8003d9c:	5162      	str	r2, [r4, r5]
 8003d9e:	604b      	str	r3, [r1, #4]
 8003da0:	4630      	mov	r0, r6
 8003da2:	f000 f82f 	bl	8003e04 <__malloc_unlock>
 8003da6:	f104 000b 	add.w	r0, r4, #11
 8003daa:	1d23      	adds	r3, r4, #4
 8003dac:	f020 0007 	bic.w	r0, r0, #7
 8003db0:	1ac2      	subs	r2, r0, r3
 8003db2:	bf1c      	itt	ne
 8003db4:	1a1b      	subne	r3, r3, r0
 8003db6:	50a3      	strne	r3, [r4, r2]
 8003db8:	e7af      	b.n	8003d1a <_malloc_r+0x22>
 8003dba:	6862      	ldr	r2, [r4, #4]
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	bf0c      	ite	eq
 8003dc0:	f8c8 2000 	streq.w	r2, [r8]
 8003dc4:	605a      	strne	r2, [r3, #4]
 8003dc6:	e7eb      	b.n	8003da0 <_malloc_r+0xa8>
 8003dc8:	4623      	mov	r3, r4
 8003dca:	6864      	ldr	r4, [r4, #4]
 8003dcc:	e7ae      	b.n	8003d2c <_malloc_r+0x34>
 8003dce:	463c      	mov	r4, r7
 8003dd0:	687f      	ldr	r7, [r7, #4]
 8003dd2:	e7b6      	b.n	8003d42 <_malloc_r+0x4a>
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	42a3      	cmp	r3, r4
 8003dda:	d1fb      	bne.n	8003dd4 <_malloc_r+0xdc>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	6053      	str	r3, [r2, #4]
 8003de0:	e7de      	b.n	8003da0 <_malloc_r+0xa8>
 8003de2:	230c      	movs	r3, #12
 8003de4:	6033      	str	r3, [r6, #0]
 8003de6:	4630      	mov	r0, r6
 8003de8:	f000 f80c 	bl	8003e04 <__malloc_unlock>
 8003dec:	e794      	b.n	8003d18 <_malloc_r+0x20>
 8003dee:	6005      	str	r5, [r0, #0]
 8003df0:	e7d6      	b.n	8003da0 <_malloc_r+0xa8>
 8003df2:	bf00      	nop
 8003df4:	20000344 	.word	0x20000344

08003df8 <__malloc_lock>:
 8003df8:	4801      	ldr	r0, [pc, #4]	@ (8003e00 <__malloc_lock+0x8>)
 8003dfa:	f7ff bf0f 	b.w	8003c1c <__retarget_lock_acquire_recursive>
 8003dfe:	bf00      	nop
 8003e00:	2000033c 	.word	0x2000033c

08003e04 <__malloc_unlock>:
 8003e04:	4801      	ldr	r0, [pc, #4]	@ (8003e0c <__malloc_unlock+0x8>)
 8003e06:	f7ff bf0a 	b.w	8003c1e <__retarget_lock_release_recursive>
 8003e0a:	bf00      	nop
 8003e0c:	2000033c 	.word	0x2000033c

08003e10 <__ssputs_r>:
 8003e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e14:	688e      	ldr	r6, [r1, #8]
 8003e16:	461f      	mov	r7, r3
 8003e18:	42be      	cmp	r6, r7
 8003e1a:	680b      	ldr	r3, [r1, #0]
 8003e1c:	4682      	mov	sl, r0
 8003e1e:	460c      	mov	r4, r1
 8003e20:	4690      	mov	r8, r2
 8003e22:	d82d      	bhi.n	8003e80 <__ssputs_r+0x70>
 8003e24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e2c:	d026      	beq.n	8003e7c <__ssputs_r+0x6c>
 8003e2e:	6965      	ldr	r5, [r4, #20]
 8003e30:	6909      	ldr	r1, [r1, #16]
 8003e32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e36:	eba3 0901 	sub.w	r9, r3, r1
 8003e3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e3e:	1c7b      	adds	r3, r7, #1
 8003e40:	444b      	add	r3, r9
 8003e42:	106d      	asrs	r5, r5, #1
 8003e44:	429d      	cmp	r5, r3
 8003e46:	bf38      	it	cc
 8003e48:	461d      	movcc	r5, r3
 8003e4a:	0553      	lsls	r3, r2, #21
 8003e4c:	d527      	bpl.n	8003e9e <__ssputs_r+0x8e>
 8003e4e:	4629      	mov	r1, r5
 8003e50:	f7ff ff52 	bl	8003cf8 <_malloc_r>
 8003e54:	4606      	mov	r6, r0
 8003e56:	b360      	cbz	r0, 8003eb2 <__ssputs_r+0xa2>
 8003e58:	6921      	ldr	r1, [r4, #16]
 8003e5a:	464a      	mov	r2, r9
 8003e5c:	f000 fae6 	bl	800442c <memcpy>
 8003e60:	89a3      	ldrh	r3, [r4, #12]
 8003e62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e6a:	81a3      	strh	r3, [r4, #12]
 8003e6c:	6126      	str	r6, [r4, #16]
 8003e6e:	6165      	str	r5, [r4, #20]
 8003e70:	444e      	add	r6, r9
 8003e72:	eba5 0509 	sub.w	r5, r5, r9
 8003e76:	6026      	str	r6, [r4, #0]
 8003e78:	60a5      	str	r5, [r4, #8]
 8003e7a:	463e      	mov	r6, r7
 8003e7c:	42be      	cmp	r6, r7
 8003e7e:	d900      	bls.n	8003e82 <__ssputs_r+0x72>
 8003e80:	463e      	mov	r6, r7
 8003e82:	6820      	ldr	r0, [r4, #0]
 8003e84:	4632      	mov	r2, r6
 8003e86:	4641      	mov	r1, r8
 8003e88:	f000 faa6 	bl	80043d8 <memmove>
 8003e8c:	68a3      	ldr	r3, [r4, #8]
 8003e8e:	1b9b      	subs	r3, r3, r6
 8003e90:	60a3      	str	r3, [r4, #8]
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	4433      	add	r3, r6
 8003e96:	6023      	str	r3, [r4, #0]
 8003e98:	2000      	movs	r0, #0
 8003e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e9e:	462a      	mov	r2, r5
 8003ea0:	f000 fad2 	bl	8004448 <_realloc_r>
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	d1e0      	bne.n	8003e6c <__ssputs_r+0x5c>
 8003eaa:	6921      	ldr	r1, [r4, #16]
 8003eac:	4650      	mov	r0, sl
 8003eae:	f7ff feb7 	bl	8003c20 <_free_r>
 8003eb2:	230c      	movs	r3, #12
 8003eb4:	f8ca 3000 	str.w	r3, [sl]
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ebe:	81a3      	strh	r3, [r4, #12]
 8003ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec4:	e7e9      	b.n	8003e9a <__ssputs_r+0x8a>
	...

08003ec8 <_svfiprintf_r>:
 8003ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ecc:	4698      	mov	r8, r3
 8003ece:	898b      	ldrh	r3, [r1, #12]
 8003ed0:	061b      	lsls	r3, r3, #24
 8003ed2:	b09d      	sub	sp, #116	@ 0x74
 8003ed4:	4607      	mov	r7, r0
 8003ed6:	460d      	mov	r5, r1
 8003ed8:	4614      	mov	r4, r2
 8003eda:	d510      	bpl.n	8003efe <_svfiprintf_r+0x36>
 8003edc:	690b      	ldr	r3, [r1, #16]
 8003ede:	b973      	cbnz	r3, 8003efe <_svfiprintf_r+0x36>
 8003ee0:	2140      	movs	r1, #64	@ 0x40
 8003ee2:	f7ff ff09 	bl	8003cf8 <_malloc_r>
 8003ee6:	6028      	str	r0, [r5, #0]
 8003ee8:	6128      	str	r0, [r5, #16]
 8003eea:	b930      	cbnz	r0, 8003efa <_svfiprintf_r+0x32>
 8003eec:	230c      	movs	r3, #12
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef4:	b01d      	add	sp, #116	@ 0x74
 8003ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003efa:	2340      	movs	r3, #64	@ 0x40
 8003efc:	616b      	str	r3, [r5, #20]
 8003efe:	2300      	movs	r3, #0
 8003f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f02:	2320      	movs	r3, #32
 8003f04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f0c:	2330      	movs	r3, #48	@ 0x30
 8003f0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80040ac <_svfiprintf_r+0x1e4>
 8003f12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f16:	f04f 0901 	mov.w	r9, #1
 8003f1a:	4623      	mov	r3, r4
 8003f1c:	469a      	mov	sl, r3
 8003f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f22:	b10a      	cbz	r2, 8003f28 <_svfiprintf_r+0x60>
 8003f24:	2a25      	cmp	r2, #37	@ 0x25
 8003f26:	d1f9      	bne.n	8003f1c <_svfiprintf_r+0x54>
 8003f28:	ebba 0b04 	subs.w	fp, sl, r4
 8003f2c:	d00b      	beq.n	8003f46 <_svfiprintf_r+0x7e>
 8003f2e:	465b      	mov	r3, fp
 8003f30:	4622      	mov	r2, r4
 8003f32:	4629      	mov	r1, r5
 8003f34:	4638      	mov	r0, r7
 8003f36:	f7ff ff6b 	bl	8003e10 <__ssputs_r>
 8003f3a:	3001      	adds	r0, #1
 8003f3c:	f000 80a7 	beq.w	800408e <_svfiprintf_r+0x1c6>
 8003f40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f42:	445a      	add	r2, fp
 8003f44:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f46:	f89a 3000 	ldrb.w	r3, [sl]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 809f 	beq.w	800408e <_svfiprintf_r+0x1c6>
 8003f50:	2300      	movs	r3, #0
 8003f52:	f04f 32ff 	mov.w	r2, #4294967295
 8003f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f5a:	f10a 0a01 	add.w	sl, sl, #1
 8003f5e:	9304      	str	r3, [sp, #16]
 8003f60:	9307      	str	r3, [sp, #28]
 8003f62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f66:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f68:	4654      	mov	r4, sl
 8003f6a:	2205      	movs	r2, #5
 8003f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f70:	484e      	ldr	r0, [pc, #312]	@ (80040ac <_svfiprintf_r+0x1e4>)
 8003f72:	f7fc f93d 	bl	80001f0 <memchr>
 8003f76:	9a04      	ldr	r2, [sp, #16]
 8003f78:	b9d8      	cbnz	r0, 8003fb2 <_svfiprintf_r+0xea>
 8003f7a:	06d0      	lsls	r0, r2, #27
 8003f7c:	bf44      	itt	mi
 8003f7e:	2320      	movmi	r3, #32
 8003f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f84:	0711      	lsls	r1, r2, #28
 8003f86:	bf44      	itt	mi
 8003f88:	232b      	movmi	r3, #43	@ 0x2b
 8003f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f92:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f94:	d015      	beq.n	8003fc2 <_svfiprintf_r+0xfa>
 8003f96:	9a07      	ldr	r2, [sp, #28]
 8003f98:	4654      	mov	r4, sl
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	f04f 0c0a 	mov.w	ip, #10
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fa6:	3b30      	subs	r3, #48	@ 0x30
 8003fa8:	2b09      	cmp	r3, #9
 8003faa:	d94b      	bls.n	8004044 <_svfiprintf_r+0x17c>
 8003fac:	b1b0      	cbz	r0, 8003fdc <_svfiprintf_r+0x114>
 8003fae:	9207      	str	r2, [sp, #28]
 8003fb0:	e014      	b.n	8003fdc <_svfiprintf_r+0x114>
 8003fb2:	eba0 0308 	sub.w	r3, r0, r8
 8003fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	9304      	str	r3, [sp, #16]
 8003fbe:	46a2      	mov	sl, r4
 8003fc0:	e7d2      	b.n	8003f68 <_svfiprintf_r+0xa0>
 8003fc2:	9b03      	ldr	r3, [sp, #12]
 8003fc4:	1d19      	adds	r1, r3, #4
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	9103      	str	r1, [sp, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bfbb      	ittet	lt
 8003fce:	425b      	neglt	r3, r3
 8003fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8003fd4:	9307      	strge	r3, [sp, #28]
 8003fd6:	9307      	strlt	r3, [sp, #28]
 8003fd8:	bfb8      	it	lt
 8003fda:	9204      	strlt	r2, [sp, #16]
 8003fdc:	7823      	ldrb	r3, [r4, #0]
 8003fde:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fe0:	d10a      	bne.n	8003ff8 <_svfiprintf_r+0x130>
 8003fe2:	7863      	ldrb	r3, [r4, #1]
 8003fe4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fe6:	d132      	bne.n	800404e <_svfiprintf_r+0x186>
 8003fe8:	9b03      	ldr	r3, [sp, #12]
 8003fea:	1d1a      	adds	r2, r3, #4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	9203      	str	r2, [sp, #12]
 8003ff0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ff4:	3402      	adds	r4, #2
 8003ff6:	9305      	str	r3, [sp, #20]
 8003ff8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80040bc <_svfiprintf_r+0x1f4>
 8003ffc:	7821      	ldrb	r1, [r4, #0]
 8003ffe:	2203      	movs	r2, #3
 8004000:	4650      	mov	r0, sl
 8004002:	f7fc f8f5 	bl	80001f0 <memchr>
 8004006:	b138      	cbz	r0, 8004018 <_svfiprintf_r+0x150>
 8004008:	9b04      	ldr	r3, [sp, #16]
 800400a:	eba0 000a 	sub.w	r0, r0, sl
 800400e:	2240      	movs	r2, #64	@ 0x40
 8004010:	4082      	lsls	r2, r0
 8004012:	4313      	orrs	r3, r2
 8004014:	3401      	adds	r4, #1
 8004016:	9304      	str	r3, [sp, #16]
 8004018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800401c:	4824      	ldr	r0, [pc, #144]	@ (80040b0 <_svfiprintf_r+0x1e8>)
 800401e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004022:	2206      	movs	r2, #6
 8004024:	f7fc f8e4 	bl	80001f0 <memchr>
 8004028:	2800      	cmp	r0, #0
 800402a:	d036      	beq.n	800409a <_svfiprintf_r+0x1d2>
 800402c:	4b21      	ldr	r3, [pc, #132]	@ (80040b4 <_svfiprintf_r+0x1ec>)
 800402e:	bb1b      	cbnz	r3, 8004078 <_svfiprintf_r+0x1b0>
 8004030:	9b03      	ldr	r3, [sp, #12]
 8004032:	3307      	adds	r3, #7
 8004034:	f023 0307 	bic.w	r3, r3, #7
 8004038:	3308      	adds	r3, #8
 800403a:	9303      	str	r3, [sp, #12]
 800403c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800403e:	4433      	add	r3, r6
 8004040:	9309      	str	r3, [sp, #36]	@ 0x24
 8004042:	e76a      	b.n	8003f1a <_svfiprintf_r+0x52>
 8004044:	fb0c 3202 	mla	r2, ip, r2, r3
 8004048:	460c      	mov	r4, r1
 800404a:	2001      	movs	r0, #1
 800404c:	e7a8      	b.n	8003fa0 <_svfiprintf_r+0xd8>
 800404e:	2300      	movs	r3, #0
 8004050:	3401      	adds	r4, #1
 8004052:	9305      	str	r3, [sp, #20]
 8004054:	4619      	mov	r1, r3
 8004056:	f04f 0c0a 	mov.w	ip, #10
 800405a:	4620      	mov	r0, r4
 800405c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004060:	3a30      	subs	r2, #48	@ 0x30
 8004062:	2a09      	cmp	r2, #9
 8004064:	d903      	bls.n	800406e <_svfiprintf_r+0x1a6>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0c6      	beq.n	8003ff8 <_svfiprintf_r+0x130>
 800406a:	9105      	str	r1, [sp, #20]
 800406c:	e7c4      	b.n	8003ff8 <_svfiprintf_r+0x130>
 800406e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004072:	4604      	mov	r4, r0
 8004074:	2301      	movs	r3, #1
 8004076:	e7f0      	b.n	800405a <_svfiprintf_r+0x192>
 8004078:	ab03      	add	r3, sp, #12
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	462a      	mov	r2, r5
 800407e:	4b0e      	ldr	r3, [pc, #56]	@ (80040b8 <_svfiprintf_r+0x1f0>)
 8004080:	a904      	add	r1, sp, #16
 8004082:	4638      	mov	r0, r7
 8004084:	f3af 8000 	nop.w
 8004088:	1c42      	adds	r2, r0, #1
 800408a:	4606      	mov	r6, r0
 800408c:	d1d6      	bne.n	800403c <_svfiprintf_r+0x174>
 800408e:	89ab      	ldrh	r3, [r5, #12]
 8004090:	065b      	lsls	r3, r3, #25
 8004092:	f53f af2d 	bmi.w	8003ef0 <_svfiprintf_r+0x28>
 8004096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004098:	e72c      	b.n	8003ef4 <_svfiprintf_r+0x2c>
 800409a:	ab03      	add	r3, sp, #12
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	462a      	mov	r2, r5
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <_svfiprintf_r+0x1f0>)
 80040a2:	a904      	add	r1, sp, #16
 80040a4:	4638      	mov	r0, r7
 80040a6:	f000 f879 	bl	800419c <_printf_i>
 80040aa:	e7ed      	b.n	8004088 <_svfiprintf_r+0x1c0>
 80040ac:	08004580 	.word	0x08004580
 80040b0:	0800458a 	.word	0x0800458a
 80040b4:	00000000 	.word	0x00000000
 80040b8:	08003e11 	.word	0x08003e11
 80040bc:	08004586 	.word	0x08004586

080040c0 <_printf_common>:
 80040c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c4:	4616      	mov	r6, r2
 80040c6:	4698      	mov	r8, r3
 80040c8:	688a      	ldr	r2, [r1, #8]
 80040ca:	690b      	ldr	r3, [r1, #16]
 80040cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040d0:	4293      	cmp	r3, r2
 80040d2:	bfb8      	it	lt
 80040d4:	4613      	movlt	r3, r2
 80040d6:	6033      	str	r3, [r6, #0]
 80040d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040dc:	4607      	mov	r7, r0
 80040de:	460c      	mov	r4, r1
 80040e0:	b10a      	cbz	r2, 80040e6 <_printf_common+0x26>
 80040e2:	3301      	adds	r3, #1
 80040e4:	6033      	str	r3, [r6, #0]
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	0699      	lsls	r1, r3, #26
 80040ea:	bf42      	ittt	mi
 80040ec:	6833      	ldrmi	r3, [r6, #0]
 80040ee:	3302      	addmi	r3, #2
 80040f0:	6033      	strmi	r3, [r6, #0]
 80040f2:	6825      	ldr	r5, [r4, #0]
 80040f4:	f015 0506 	ands.w	r5, r5, #6
 80040f8:	d106      	bne.n	8004108 <_printf_common+0x48>
 80040fa:	f104 0a19 	add.w	sl, r4, #25
 80040fe:	68e3      	ldr	r3, [r4, #12]
 8004100:	6832      	ldr	r2, [r6, #0]
 8004102:	1a9b      	subs	r3, r3, r2
 8004104:	42ab      	cmp	r3, r5
 8004106:	dc26      	bgt.n	8004156 <_printf_common+0x96>
 8004108:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800410c:	6822      	ldr	r2, [r4, #0]
 800410e:	3b00      	subs	r3, #0
 8004110:	bf18      	it	ne
 8004112:	2301      	movne	r3, #1
 8004114:	0692      	lsls	r2, r2, #26
 8004116:	d42b      	bmi.n	8004170 <_printf_common+0xb0>
 8004118:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800411c:	4641      	mov	r1, r8
 800411e:	4638      	mov	r0, r7
 8004120:	47c8      	blx	r9
 8004122:	3001      	adds	r0, #1
 8004124:	d01e      	beq.n	8004164 <_printf_common+0xa4>
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	6922      	ldr	r2, [r4, #16]
 800412a:	f003 0306 	and.w	r3, r3, #6
 800412e:	2b04      	cmp	r3, #4
 8004130:	bf02      	ittt	eq
 8004132:	68e5      	ldreq	r5, [r4, #12]
 8004134:	6833      	ldreq	r3, [r6, #0]
 8004136:	1aed      	subeq	r5, r5, r3
 8004138:	68a3      	ldr	r3, [r4, #8]
 800413a:	bf0c      	ite	eq
 800413c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004140:	2500      	movne	r5, #0
 8004142:	4293      	cmp	r3, r2
 8004144:	bfc4      	itt	gt
 8004146:	1a9b      	subgt	r3, r3, r2
 8004148:	18ed      	addgt	r5, r5, r3
 800414a:	2600      	movs	r6, #0
 800414c:	341a      	adds	r4, #26
 800414e:	42b5      	cmp	r5, r6
 8004150:	d11a      	bne.n	8004188 <_printf_common+0xc8>
 8004152:	2000      	movs	r0, #0
 8004154:	e008      	b.n	8004168 <_printf_common+0xa8>
 8004156:	2301      	movs	r3, #1
 8004158:	4652      	mov	r2, sl
 800415a:	4641      	mov	r1, r8
 800415c:	4638      	mov	r0, r7
 800415e:	47c8      	blx	r9
 8004160:	3001      	adds	r0, #1
 8004162:	d103      	bne.n	800416c <_printf_common+0xac>
 8004164:	f04f 30ff 	mov.w	r0, #4294967295
 8004168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800416c:	3501      	adds	r5, #1
 800416e:	e7c6      	b.n	80040fe <_printf_common+0x3e>
 8004170:	18e1      	adds	r1, r4, r3
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	2030      	movs	r0, #48	@ 0x30
 8004176:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800417a:	4422      	add	r2, r4
 800417c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004180:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004184:	3302      	adds	r3, #2
 8004186:	e7c7      	b.n	8004118 <_printf_common+0x58>
 8004188:	2301      	movs	r3, #1
 800418a:	4622      	mov	r2, r4
 800418c:	4641      	mov	r1, r8
 800418e:	4638      	mov	r0, r7
 8004190:	47c8      	blx	r9
 8004192:	3001      	adds	r0, #1
 8004194:	d0e6      	beq.n	8004164 <_printf_common+0xa4>
 8004196:	3601      	adds	r6, #1
 8004198:	e7d9      	b.n	800414e <_printf_common+0x8e>
	...

0800419c <_printf_i>:
 800419c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041a0:	7e0f      	ldrb	r7, [r1, #24]
 80041a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041a4:	2f78      	cmp	r7, #120	@ 0x78
 80041a6:	4691      	mov	r9, r2
 80041a8:	4680      	mov	r8, r0
 80041aa:	460c      	mov	r4, r1
 80041ac:	469a      	mov	sl, r3
 80041ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041b2:	d807      	bhi.n	80041c4 <_printf_i+0x28>
 80041b4:	2f62      	cmp	r7, #98	@ 0x62
 80041b6:	d80a      	bhi.n	80041ce <_printf_i+0x32>
 80041b8:	2f00      	cmp	r7, #0
 80041ba:	f000 80d1 	beq.w	8004360 <_printf_i+0x1c4>
 80041be:	2f58      	cmp	r7, #88	@ 0x58
 80041c0:	f000 80b8 	beq.w	8004334 <_printf_i+0x198>
 80041c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041cc:	e03a      	b.n	8004244 <_printf_i+0xa8>
 80041ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041d2:	2b15      	cmp	r3, #21
 80041d4:	d8f6      	bhi.n	80041c4 <_printf_i+0x28>
 80041d6:	a101      	add	r1, pc, #4	@ (adr r1, 80041dc <_printf_i+0x40>)
 80041d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041dc:	08004235 	.word	0x08004235
 80041e0:	08004249 	.word	0x08004249
 80041e4:	080041c5 	.word	0x080041c5
 80041e8:	080041c5 	.word	0x080041c5
 80041ec:	080041c5 	.word	0x080041c5
 80041f0:	080041c5 	.word	0x080041c5
 80041f4:	08004249 	.word	0x08004249
 80041f8:	080041c5 	.word	0x080041c5
 80041fc:	080041c5 	.word	0x080041c5
 8004200:	080041c5 	.word	0x080041c5
 8004204:	080041c5 	.word	0x080041c5
 8004208:	08004347 	.word	0x08004347
 800420c:	08004273 	.word	0x08004273
 8004210:	08004301 	.word	0x08004301
 8004214:	080041c5 	.word	0x080041c5
 8004218:	080041c5 	.word	0x080041c5
 800421c:	08004369 	.word	0x08004369
 8004220:	080041c5 	.word	0x080041c5
 8004224:	08004273 	.word	0x08004273
 8004228:	080041c5 	.word	0x080041c5
 800422c:	080041c5 	.word	0x080041c5
 8004230:	08004309 	.word	0x08004309
 8004234:	6833      	ldr	r3, [r6, #0]
 8004236:	1d1a      	adds	r2, r3, #4
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6032      	str	r2, [r6, #0]
 800423c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004240:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004244:	2301      	movs	r3, #1
 8004246:	e09c      	b.n	8004382 <_printf_i+0x1e6>
 8004248:	6833      	ldr	r3, [r6, #0]
 800424a:	6820      	ldr	r0, [r4, #0]
 800424c:	1d19      	adds	r1, r3, #4
 800424e:	6031      	str	r1, [r6, #0]
 8004250:	0606      	lsls	r6, r0, #24
 8004252:	d501      	bpl.n	8004258 <_printf_i+0xbc>
 8004254:	681d      	ldr	r5, [r3, #0]
 8004256:	e003      	b.n	8004260 <_printf_i+0xc4>
 8004258:	0645      	lsls	r5, r0, #25
 800425a:	d5fb      	bpl.n	8004254 <_printf_i+0xb8>
 800425c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004260:	2d00      	cmp	r5, #0
 8004262:	da03      	bge.n	800426c <_printf_i+0xd0>
 8004264:	232d      	movs	r3, #45	@ 0x2d
 8004266:	426d      	negs	r5, r5
 8004268:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800426c:	4858      	ldr	r0, [pc, #352]	@ (80043d0 <_printf_i+0x234>)
 800426e:	230a      	movs	r3, #10
 8004270:	e011      	b.n	8004296 <_printf_i+0xfa>
 8004272:	6821      	ldr	r1, [r4, #0]
 8004274:	6833      	ldr	r3, [r6, #0]
 8004276:	0608      	lsls	r0, r1, #24
 8004278:	f853 5b04 	ldr.w	r5, [r3], #4
 800427c:	d402      	bmi.n	8004284 <_printf_i+0xe8>
 800427e:	0649      	lsls	r1, r1, #25
 8004280:	bf48      	it	mi
 8004282:	b2ad      	uxthmi	r5, r5
 8004284:	2f6f      	cmp	r7, #111	@ 0x6f
 8004286:	4852      	ldr	r0, [pc, #328]	@ (80043d0 <_printf_i+0x234>)
 8004288:	6033      	str	r3, [r6, #0]
 800428a:	bf14      	ite	ne
 800428c:	230a      	movne	r3, #10
 800428e:	2308      	moveq	r3, #8
 8004290:	2100      	movs	r1, #0
 8004292:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004296:	6866      	ldr	r6, [r4, #4]
 8004298:	60a6      	str	r6, [r4, #8]
 800429a:	2e00      	cmp	r6, #0
 800429c:	db05      	blt.n	80042aa <_printf_i+0x10e>
 800429e:	6821      	ldr	r1, [r4, #0]
 80042a0:	432e      	orrs	r6, r5
 80042a2:	f021 0104 	bic.w	r1, r1, #4
 80042a6:	6021      	str	r1, [r4, #0]
 80042a8:	d04b      	beq.n	8004342 <_printf_i+0x1a6>
 80042aa:	4616      	mov	r6, r2
 80042ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80042b0:	fb03 5711 	mls	r7, r3, r1, r5
 80042b4:	5dc7      	ldrb	r7, [r0, r7]
 80042b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042ba:	462f      	mov	r7, r5
 80042bc:	42bb      	cmp	r3, r7
 80042be:	460d      	mov	r5, r1
 80042c0:	d9f4      	bls.n	80042ac <_printf_i+0x110>
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d10b      	bne.n	80042de <_printf_i+0x142>
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	07df      	lsls	r7, r3, #31
 80042ca:	d508      	bpl.n	80042de <_printf_i+0x142>
 80042cc:	6923      	ldr	r3, [r4, #16]
 80042ce:	6861      	ldr	r1, [r4, #4]
 80042d0:	4299      	cmp	r1, r3
 80042d2:	bfde      	ittt	le
 80042d4:	2330      	movle	r3, #48	@ 0x30
 80042d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042de:	1b92      	subs	r2, r2, r6
 80042e0:	6122      	str	r2, [r4, #16]
 80042e2:	f8cd a000 	str.w	sl, [sp]
 80042e6:	464b      	mov	r3, r9
 80042e8:	aa03      	add	r2, sp, #12
 80042ea:	4621      	mov	r1, r4
 80042ec:	4640      	mov	r0, r8
 80042ee:	f7ff fee7 	bl	80040c0 <_printf_common>
 80042f2:	3001      	adds	r0, #1
 80042f4:	d14a      	bne.n	800438c <_printf_i+0x1f0>
 80042f6:	f04f 30ff 	mov.w	r0, #4294967295
 80042fa:	b004      	add	sp, #16
 80042fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	f043 0320 	orr.w	r3, r3, #32
 8004306:	6023      	str	r3, [r4, #0]
 8004308:	4832      	ldr	r0, [pc, #200]	@ (80043d4 <_printf_i+0x238>)
 800430a:	2778      	movs	r7, #120	@ 0x78
 800430c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	6831      	ldr	r1, [r6, #0]
 8004314:	061f      	lsls	r7, r3, #24
 8004316:	f851 5b04 	ldr.w	r5, [r1], #4
 800431a:	d402      	bmi.n	8004322 <_printf_i+0x186>
 800431c:	065f      	lsls	r7, r3, #25
 800431e:	bf48      	it	mi
 8004320:	b2ad      	uxthmi	r5, r5
 8004322:	6031      	str	r1, [r6, #0]
 8004324:	07d9      	lsls	r1, r3, #31
 8004326:	bf44      	itt	mi
 8004328:	f043 0320 	orrmi.w	r3, r3, #32
 800432c:	6023      	strmi	r3, [r4, #0]
 800432e:	b11d      	cbz	r5, 8004338 <_printf_i+0x19c>
 8004330:	2310      	movs	r3, #16
 8004332:	e7ad      	b.n	8004290 <_printf_i+0xf4>
 8004334:	4826      	ldr	r0, [pc, #152]	@ (80043d0 <_printf_i+0x234>)
 8004336:	e7e9      	b.n	800430c <_printf_i+0x170>
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	f023 0320 	bic.w	r3, r3, #32
 800433e:	6023      	str	r3, [r4, #0]
 8004340:	e7f6      	b.n	8004330 <_printf_i+0x194>
 8004342:	4616      	mov	r6, r2
 8004344:	e7bd      	b.n	80042c2 <_printf_i+0x126>
 8004346:	6833      	ldr	r3, [r6, #0]
 8004348:	6825      	ldr	r5, [r4, #0]
 800434a:	6961      	ldr	r1, [r4, #20]
 800434c:	1d18      	adds	r0, r3, #4
 800434e:	6030      	str	r0, [r6, #0]
 8004350:	062e      	lsls	r6, r5, #24
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	d501      	bpl.n	800435a <_printf_i+0x1be>
 8004356:	6019      	str	r1, [r3, #0]
 8004358:	e002      	b.n	8004360 <_printf_i+0x1c4>
 800435a:	0668      	lsls	r0, r5, #25
 800435c:	d5fb      	bpl.n	8004356 <_printf_i+0x1ba>
 800435e:	8019      	strh	r1, [r3, #0]
 8004360:	2300      	movs	r3, #0
 8004362:	6123      	str	r3, [r4, #16]
 8004364:	4616      	mov	r6, r2
 8004366:	e7bc      	b.n	80042e2 <_printf_i+0x146>
 8004368:	6833      	ldr	r3, [r6, #0]
 800436a:	1d1a      	adds	r2, r3, #4
 800436c:	6032      	str	r2, [r6, #0]
 800436e:	681e      	ldr	r6, [r3, #0]
 8004370:	6862      	ldr	r2, [r4, #4]
 8004372:	2100      	movs	r1, #0
 8004374:	4630      	mov	r0, r6
 8004376:	f7fb ff3b 	bl	80001f0 <memchr>
 800437a:	b108      	cbz	r0, 8004380 <_printf_i+0x1e4>
 800437c:	1b80      	subs	r0, r0, r6
 800437e:	6060      	str	r0, [r4, #4]
 8004380:	6863      	ldr	r3, [r4, #4]
 8004382:	6123      	str	r3, [r4, #16]
 8004384:	2300      	movs	r3, #0
 8004386:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800438a:	e7aa      	b.n	80042e2 <_printf_i+0x146>
 800438c:	6923      	ldr	r3, [r4, #16]
 800438e:	4632      	mov	r2, r6
 8004390:	4649      	mov	r1, r9
 8004392:	4640      	mov	r0, r8
 8004394:	47d0      	blx	sl
 8004396:	3001      	adds	r0, #1
 8004398:	d0ad      	beq.n	80042f6 <_printf_i+0x15a>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	079b      	lsls	r3, r3, #30
 800439e:	d413      	bmi.n	80043c8 <_printf_i+0x22c>
 80043a0:	68e0      	ldr	r0, [r4, #12]
 80043a2:	9b03      	ldr	r3, [sp, #12]
 80043a4:	4298      	cmp	r0, r3
 80043a6:	bfb8      	it	lt
 80043a8:	4618      	movlt	r0, r3
 80043aa:	e7a6      	b.n	80042fa <_printf_i+0x15e>
 80043ac:	2301      	movs	r3, #1
 80043ae:	4632      	mov	r2, r6
 80043b0:	4649      	mov	r1, r9
 80043b2:	4640      	mov	r0, r8
 80043b4:	47d0      	blx	sl
 80043b6:	3001      	adds	r0, #1
 80043b8:	d09d      	beq.n	80042f6 <_printf_i+0x15a>
 80043ba:	3501      	adds	r5, #1
 80043bc:	68e3      	ldr	r3, [r4, #12]
 80043be:	9903      	ldr	r1, [sp, #12]
 80043c0:	1a5b      	subs	r3, r3, r1
 80043c2:	42ab      	cmp	r3, r5
 80043c4:	dcf2      	bgt.n	80043ac <_printf_i+0x210>
 80043c6:	e7eb      	b.n	80043a0 <_printf_i+0x204>
 80043c8:	2500      	movs	r5, #0
 80043ca:	f104 0619 	add.w	r6, r4, #25
 80043ce:	e7f5      	b.n	80043bc <_printf_i+0x220>
 80043d0:	08004591 	.word	0x08004591
 80043d4:	080045a2 	.word	0x080045a2

080043d8 <memmove>:
 80043d8:	4288      	cmp	r0, r1
 80043da:	b510      	push	{r4, lr}
 80043dc:	eb01 0402 	add.w	r4, r1, r2
 80043e0:	d902      	bls.n	80043e8 <memmove+0x10>
 80043e2:	4284      	cmp	r4, r0
 80043e4:	4623      	mov	r3, r4
 80043e6:	d807      	bhi.n	80043f8 <memmove+0x20>
 80043e8:	1e43      	subs	r3, r0, #1
 80043ea:	42a1      	cmp	r1, r4
 80043ec:	d008      	beq.n	8004400 <memmove+0x28>
 80043ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043f6:	e7f8      	b.n	80043ea <memmove+0x12>
 80043f8:	4402      	add	r2, r0
 80043fa:	4601      	mov	r1, r0
 80043fc:	428a      	cmp	r2, r1
 80043fe:	d100      	bne.n	8004402 <memmove+0x2a>
 8004400:	bd10      	pop	{r4, pc}
 8004402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004406:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800440a:	e7f7      	b.n	80043fc <memmove+0x24>

0800440c <_sbrk_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	4d06      	ldr	r5, [pc, #24]	@ (8004428 <_sbrk_r+0x1c>)
 8004410:	2300      	movs	r3, #0
 8004412:	4604      	mov	r4, r0
 8004414:	4608      	mov	r0, r1
 8004416:	602b      	str	r3, [r5, #0]
 8004418:	f7fc fcb2 	bl	8000d80 <_sbrk>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d102      	bne.n	8004426 <_sbrk_r+0x1a>
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	b103      	cbz	r3, 8004426 <_sbrk_r+0x1a>
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	bd38      	pop	{r3, r4, r5, pc}
 8004428:	20000338 	.word	0x20000338

0800442c <memcpy>:
 800442c:	440a      	add	r2, r1
 800442e:	4291      	cmp	r1, r2
 8004430:	f100 33ff 	add.w	r3, r0, #4294967295
 8004434:	d100      	bne.n	8004438 <memcpy+0xc>
 8004436:	4770      	bx	lr
 8004438:	b510      	push	{r4, lr}
 800443a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800443e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004442:	4291      	cmp	r1, r2
 8004444:	d1f9      	bne.n	800443a <memcpy+0xe>
 8004446:	bd10      	pop	{r4, pc}

08004448 <_realloc_r>:
 8004448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800444c:	4607      	mov	r7, r0
 800444e:	4614      	mov	r4, r2
 8004450:	460d      	mov	r5, r1
 8004452:	b921      	cbnz	r1, 800445e <_realloc_r+0x16>
 8004454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004458:	4611      	mov	r1, r2
 800445a:	f7ff bc4d 	b.w	8003cf8 <_malloc_r>
 800445e:	b92a      	cbnz	r2, 800446c <_realloc_r+0x24>
 8004460:	f7ff fbde 	bl	8003c20 <_free_r>
 8004464:	4625      	mov	r5, r4
 8004466:	4628      	mov	r0, r5
 8004468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800446c:	f000 f81a 	bl	80044a4 <_malloc_usable_size_r>
 8004470:	4284      	cmp	r4, r0
 8004472:	4606      	mov	r6, r0
 8004474:	d802      	bhi.n	800447c <_realloc_r+0x34>
 8004476:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800447a:	d8f4      	bhi.n	8004466 <_realloc_r+0x1e>
 800447c:	4621      	mov	r1, r4
 800447e:	4638      	mov	r0, r7
 8004480:	f7ff fc3a 	bl	8003cf8 <_malloc_r>
 8004484:	4680      	mov	r8, r0
 8004486:	b908      	cbnz	r0, 800448c <_realloc_r+0x44>
 8004488:	4645      	mov	r5, r8
 800448a:	e7ec      	b.n	8004466 <_realloc_r+0x1e>
 800448c:	42b4      	cmp	r4, r6
 800448e:	4622      	mov	r2, r4
 8004490:	4629      	mov	r1, r5
 8004492:	bf28      	it	cs
 8004494:	4632      	movcs	r2, r6
 8004496:	f7ff ffc9 	bl	800442c <memcpy>
 800449a:	4629      	mov	r1, r5
 800449c:	4638      	mov	r0, r7
 800449e:	f7ff fbbf 	bl	8003c20 <_free_r>
 80044a2:	e7f1      	b.n	8004488 <_realloc_r+0x40>

080044a4 <_malloc_usable_size_r>:
 80044a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044a8:	1f18      	subs	r0, r3, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	bfbc      	itt	lt
 80044ae:	580b      	ldrlt	r3, [r1, r0]
 80044b0:	18c0      	addlt	r0, r0, r3
 80044b2:	4770      	bx	lr

080044b4 <_init>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	bf00      	nop
 80044b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ba:	bc08      	pop	{r3}
 80044bc:	469e      	mov	lr, r3
 80044be:	4770      	bx	lr

080044c0 <_fini>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	bf00      	nop
 80044c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c6:	bc08      	pop	{r3}
 80044c8:	469e      	mov	lr, r3
 80044ca:	4770      	bx	lr
